{"version":3,"sources":["Constants.js","DragPiece.js","DropSquare.js","Pieces.js","Game.js","EngineMoves.js","BoardFunctions.js","Search.js","Evaluation.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","ReactPiece","_this","this","img","Image","src","props","url","onload","connectDragPreview","_this2","_this$props","connectDragSource","isDragging","react_default","a","createElement","className","onClick","handle_click_start","alt","style","opacity","cursor","React","Component","DragSource","beginDrag","id","endDrag","monitor","component","didDrop","item","getItem","handle_drag_end","connect","dragSource","dragPreview","DropSquare","class_name","connectDropTarget","handle_click_end","DropTarget","drop","handle_drop","dropTarget","isOver","Piece","player","img_url","name","Object","classCallCheck","backgroundImage","has_moved","Pawn","possibleConstructorReturn","getPrototypeOf","call","just_moved_two","Rook","Knight","Bishop","Queen","King","piece_scores","Game","position","history","moves","legal_moves","move","slice","new_position","make_move","concat","Position","squares","king_locations","castle_state","material_balance","en_passant_square","Move","start","end","en_passant","rook_start","rook_end","promotion_piece","en_passant_capture","piece","JSON","parse","stringify","Math","abs","rook","king_location","pinned_pieces","get_pinned_pieces","en_passant_pins","en_passant_location","forward","special_squares","pinned_en_passant","_king_check_squares","attacking_pieces","checked_squares","up_right","right","up_left","left","pawn_moves","knight_moves","get_knight_moves","diag_directions","straight_directions","i","length","_attacked_squares","attacked_squares","_attacked_squares2","slicedToArray","attack_squares","attack_piece","push","_attacked_squares3","_attacked_squares4","end_piece","king_check_squares","_king_check_squares2","in_check","king_moves","bishop_moves","rook_moves","current_move","includes","splice","in_check_handler","location","pawn","forward_one","forward_two","left_one","right_one","diag_left","diag_right","create_pawn_move","bishop","pin_direction","inverse_direction","toString","moves_and_captures","king_squares","get_king_moves","is_attacked","white_king_start","castle","white_kingside_rook","white_queenside_rook","black_king_start","black_kingside_rook","black_queenside_rook","direction_is_attacked","move_direction","start_location","piece_types","end_location","direction","attacking_piece","square_location","pin_info","pinned_directions","x","get_pinned_piece","pin_location","pinned_piece","pawn_location","pawn_end_location","is_en_passant","pieces","k","promote","back","king_start","king_end","captured_location","directions","y","down_right","down_left","up","down","move_right","move_left","distance","ParseFen","fen","Array","fill","rank","file","count","fenCnt","charCodeAt","coordinate_change","wk_location","bk_location","current_square","get_king_locations","engine_squares","sum_material","evaluate_material","set_pawn_states","index","sq64","floor","initialize_engine_board","board","color","initialize_board","INFINITY","CHECKMATE","start_time","time_limit","depth_searched","time_cutoff","alphabeta","depth","alpha","beta","value","top_move","current_position","max","performance","now","min","alphabeta_search","max_depth","max_time","set_variables","value_move","search_move","console","log","best_weights","genetic_weights","learn_rate","evolve_weights","new_weights","key","random","play_game","chess_game","alphabeta_result","score","result","weights","evaluation","genetic_evaluation","base_evaluation","Chess","state","drag_end","promotion","class","status","click_start","initial_position","net_score","train","setState","pop","alert","engine_move","start_square","click_end","change_states","drag_start","possible_moves","create_move","is_legal","setTimeout","bind","_this3","current_squares","normal_squares","promotion_class","Buttons","reset","App_Board","onDrop","App_FenPosition","setup_fen","App_Promotion","handle_promotion","Board","_this4","html_board","html_row","_loop","App_Square","renderSquares","Square","_this5","DragPiece","src_DropSquare","Fragment","renderSquare","FenPosition","_this6","event","target","preventDefault","_this7","onSubmit","submit","type","onChange","handleChange","Promotion","_this8","knight_piece","bishop_piece","rook_piece","queen_piece","DragDropContext","HTML5Backend","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa026d1f.chunk.js","sourcesContent":["export const ItemTypes = {\n  PIECE: 'piece'\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from './Constants';\nimport { DragSource } from 'react-dnd';\nimport './App.css';\n\nconst pieceSource = {\n  beginDrag(props) {\n    const item = { id: props.id };\n    return item;\n  },\n  endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      //Decided not to move piece maybe\n      return;\n    }\n    const item = monitor.getItem();\n    return props.handle_drag_end(item.id);\n  }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    };\n}\n\nclass ReactPiece extends React.Component {\n  componentDidMount() {\n    const img = new Image(46, 46);\n    img.src = this.props.url;\n    img.onload = () => this.props.connectDragPreview(img);\n  }\n\n  render() {\n    var url = this.props.url\n    const { connectDragSource, isDragging } = this.props;\n    return connectDragSource(\n    <div className = \"piece_container\" onClick = {() => this.props.handle_click_start()}>\n      <img src={url} alt ='' className = \"react_piece\" style={{\n        opacity: 1,\n        cursor: isDragging ? 'grabbing' : 'grab'\n      }}>\n      </img>\n    </div>\n    );\n  }\n  }\n\nReactPiece.propTypes = {\n  connectDragSource: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired\n};\n\nexport default DragSource(ItemTypes.PIECE, pieceSource, collect)(ReactPiece);\n\n\n\n\n\n\n\n","import React from 'react';\nimport { ItemTypes } from './Constants';\nimport { DropTarget } from 'react-dnd';\nimport './App.css';\n\nconst squareTarget = {\n    drop(props) {\n      return props.handle_drop();\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n      connectDropTarget: connect.dropTarget(),\n      isOver: monitor.isOver()\n    };\n}\n\nclass DropSquare extends React.Component {\n    render() {\n        var style = this.props.style;\n        var class_name = this.props.class_name;\n        const connectDropTarget = this.props.connectDropTarget;\n        return connectDropTarget(\n            <div className={class_name} style={style} onClick = {() => this.props.handle_click_end()}> </div>\n        )\n    }\n}\n  \n\nexport default DropTarget(ItemTypes.PIECE, squareTarget, collect)(DropSquare);","\nclass Piece {\n  constructor(player, img_url, name){\n    this.player = player;\n    this.style = {backgroundImage: \"url('\"+img_url+\"')\"};\n    this.name = name;\n    this.url = img_url;\n    this.has_moved = false;\n  }\n}\n\nclass Pawn extends Piece {\n  constructor(player){\n    var url='https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg'\n    if (player === 'black') {\n        url = 'https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg'\n    }\n    super(player, url, 'Pawn');\n    this.just_moved_two = false;\n  }\n}\n\nclass Rook extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg'\n        }\n        super(player, url, 'Rook');\n    }\n}\n\nclass Knight extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg'\n        }\n        super(player, url, 'Knight')\n    }\n}\n\nclass Bishop extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg'\n        }\n        super(player, url, 'Bishop')\n    }\n}\n\nclass Queen extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg'\n        }\n        super(player, url, 'Queen')\n    }\n}\n\nclass King extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg'\n        }\n        super(player, url, 'King')\n    }\n}\n\n\n\nexport {Pawn,Rook,Knight,Bishop,King,Queen}","import { legal_moves } from \"./EngineMoves\";\n\n\nvar piece_scores = { Pawn: 1, Knight: 3, Bishop: 3.3, Rook: 5, Queen: 9.5, King: 0 };\n\nclass Game {\n    constructor(position, history, moves) {\n        this.position = position;\n        this.history = history;\n        this.moves = moves; \n    }\n    moves() {\n        return legal_moves(this.position);\n    }\n    make_move(move) {\n        const history = this.history.slice();\n        const moves = this.moves.slice();\n        let new_position = make_move(this.position, move);\n        this.position = new_position;\n        this.history = history.concat(new_position);\n        this.moves = moves.concat(move);\n    }\n}\n\n/* king locations = [white king, black king]\n * castle_state = [white kingside, white queenside, black kingside, black queenside] 1 for can castle 0 for cannot castle */\nclass Position {\n    constructor(player, squares, king_locations, castle_state, material_balance, en_passant_square) {\n        this.player = player;\n        this.squares = squares;\n        this.king_locations = king_locations;\n        this.castle_state = castle_state;\n        this.material_balance = material_balance;\n        this.en_passant_square = en_passant_square;\n    }\n}\n\nclass Move {\n    constructor(start,end, en_passant, rook_start, rook_end, promotion_piece) {\n        this.start = start;\n        this.end = end;\n        this.en_passant_capture = en_passant;\n        this.rook_start = rook_start;\n        this.rook_end = rook_end;\n        this.promotion_piece = promotion_piece;\n    }\n}\n\nfunction make_move(position, move) {\n\n    let start = move.start\n    let end = move.end\n\n    /*Starting Rook Locations */\n    let wk_rook = 98;\n    let wq_rook = 91;\n    let bk_rook = 28;\n    let bq_rook = 21;\n\n    let player = position.player;\n\n    let squares = position.squares.slice();\n    let piece = JSON.parse(JSON.stringify(squares[start]));\n    let king_locations = position.king_locations.slice();\n    let castle_state = position.castle_state.slice();\n    let material_balance = position.material_balance;\n    let en_passant_square = null;\n\n    if (move.en_passant_capture !== null) {\n        squares[move.en_passant_capture] = null;\n    }\n\n    /* Pawn Just Moved Two */\n    if (piece.name === 'Pawn' && Math.abs(start - end) === 20) {\n        en_passant_square = start + (end - start) / 2;\n    }\n\n    /*Castling move*/\n    if (move.rook_start !== null) {\n        let rook = JSON.parse(JSON.stringify(squares[move.rook_start]));\n        squares[move.rook_start] = null;\n        squares[move.rook_end] = rook;\n        rook.has_moved = true;\n    }\n    /*Change King Location and Castling states*/\n    if (piece.name === 'King') {\n        if (piece.player === 'white') {\n            king_locations[0] = end\n            castle_state[0] = 0;\n            castle_state[1] = 0;\n        }\n        else {\n            king_locations[1] = end\n            castle_state[2] = 0;\n            castle_state[3] = 0;\n        }\n    }\n    /* Change castling states for first rook moves */\n    if (piece.name === 'Rook' && !piece.has_moved) {\n        if (start === wk_rook) {\n            castle_state[0] = 0;\n        }\n        else if (start === wq_rook) {\n            castle_state[1] = 0;\n        }\n        else if (start === bk_rook) {\n            castle_state[2] = 0;\n        }\n        else if (start === bq_rook) {\n            castle_state[3] = 0;\n        }\n    }\n    /* Change castling states for rook captures */\n    if (squares[end] !== null && squares[end].name === 'Rook') {\n        if (end === wk_rook) {\n            castle_state[0] = 0;\n        }\n        else if (end === wq_rook) {\n            castle_state[1] = 0;\n        }\n        else if (end === bk_rook) {\n            castle_state[2] = 0;\n        }\n        else if (end === bq_rook) {\n            castle_state[3] = 0;\n        }\n    }\n    /*Change material Balance */\n    if (material_balance !== null && squares[end] !== null) {\n        if (position.player === 'white') {\n            material_balance = material_balance + piece_scores[squares[end].name];\n        }\n        else {\n            material_balance = material_balance - piece_scores[squares[end].name];\n        }\n    }\n\n    /*Promotion */\n    if (move.promotion_piece !== null) {\n        piece = move.promotion_piece;\n        if (piece.player === 'white') {\n            material_balance = material_balance + piece_scores[piece.name] - 1;\n        }\n        else {\n            material_balance = material_balance - piece_scores[piece.name] + 1;\n        }\n    }\n\n    squares[start] = null;\n    squares[end] = piece;\n    piece.has_moved = true;\n\n    (player === 'white') ? player = 'black' : player = 'white';\n\n    return new Position(player, squares, king_locations, castle_state, material_balance, en_passant_square);\n}\n\n/*This move creation function turns dragged moves from the UI into move objects */\nfunction create_move(start, end, position, promotion_piece) {\n    let squares = position.squares;\n    let piece = position.squares[start];\n    let en_passant = null;\n    let rook_start = null;\n    let rook_end = null;\n\n    /*For En passant*/\n    if (piece.name === 'Pawn') {\n        /* En Passant One way*/\n        if (Math.abs(start - end) === 9 && squares[end] === null) {\n            if (position.player === 'white') {\n                en_passant = start + 1;\n            }\n            else {\n                en_passant = start - 1;\n            }\n\n        }\n        else if (Math.abs(start - end) === 11 && squares[end] === null) {\n            if (position.player === 'white') {\n                en_passant = start - 1;\n            }\n            else {\n                en_passant = start + 1;\n            }\n        }\n    }\n\n    if (piece.name === 'King') {\n        /* kingside */\n        if ((end - start) === 2) {\n            rook_start = end + 1\n            rook_end = start + 1\n        }\n        else if ((start - end) === 2) {\n            rook_start = end - 2\n            rook_end = start - 1\n        }\n    }\n    return new Move(start, end, en_passant, rook_start, rook_end, promotion_piece)\n}\n\nexport {Move, Position, make_move, create_move, Game}","/********************************************** Legal Move Generation and Checking for Engine*************************************/\nimport { Knight, Bishop, Rook, Queen } from './Pieces.js';\nimport { Move } from './Game.js';\n\n/* Return all legal moves given a position */\nfunction legal_moves(position) {\n    let squares = position.squares;\n    let player = position.player;\n    let king_location = (player === 'white') ? position.king_locations[0] : position.king_locations[1];\n    let pinned_pieces = get_pinned_pieces(squares, king_location, player);\n    let en_passant_pins = null;\n    let castle_state = position.castle_state;\n    let en_passant_square = position.en_passant_square;\n\n    if (en_passant_square !== null) {\n        en_passant_pins = pinned_en_passant(squares,en_passant_square,king_location,player);\n    }\n\n    let [attacking_pieces, attacked_squares] = king_check_squares(squares, king_location, player);\n    let in_check = (attacking_pieces.length > 0) ? true : false;\n\n    /* Only King can move in double check */\n    if (attacking_pieces.length > 1) {\n        return king_moves(squares, king_location, player, castle_state);\n    }\n    var legal_moves = [];\n\n    for (var i = 0; i < 120; i++) {\n        /* Skip empty and boundary squares */\n        if (squares[i] !== null && squares[i] !== 'boundary') {\n            /* Check for piece color and send move generation to subfunctions*/\n            if (squares[i].player === player) {\n                if (squares[i].name === 'Pawn') {\n                    legal_moves = legal_moves.concat(pawn_moves(squares, i, player, pinned_pieces, en_passant_square, en_passant_pins));\n                }\n                else if (squares[i].name === 'Knight') {\n                    legal_moves = legal_moves.concat(knight_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'Bishop') {\n                    legal_moves = legal_moves.concat(bishop_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'Rook') {\n                    legal_moves = legal_moves.concat(rook_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'Queen') {\n                    legal_moves = legal_moves.concat(rook_moves(squares, i, player, pinned_pieces));\n                    legal_moves = legal_moves.concat(bishop_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'King') {\n                    legal_moves = legal_moves.concat(king_moves(squares, i, player, castle_state, in_check));\n                }\n            }\n        }\n    }\n\n    if (attacking_pieces.length > 0) {\n        legal_moves = in_check_handler(legal_moves, king_location, attacked_squares);\n    }\n\n    return legal_moves;\n}\n\n\n/* Check if a given move is within the legal moves found */\nfunction is_legal(move, legal_moves) {\n    let is_legal = false;\n    for (var i = 0; i < legal_moves.length; i++) {\n        if (JSON.stringify(move) === JSON.stringify(legal_moves[i])) {\n            is_legal = true;\n        }\n    }\n    return is_legal;\n}\n\n/************************************************************ Piece Move Generation Functions ************************************************/\n\n/* Get legal moves for a pawn given a board position */\nfunction pawn_moves(squares, location, player, pinned_pieces, en_passant_square, en_passant_pins) {\n    let legal_moves = [];\n    let pawn = squares[location];\n\n    let forward_one = forward(1, location, player);\n    let forward_two = forward(2, location, player);\n    let left_one = left(1, location, player);\n    let right_one = right(1, location, player);\n    let diag_left = left(1, forward(1, location, player), player)\n    let diag_right = right(1, forward(1, location, player), player)\n\n    /*legal to move 2 spaces forward*/\n    if (!pawn.has_moved && squares[forward_two] === null && squares[forward_one] === null) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, forward_two, pinned_pieces, [0, 1], false, null, null));\n    }\n    /*legal to move 1 space ahead*/\n    if (squares[forward_one] === null) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, forward_one, pinned_pieces, [0, 1], false, null, null));\n    }\n    /*legal to take left*/\n    if (squares[diag_left] !== null && squares[diag_left] !== 'boundary') {\n        if (squares[diag_left].player !== player) {\n            legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_left, pinned_pieces, [-1, 1], false, null, null));\n        }\n    }\n    /*legal to take right*/\n    if (squares[diag_right] !== null && squares[diag_right] !== 'boundary') {\n        if (squares[diag_right].player !== player) {\n            legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_right, pinned_pieces, [1, 1], false, null, null));\n        }\n    }\n    /*legal to take en passant right*/\n    if (diag_right === en_passant_square) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_right, pinned_pieces, [1, 1], true, right_one, en_passant_pins));\n    }\n    /*legal to take en passant left*/\n    if (diag_left === en_passant_square) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_left, pinned_pieces, [-1, 1], true, left_one, en_passant_pins));\n    }\n\n    return legal_moves;\n}\n\n/* Get legal moves for a knight given a board position */\nfunction knight_moves(squares, location, player, pinned_pieces) {\n    let legal_moves = [];\n    /*Impossible to move pinned knight*/\n    if (location in pinned_pieces) {\n        return legal_moves;\n    }\n\n    let moves = get_knight_moves(location, player);\n\n    for (var i = 0; i < moves.length; i++) {\n        if (squares[moves[i]] === null && squares[moves[i]] !== 'boundary') {\n            legal_moves.push(make_move(location, moves[i]));\n        }\n        else if (squares[moves[i]].player !== player && squares[moves[i]] !== 'boundary') {\n            legal_moves.push(make_move(location, moves[i]));\n        }\n    }\n\n    return legal_moves;\n}\n\n/* Get legal moves for bishop given board position */\nfunction bishop_moves(squares, location, player, pinned_pieces) {\n    let legal_moves = [];\n    let bishop = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[1, 1], [-1, 1], [1, -1], [-1, -1]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n            }\n        }\n        else {\n            legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n        }\n    }\n    return legal_moves;\n}\n/* Get legal moves for a rook given a board position*/\nfunction rook_moves(squares, location, player, pinned_pieces) {\n    let legal_moves = [];\n    let rook = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[0, 1], [0, -1], [-1, 0], [1, 0]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, rook));\n            }\n        }\n        else {\n            legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, rook));\n        }\n    }\n    return legal_moves;\n}\n/* Get legal moves for a king given a board position */\nfunction king_moves(squares, location, player, castle_state, in_check) {\n    let legal_moves = [];\n\n    /* Take King off the board for calculating normal move attacking squares */\n    let king_squares = squares.slice();\n    king_squares[location] = null;\n\n    let moves = get_king_moves(location, player);\n\n    /* Regular Moves (non castling) */\n    for (var i = 0; i < moves.length; i++) {\n        /* Move to empty square */\n        if (squares[moves[i]] === null) {\n            if (!is_attacked(king_squares, moves[i], player)[0]) {\n                legal_moves.push(make_move(location, moves[i]));\n            }\n        }\n        /* Capture */\n        else if (squares[moves[i]] !== 'boundary' && squares[moves[i]].player !== player && !is_attacked(king_squares, moves[i], player)[0]) {\n            legal_moves.push(make_move(location, moves[i]));\n        }\n    }\n\n    /* Castling */\n    let white_kingside_rook = 98;\n    let white_queenside_rook = 91;\n    let black_kingside_rook = 28;\n    let black_queenside_rook = 21;\n    let white_king_start = 95;\n    let black_king_start = 25;\n\n\n    /* White Kingside */\n    if (!in_check) {\n        if (castle_state[0] === 1 && squares[white_king_start + 1] === null && squares[white_king_start + 2] === null) {\n            if (!is_attacked(squares, white_king_start + 1, player)[0] && !is_attacked(squares, white_king_start + 2, player)[0]) {\n                legal_moves.push(castle(white_king_start, white_king_start + 2, white_kingside_rook, white_kingside_rook - 2));\n            }\n        }\n        /* White Queenside */\n        if (castle_state[1] === 1 && squares[white_king_start - 1] === null && squares[white_king_start - 2] === null && squares[white_king_start - 3] === null) {\n            if (!is_attacked(squares, white_king_start - 1, player)[0] && !is_attacked(squares, white_king_start - 2, player)[0]) {\n                legal_moves.push(castle(white_king_start, white_king_start - 2, white_queenside_rook, white_queenside_rook + 3));\n            }\n        }\n        /* Black Kingside */\n        if (castle_state[2] === 1 && squares[black_king_start + 1] === null && squares[black_king_start + 2] === null) {\n            if (!is_attacked(squares, black_king_start + 1, player)[0] && !is_attacked(squares, black_king_start + 2, player)[0]) {\n                legal_moves.push(castle(black_king_start, black_king_start + 2, black_kingside_rook, black_kingside_rook - 2));\n            }\n        }\n        /* Black Queenside */\n        if (castle_state[3] === 1 && squares[black_king_start - 1] === null && squares[black_king_start - 2] === null && squares[black_king_start - 3] === null) {\n            if (!is_attacked(squares, black_king_start - 1, player)[0] && !is_attacked(squares, black_king_start - 2, player)[0]) {\n                legal_moves.push(castle(black_king_start, black_king_start - 2, black_queenside_rook, black_queenside_rook + 3));\n            }\n        }\n    }\n    return legal_moves;\n}\n\n/************************************************************* Pinned Pieces and King Checks *******************************************************************/\n\n/* Eliminate moves where king is still in check from originally checking piece.  Only for in check positions.*/\nfunction in_check_handler(legal_moves, king_location, attacked_squares) {\n    for (var i = legal_moves.length - 1; i >= 0; i--) {\n        let current_move = legal_moves[i];\n        /* If king was not moved out of check and the moved piece did not block the check or eliminate the checking piece than remove the move */\n        if (!attacked_squares.includes(current_move.end) && !attacked_squares.includes(current_move.en_passant_capture) && current_move.start !== king_location) {\n            legal_moves.splice(i, 1);\n        }\n    }\n    return legal_moves;\n}\n\n/* Check if square is under attack from a specified direction */\nfunction direction_is_attacked(squares, move_direction, start_location, player, piece_types) {\n    let end_location = direction(move_direction, start_location, player);\n    let attacking_piece = null;\n\n    while (squares[end_location] === null) {\n        end_location = direction(move_direction, end_location, player);\n    }\n    let end_piece = squares[end_location];\n    if (end_piece !== 'boundary' && end_piece.player !== player) {\n        for (var i = 0; i < piece_types.length; i++) {\n            if (piece_types[i] === end_piece.name) {\n                attacking_piece = [end_location, move_direction];\n            }\n        }\n    }\n    return attacking_piece;\n}\n/* king_check squares returns a set of squares which a player's piece must end up in to block the check or remove the checking piece */\nfunction king_check_squares(squares, king_location, player) {\n\n    let attacking_pieces = [];\n    let checked_squares = [];\n\n    let up_right = right(1, forward(1, king_location, player), player);\n    let up_left = left(1, forward(1, king_location, player), player);\n\n    let pawn_moves = [up_right, up_left];\n    let knight_moves = get_knight_moves(king_location, player);\n    let diag_directions = [[1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let straight_directions = [[0, 1], [0, -1], [-1, 0], [1, 0]];\n\n    /* get bishop/queen attack squares */\n    for (var i = 0; i < diag_directions.length; i++) {\n        let [attack_squares, attack_piece] = attacked_squares(squares, diag_directions[i], king_location, player, ['Queen', 'Bishop']);\n        if (attack_piece !== null) {\n            checked_squares = checked_squares.concat(attack_squares);\n            attacking_pieces.push(attack_piece);\n        }\n    }\n    /* Check for rook/queen attacks */\n    for (i = 0; i < straight_directions.length; i++) {\n        let [attack_squares, attack_piece] = attacked_squares(squares, straight_directions[i], king_location, player, ['Queen', 'Rook']);\n        if (attack_piece !== null) {\n            checked_squares = checked_squares.concat(attack_squares);\n            attacking_pieces.push(attack_piece);\n        }\n    }\n\n    /* Check if square is under attack by knights*/\n    for (i = 0; i < knight_moves.length; i++) {\n        let end_piece = squares[knight_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Knight') {\n                checked_squares = checked_squares.concat([knight_moves[i]]);\n                attacking_pieces.push(end_piece);\n            }\n        }\n    }\n    /* Check if square is under attack by pawns*/\n    for (i = 0; i < pawn_moves.length; i++) {\n        let end_piece = squares[pawn_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Pawn') {\n                checked_squares = checked_squares.concat([pawn_moves[i]]);\n                attacking_pieces.push(end_piece);\n            }\n        }\n    }\n\n    return [attacking_pieces, checked_squares];\n}\n\n/* Return the squares that are under attack and the piece that is attacking*/\nfunction attacked_squares(squares, move_direction, start_location, player, piece_types) {\n    let end_location = direction(move_direction, start_location, player);\n    let attacked_squares = [end_location];\n\n    while (squares[end_location] === null) {\n        end_location = direction(move_direction, end_location, player);\n        attacked_squares.push(end_location);\n    }\n    let end_piece = squares[end_location];\n    if (end_piece !== 'boundary' && end_piece.player !== player) {\n        for (var i = 0; i < piece_types.length; i++) {\n            if (piece_types[i] === end_piece.name) {\n                attacked_squares.push(end_location);\n                return [attacked_squares, end_piece];\n            }\n        }\n    }\n    return [null, null];\n}\n\n/* Check if square is under attack by opposing pieces */\nfunction is_attacked(squares, square_location, player) {\n\n    let is_attacked = false;\n    let attacking_pieces = {};\n    let attacking_piece = null;\n\n    let up_right = right(1, forward(1, square_location, player), player);\n    let up_left = left(1, forward(1, square_location, player), player);\n\n    let pawn_moves = [up_right, up_left];\n    let knight_moves = get_knight_moves(square_location, player);\n    let king_moves = get_king_moves(square_location, player);\n    let diag_directions = [[1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let straight_directions = [[0, 1], [0, -1], [-1, 0], [1, 0]];\n\n    /* check for bishop/queen attacks */\n    for (var i = 0; i < diag_directions.length; i++) {\n        attacking_piece = direction_is_attacked(squares, diag_directions[i], square_location, player, ['Queen', 'Bishop']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n    /* Check for rook/queen attacks */\n    for (i = 0; i < straight_directions.length; i++) {\n        attacking_piece = direction_is_attacked(squares, straight_directions[i], square_location, player, ['Queen', 'Rook']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n\n    /* Check if square is under attack by knights*/\n    for (i = 0; i < knight_moves.length; i++) {\n        let end_piece = squares[knight_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Knight') {\n                is_attacked = true;\n                attacking_pieces[knight_moves[i]] = 'knight_attack';\n            }\n        }\n    }\n    /* Check if square is under attack by pawns*/\n    for (i = 0; i < pawn_moves.length; i++) {\n        let end_piece = squares[pawn_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Pawn') {\n                is_attacked = true;\n                attacking_pieces[pawn_moves[i]] = 'pawn_attack';\n            }\n        }\n    }\n\n    /* Check if square is under attack by king. */\n    for (i = 0; i < king_moves.length; i++) {\n        let end_piece = squares[king_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'King') {\n                is_attacked = true;\n            }\n        }\n    }\n\n    return [is_attacked, attacking_pieces];\n}\n\n/* Get pieces which are pinned to the king */\nfunction get_pinned_pieces(squares, king_location, player) {\n    let pinned_pieces = {};\n    let pin_info = null;\n    let pinned_directions = [[0, 1], [0, -1], [-1, 0], [1, 0], [1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let pin_direction = null;\n\n    for (var x = 0; x < pinned_directions.length; x++) {\n        pin_direction = pinned_directions[x];\n        if (pin_direction[0] === 0 || pin_direction[1] === 0) {\n            pin_info = get_pinned_piece(squares, pin_direction, king_location, player, ['Queen', 'Rook']);\n        }\n        else {\n            pin_info = get_pinned_piece(squares, pin_direction, king_location, player, ['Queen', 'Bishop']);\n        }\n        if (pin_info !== null) {\n            pinned_pieces[pin_info[0]] = pin_info[1];\n        }\n    }\n    return pinned_pieces;\n}\n/* Check for a pinned piece given an attacking direction towards the king */\nfunction get_pinned_piece(squares, pin_direction, king_location, player, piece_types) {\n    let pin_location = direction(pin_direction, king_location, player);\n    let pinned_piece = null;\n    /* Go until you run into a piece or boundary */\n    while (squares[pin_location] === null) {\n        pin_location = direction(pin_direction, pin_location, player);\n    }\n\n    /* If you run into same player piece, go until you run into the next piece or boundary */\n    if (squares[pin_location] !== 'boundary' && squares[pin_location].player === player) {\n        pinned_piece = pin_location;\n        pin_location = direction(pin_direction, pin_location, player);\n        while (squares[pin_location] === null) {\n            pin_location = direction(pin_direction, pin_location, player);\n        }\n        /* Check if piece on the other end is a piece type associated with a pin */\n        if (squares[pin_location] !== 'boundary' && squares[pin_location].player !== player) {\n            for (var i = 0; i < piece_types.length; i++) {\n                if (squares[pin_location].name === piece_types[i]) {\n                    return [pinned_piece, pin_direction];\n                }\n            }\n        }\n    }\n    return null;\n}\n\nfunction pinned_en_passant(squares,en_passant_square, king_location, player) {\n    let en_passant_location = forward(1,en_passant_square);\n    let special_squares = squares.slice();\n    special_squares[en_passant_location] = null;\n\n    return get_pinned_pieces(special_squares, king_location, player)\n}\n\n/****************************************************** Move Checking/Exploring and Board Navigating Helper Functions *********************************************************/\n\n/* Given a possible pawn move check if the move is legal and add the move */\nfunction create_pawn_move(pawn, pawn_location, pawn_end_location, pinned_pieces, move_direction, is_en_passant, en_passant_capture, en_passant_pins) {\n    let legal_moves = [];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    if (pawn_location in pinned_pieces) {\n        pin_direction = pinned_pieces[pawn_location];\n        inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n\n        /* Can only move towards King or away from king when pinned */\n        if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\n            if (is_en_passant) {\n                legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\n            }\n            else {\n                legal_moves.push(make_move(pawn_location, pawn_end_location));\n            }\n        }\n    }\n    else {\n        if (is_en_passant) {\n            if (pawn_location in en_passant_pins) {\n                pin_direction = en_passant_pins[pawn_location];\n                inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n                if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\n                    legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\n                }\n            }\n            else {\n                legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\n            }\n        }\n        else {\n            /*Handle Promotions*/\n            if (pawn_end_location >= 91 || pawn_end_location <= 28) {\n                let knight_piece = new Knight(pawn.player);\n                let bishop_piece = new Bishop(pawn.player);\n                let rook_piece = new Rook(pawn.player);\n                let queen_piece = new Queen(pawn.player);\n\n                let pieces = [knight_piece, bishop_piece, rook_piece, queen_piece];\n\n                for (var k = 0; k < pieces.length; k++) {\n                    legal_moves.push(promote(pieces[k], pawn_location, pawn_end_location));\n                }\n            }\n            else {\n                legal_moves.push(make_move(pawn_location, pawn_end_location));\n            }\n        }\n    }\n    return legal_moves;\n}\n\n/* Get possible moves and captures for rooks, queens, and bishops (straight pieces) with respect to direction */\nfunction moves_and_captures(squares, move_direction, start_location, player, piece) {\n    let legal_moves = [];\n    let end_location = direction(move_direction, start_location, player);\n\n    while (squares[end_location] === null) {\n        legal_moves.push(make_move(start_location, end_location));\n        end_location = direction(move_direction, end_location, player);\n    }\n    if (squares[end_location] !== 'boundary' && squares[end_location].player !== player) {\n        legal_moves.push(make_move(start_location, end_location));\n    }\n    return legal_moves;\n}\n/* Get Knight move directions */\nfunction get_knight_moves(location, player) {\n\n    let up_right = right(1, forward(2, location, player), player);\n    let up_left = left(1, forward(2, location, player), player);\n    let down_right = right(1, back(2, location, player), player);\n    let down_left = left(1, back(2, location, player), player);\n    let right_up = right(2, forward(1, location, player), player);\n    let right_down = right(2, back(1, location, player), player);\n    let left_up = left(2, forward(1, location, player), player);\n    let left_down = left(2, back(1, location, player), player);\n\n    let moves = [up_right, up_left, down_right, down_left, right_up, right_down, left_up, left_down];\n    return moves;\n}\n/* Get King move directions */\nfunction get_king_moves(location, player) {\n\n    let up = forward(1, location, player);\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let move_left = left(1, location, player);\n    let move_right = right(1, location, player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let down = back(1, location, player);\n\n    let moves = [up, up_right, up_left, move_left, move_right, down_right, down_left, down];\n    return moves;\n}\n\n/* Standard move making.  Set start square to null and end square to piece value */\nfunction make_move(start, end) {\n\n    let move = new Move(start, end, null, null, null, null)\n    return move;\n}\n/* Function Promote */\nfunction promote(piece, start, end) {\n\n    let move = new Move(start, end, null, null, null, piece)\n    return move;\n}\n/* Castling Requires special move making */\nfunction castle(king_start, king_end, rook_start, rook_end) {\n    let move = new Move(king_start, king_end, null, rook_start, rook_end, null);\n    return move;\n}\n/* En Passant requires special move making */\nfunction en_passant(start, end, captured_location) {\n    let move = new Move(start, end, captured_location, null, null, null);\n    return move;\n}\n\n/* Abstact away difference between black and white moves. All from perspective of player. */\nfunction direction(directions, location, player) {\n    let x = directions[0];\n    let y = directions[1];\n\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let up = forward(1, location, player);\n    let down = back(1, location, player);\n    let move_right = right(1, location, player);\n    let move_left = left(1, location, player);\n\n    if (x === 0 && y === 1) {\n        return up;\n    }\n    else if (x === -1 && y === 1) {\n        return up_left;\n    }\n    else if (x === 1 && y === 1) {\n        return up_right;\n    }\n    else if (x === 1 && y === 0) {\n        return move_right;\n    }\n    else if (x === -1 && y === 0) {\n        return move_left;\n    }\n    else if (x === 1 && y === -1) {\n        return down_right;\n    }\n    else if (x === -1 && y === -1) {\n        return down_left;\n    }\n    else if (x === 0 && y === -1) {\n        return down;\n    }\n}\n\nfunction forward(distance, location, player) {\n    if (player === 'white') {\n        return location - 10 * distance;\n    }\n    else {\n        return location + 10 * distance;\n    }\n}\nfunction back(distance, location, player) {\n    if (player === 'white') {\n        return location + 10 * distance;\n    }\n    else {\n        return location - 10 * distance;\n    }\n}\nfunction left(distance, location, player) {\n    if (player === 'white') {\n        return location - distance;\n    }\n    else {\n        return location + distance;\n    }\n}\nfunction right(distance, location, player) {\n    if (player === 'white') {\n        return location + distance;\n    }\n    else {\n        return location - distance;\n    }\n}\n\n\nexport { legal_moves, is_legal, is_attacked}\n","import {King, Rook, Pawn, Knight, Bishop, Queen } from './Pieces.js';\nimport {Position } from './Game.js'\n\nvar piece_scores = { Pawn: 1, Knight: 3, Bishop: 3.3, Rook: 5, Queen: 9.5, King: 0 }\n\n/* Turn FEN into chess position object */\nfunction ParseFen(fen) {\n    if (fen.length === 0) {\n        return \"FEN Error\";\n    }\n    let squares = Array(64).fill(null);\n    let player = null;\n    let castle_state = [0,0,0,0];\n    let en_passant_square = null;\n\n\tvar rank = 0;\n    var file = 0;\n    var piece = 0;\n    var count = 0;\n    var i = 0;  \n    var sq64 = 0;\n    var fenCnt = 0; // fen[fenCnt]\n\t\n\twhile ((rank <= 7) && fenCnt < fen.length) {\n\t    count = 1;\n\t\tswitch (fen[fenCnt]) {\n\t\t\tcase 'p': piece = new Pawn('black'); break;\n            case 'r': piece = new Rook('black'); break;\n            case 'n': piece = new Knight('black'); break;\n            case 'b': piece = new Bishop('black'); break;\n            case 'k': piece = new King('black'); break;\n            case 'q': piece = new Queen('black'); break;\n            case 'P': piece = new Pawn('white'); break;\n            case 'R': piece = new Rook('white'); break;\n            case 'N': piece = new Knight('white'); break;\n            case 'B': piece = new Bishop('white'); break;\n            case 'K': piece = new King('white'); break;\n            case 'Q': piece = new Queen('white'); break;\n\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n                piece = null;\n                count = fen[fenCnt].charCodeAt() - '0'.charCodeAt();\n                break;\n            \n            case '/':\n            case ' ':\n                rank = rank + 1;\n                file = 0;\n                fenCnt = fenCnt + 1;\n                continue;  \n            default:\n                return \"FEN error\";\n        }\n        for (i = 0; i < count; i++) {\t\n\t\t\tsq64 = rank*8 + file;            \n            squares[sq64] = piece;\n\t\t\tfile++;\n        }\n\t\tfenCnt++;\n    } // while loop end\n\t\n\t//rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\n\tplayer = (fen[fenCnt] === 'w') ? 'white' : 'black';\n    fenCnt += 2;\n\t\n\tfor (i = 0; i < 4; i++) {\n        if (fen[fenCnt] === ' ') {\n            break;\n        }\t\t\n\t\tswitch(fen[fenCnt]) {\n\t\t\tcase 'K': castle_state[0] = 1 ; break;\n\t\t\tcase 'Q': castle_state[1] = 1 ; break;\n\t\t\tcase 'k': castle_state[2] = 1 ; break;\n\t\t\tcase 'q': castle_state[3] = 1 ; break;\n\t\t\tdefault:\t     break;\n        }\n\t\tfenCnt++;\n\t}\n    fenCnt++;\t\n\t\n\tif (fen[fenCnt] !== '-') {        \n\t\tfile = fen[fenCnt].charCodeAt() - 'a'.charCodeAt();\n        rank = fen[fenCnt + 1].charCodeAt() - '1'.charCodeAt();\t\n        en_passant_square = coordinate_change((7-rank) * 8 + file);\t\n    }\n    squares = engine_squares(squares);\n    let king_locations = get_king_locations(squares);\n    let material_balance = evaluate_material(squares);\n    let position = new Position(player,squares,king_locations, castle_state,material_balance,en_passant_square);\n    set_pawn_states(position);\n    return position;\n\t\n}\n\n/* Add padding around board so moves don't wrap. Get king locations while looping. */\nfunction engine_squares(squares) {\n    let engine_squares = Array(120).fill(null);\n    let count = 0;\n    let index = 0;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y < 10; y++) {\n            /*if boundary square*/\n            index = i * 10 + y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                engine_squares[index] = 'boundary';\n            }\n            else {\n                engine_squares[index] = squares[count];\n                count = count + 1;\n            }\n        }\n    }\n    return engine_squares\n}\n/* Turn padded board back into 64 Square board */\nfunction normal_squares(engine_squares) {\n    let squares = Array(64).fill(null);\n    let count = 0;\n    let index = 0;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y < 10; y++) {\n            /*if boundary square*/\n            index = i * 10 + y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                //do nothing\n            }\n            else {\n                squares[count] = engine_squares[index];\n                count = count + 1;\n            }\n        }\n    }\n    return squares;\n}\n\nfunction get_king_locations(squares) {\n    /*White King Location & Black King location*/\n    let wk_location = null;\n    let bk_location = null;\n\n    for (var k = 0; k < squares.length; k++) {\n        let current_square = squares[k];\n        if (current_square !== null && current_square !== 'boundary') {\n            if (current_square.name === 'King') {\n                if (current_square.player === 'white') {\n                    wk_location = k;\n                }\n                else {\n                    bk_location = k;\n                }\n            }\n        }\n    }\n    let king_locations = [wk_location, bk_location]\n    return king_locations;\n}\n\nfunction inverse_coordinate_change(sq120) {\n    let sq64 = sq120 - 17 - Math.floor(sq120/10)*2\n    return sq64\n}\n\nfunction coordinate_change(sq64) {\n    let sq120 = sq64 + 21 + Math.floor(sq64/8)*2\n    return sq120\n}\n\nfunction set_pawn_states(position) {\n    let squares = position.squares;\n    for (var x = 0; x < squares.length; x++) {\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\n            let piece = squares[x];\n            if (piece.name === 'Pawn'){\n                if (piece.player === 'white') {\n                    if (x < 81) {\n                        piece.has_moved = true;\n                    }\n                }\n                else{\n                    if (x > 38) {\n                        piece.has_moved = true;\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*All evaluations with respect to white */\nfunction evaluate_material(squares) {\n    let sum_material = 0\n    for (var x = 0; x < squares.length; x ++) {\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\n            if (squares[x].player === 'white') {\n                sum_material = sum_material + piece_scores[squares[x].name];\n            }\n            else {\n                sum_material = sum_material - piece_scores[squares[x].name];\n            }\n        }\n    }\n\n    return (sum_material)\n}\n\nfunction initialize_board() {\n    var board = Array(64).fill(null)\n    for (var k = 0; k < 8; k++) {\n        board[k + 8] = new Pawn('black');\n        board[k + 48] = new Pawn('white');\n    };\n\n    var color = 'black';\n    for (var i = 0; i < 2; i++) {\n        if (i === 1) {\n            color = 'white'\n        }\n        board[i * 56] = new Rook(color);\n        board[i * 56 + 7] = new Rook(color);\n        board[i * 56 + 1] = new Knight(color);\n        board[i * 56 + 6] = new Knight(color);\n        board[i * 56 + 2] = new Bishop(color);\n        board[i * 56 + 5] = new Bishop(color);\n        board[i * 56 + 3] = new Queen(color);\n        board[i * 56 + 4] = new King(color);\n    }\n    return board\n}\n\nfunction initialize_engine_board() {\n    let board = initialize_board();\n    let engine_board = engine_squares(board);\n    return engine_board\n}\n\nexport {ParseFen, coordinate_change, inverse_coordinate_change, get_king_locations, normal_squares, engine_squares, evaluate_material, initialize_board, initialize_engine_board}\n","import { legal_moves } from './EngineMoves';\nimport { make_move } from './Game';\n\nvar INFINITY = 10000;\nvar CHECKMATE = 9000;\n\nvar start_time = null;\n//var best_moves = {};\nvar time_limit = null;\nvar depth_searched = null;\nvar time_cutoff = false;\n\nfunction set_variables(max_time) {\n    start_time = performance.now();\n    //best_moves = {};\n    time_limit = max_time;\n    depth_searched = 0;\n    time_cutoff = false;\n}\n\nfunction alphabeta(position, depth, alpha, beta) {\n    if (depth === 0) {\n        return { value: position.material_balance, move: null};\n    }\n    let moves = legal_moves(position);\n    //Checkmate\n    if (moves.length === 0) {\n        if (position.player === 'white') {\n            return {value: -CHECKMATE, move: null};\n        }\n        else {\n            return {value: CHECKMATE, move: null};\n        }\n    }\n    if (time_cutoff) {\n        return {value: 0, move: null};\n    }\n\n    if (position.player === 'white') {\n        let value = -INFINITY;\n        let top_move = null;\n        for (var x = 0; x < moves.length; x ++) {\n            let current_move = moves[x];\n            let current_position = make_move(position, current_move);\n            value = Math.max(value, alphabeta(current_position, depth - 1, alpha, beta).value);\n            if (value > alpha) {\n                alpha = value;\n                //best_moves[] = best_moves[depth].concat(current_move);\n                top_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        if ((performance.now() - start_time) >= time_limit ) {\n            time_cutoff = true;\n            return {value:0,move:null};\n        }\n        return {value: value, move:top_move};\n    }\n    else {\n        let value = INFINITY;\n        let top_move = null;\n        for (var k = 0; k < moves.length; k ++) {\n            let current_move = moves[k];\n            let current_position = make_move(position, current_move);\n            value = Math.min(value, alphabeta(current_position, depth - 1, alpha, beta).value);\n            if (value < beta) {\n                beta = value;\n                //best_moves[depth] = best_moves[depth].concat(current_move);\n                top_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        if ((performance.now() - start_time) >= time_limit ) {\n            time_cutoff = true;\n            return {value:0,move:null};\n\n        }\n        return {value: value, move: top_move};\n    }\n}\n\n/*Give Max Depth and max search time*/\nfunction alphabeta_search(position, max_depth, max_time) {\n    set_variables(max_time);\n    let value_move = {value: 0, move: null};\n    for (var depth = 1; depth <= max_depth; depth++) {\n        let search_move = alphabeta(position,depth,-INFINITY, INFINITY);\n\n        if (search_move.move !== null) {\n            value_move = search_move\n            depth_searched = depth\n        }\n    }\n    console.log(\"depth searched:\", depth_searched)\n    return value_move;\n}\n\n/* Breadth First Search.*/\nfunction breadth_search(depth, positions) {\n    if (depth === 0) {\n        return positions;\n    }\n    else {\n        let new_positions = [];\n        for (var j = 0; j < positions.length; j++) {\n            let current_position = positions[j];\n            let moves = legal_moves(current_position);\n\n            for (var i = 0; i < moves.length; i++) {\n                let current_move = moves[i];\n                let next_position = make_move(current_position, current_move)\n                new_positions.push(next_position);\n            }\n        }\n        return breadth_search(depth - 1, new_positions);\n    }\n}\n\nexport {alphabeta_search, alphabeta, breadth_search}","import { Game } from './Game';\nimport { initialize_engine_board } from './BoardFunctions';\nimport { legal_moves } from './EngineMoves';\nimport { make_move, Position } from './Game';\nimport { is_attacked } from './EngineMoves'\n\nvar INFINITY = 10000;\nvar CHECKMATE = 9000;\nvar best_weights = { Pawn: 0, Knight: 0, Bishop: 0, Rook: 0, Queen: 0, King: 0};\nvar genetic_weights = null;\nvar learn_rate = 1;\n\nfunction train() {\n    let initial_position = new Position('white', initialize_engine_board(), [95, 25], [1, 1, 1, 1], 0);\n    evolve_weights();\n    let num_games = 50;\n    let net_score = 0;\n    learn_rate = 1; \n\n    for (var k = 0; k < num_games; k++) {\n        /*Initialize Chess game and make two random moves to introduce variation*/\n        let chess_game = new Game(initial_position, [initial_position], []);\n        let moves = legal_moves(chess_game.position);\n        let move = moves[Math.floor(Math.random() * moves.length)];\n        chess_game.make_move(move);\n        moves = legal_moves(chess_game.position);\n        move = moves[Math.floor(Math.random() * moves.length)];\n        chess_game.make_move(move);\n\n        let game_result = play_game(chess_game)\n        net_score = net_score + game_result.result;\n    }\n    console.log(net_score, best_weights, genetic_weights);\n    if (net_score > 3) {\n        learn_rate = learn_rate / 2;\n        best_weights = genetic_weights\n        evolve_weights();\n    }\n}\n\nfunction evolve_weights() {\n    let new_weights = {};\n    /* add noise to best_weights */\n    let max = 0; \n    for (var key in best_weights) {\n        new_weights[key] = best_weights[key] + (Math.random()-0.5) * learn_rate;\n        if (Math.abs(new_weights[key]) > max) {\n            max = Math.abs(new_weights[key])\n        }\n    }\n    /*Normalize new Weights*/\n    for (key in new_weights) {\n        new_weights[key] = new_weights[key] / max;\n    }\n    genetic_weights = new_weights;\n}\n\nfunction play_game(chess_game) {\n    let alphabeta_result = null;\n    let score = 0; \n    let result = 0;\n    while (chess_game.history.length < 100) {\n        if (chess_game.position.player === 'white') {\n            alphabeta_result = alphabeta(chess_game.position, 1, -INFINITY, INFINITY, 'base');\n        }\n        else {\n            alphabeta_result = alphabeta(chess_game.position, 1, -INFINITY, INFINITY, 'genetic');\n        }\n        score = alphabeta_result.value\n        let move = alphabeta_result.move\n        if (Math.abs(score) < 1000) {\n            chess_game.make_move(move);\n        }\n        else {\n            break;\n        }\n    }\n    if (score === 9000) {\n        result = -1\n    }\n    else if (score === -9000) {\n        result = 1;\n    }\n    return { result: result, weights: genetic_weights };\n}\n\nfunction genetic_evaluation(position) {\n    let squares = position.squares;\n    let score = 0;\n    for (var x = 0; x < squares.length; x++) {\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\n            let piece = squares[x];\n            if (piece.player === 'white') {\n                score = score + genetic_weights[piece.name];\n            }\n            else {\n                score = score - genetic_weights[piece.name];\n            }\n        }\n    }\n    return score;\n}\n\nfunction base_evaluation(position) {\n    let squares = position.squares;\n    let score = 0;\n    for (var x = 0; x < squares.length; x++) {\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\n            let piece = squares[x];\n            if (piece.player === 'white') {\n                score = score + best_weights[piece.name];\n            }\n            else {\n                score = score - best_weights[piece.name];\n            }\n        }\n    }\n    return score;\n}\n\nfunction alphabeta(position, depth, alpha, beta, evaluation) {\n    if (depth === 0) {\n        if (evaluation === 'genetic') {\n            return { value: genetic_evaluation(position), move: null };\n        }\n        else {\n            return { value: base_evaluation(position), move: null };\n        }\n    }\n    let moves = legal_moves(position);\n    //Checkmate Stalemate\n    if (moves.length === 0) {\n        let in_check = false;\n        if (!in_check) {\n            return { value: 0, move: null };\n        }\n        else if (position.player === 'white') {\n            in_check = is_attacked(position.squares, position.king_locations[0], position.player)[0];\n            return { value: -CHECKMATE, move: null };\n        }\n        else {\n            in_check = is_attacked(position.squares, position.king_locations[1], position.player)[0];\n            return { value: CHECKMATE, move: null };\n        }\n    }\n    if (position.player === 'white') {\n        let value = -INFINITY;\n        let top_move = null;\n        for (var x = 0; x < moves.length; x++) {\n            let current_move = moves[x];\n            let current_position = make_move(position, current_move);\n            value = Math.max(value, alphabeta(current_position, depth - 1, alpha, beta, evaluation).value);\n            if (value > alpha) {\n                alpha = value;\n                top_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        return { value: value, move: top_move };\n    }\n    else {\n        let value = INFINITY;\n        let top_move = null;\n        for (var k = 0; k < moves.length; k++) {\n            let current_move = moves[k];\n            let current_position = make_move(position, current_move);\n            value = Math.min(value, alphabeta(current_position, depth - 1, alpha, beta, evaluation).value);\n            if (value < beta) {\n                beta = value;\n                top_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        return { value: value, move: top_move };\n    }\n}\n\nexport {play_game, train}","import React, { Component } from 'react';\nimport './App.css';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport ReactPiece from './DragPiece';\nimport DropSquare from './DropSquare';\nimport { Knight, Bishop, Rook, Queen} from './Pieces';\nimport { legal_moves, is_legal} from './EngineMoves';\nimport {normal_squares,coordinate_change, ParseFen, initialize_engine_board} from './BoardFunctions';\nimport { make_move, Position, create_move, Game} from './Game';\nimport { alphabeta_search} from './Search';\n//import { game_test, perft_test } from './Tests';\nimport { train } from './Evaluation.js';\n\nclass Chess extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{ position: new Position('white', initialize_engine_board(), [95, 25], [1, 1, 1, 1], 0) }],\n      drag_end: null,\n      promotion:{class:'hidden',start: null, end: null, player: null},\n      status:null,\n      click_start: null\n    }\n  }\n  train() {\n    const history = this.state.history.slice();\n    const position = history[history.length - 1].position;\n\n    //perft_test(position,4);\n    \n    let chess_game = new Game(position, history);\n    train(chess_game);\n    \n\n  };\n\n  reset() {\n    this.setState({\n      history: [{ position: new Position('white', initialize_engine_board(), [95, 25], [1, 1, 1, 1], 0)}],\n      drag_end: null,\n      promotion:{class:'hidden',start: null, end: null, player: null},\n      status:null\n    });\n  }\n  back() {\n    const history = this.state.history.slice();\n    if (history.length === 1) {\n      return;\n    }\n    history.pop();\n\n    this.setState({\n      history: history,\n      status:null\n    });\n    }\n\n  setup_fen(value) {\n      let position = ParseFen(value);\n      if (position !== 'FEN Error') {\n          this.setState({\n              history: [{ position: position }],\n              drag_end: null,\n              promotion: { class: 'hidden', start: null, end: null, player: null },\n              status: null\n          });\n      }\n      else {\n          alert('FEN ERROR');\n      }\n  }\n\n  engine_move() {\n    const history = this.state.history.slice();\n    const position = history[history.length - 1].position;\n    //Time in milliseconds\n    let search_time = 1000;\n    let engine_move = alphabeta_search(position,10,search_time);\n    //console.log(engine_move.value)\n\n    if (engine_move.move === null) {\n        this.setState({\n            status: 'Game Over',\n        });\n        return;\n    }\n\n    let new_position = make_move(position, engine_move.move);\n    this.setState({\n        history: history.concat([{position: new_position}]),\n    })\n  }\n\n  handle_drop(id) {\n    this.setState({drag_end: id});\n  }\n\n  handle_click_start(id) {\n    let start_square = coordinate_change(id);\n    this.setState({click_start: start_square});\n  }\n\n  handle_click_end(id) {\n    const history = this.state.history.slice();\n    const position = history[history.length - 1].position;\n    const click_start = this.state.click_start;\n\n    let piece = position.squares[click_start];\n    let click_end = coordinate_change(id);\n\n    if ((click_end <= 28 || click_end >= 91) && piece.name === 'Pawn'){\n      let promotion = {class:'promotion_container',start: click_start, end: click_end, player: position.player}\n      this.setState({promotion:promotion})\n      return;\n    }\n    else {\n      this.change_states(history, position, click_start, click_end, null);\n    }\n  }\n\n  handle_drag_end(id) {\n    const history = this.state.history.slice();\n    const position = history[history.length - 1].position;\n\n    let drag_start = coordinate_change(id);\n    let drag_end = coordinate_change(this.state.drag_end);\n    let piece = position.squares[drag_start];\n    /* promotions */\n    if ((drag_end <= 28 || drag_end >= 91) && piece.name === 'Pawn'){\n      let promotion = {class:'promotion_container',start: drag_start, end: drag_end, player: position.player}\n      this.setState({promotion:promotion})\n      return;\n    }\n    this.change_states(history, position, drag_start, drag_end, null);\n  };\n\n  handle_promotion(piece) {\n    const history = this.state.history.slice();\n    const position = history[history.length - 1].position;\n    const promotion = this.state.promotion;\n\n    let start = promotion['start'];\n    let end = promotion['end'];\n\n    this.change_states(history, position, start, end, piece)\n\n    this.setState({\n      promotion:{class:'hidden',start: null, end: null, player: null}\n    });\n  }\n\n  change_states(history, position, start, end, promotion_piece) {\n      let possible_moves = legal_moves(position);\n      let move = create_move(start, end, position, promotion_piece);\n      let status = null;\n      if (is_legal(move, possible_moves)) {\n        let new_position = make_move(position, move);\n        let new_moves = legal_moves(new_position);\n    \n        if (new_moves.length === 0) {\n            status = 'Game Over'\n        }\n        setTimeout( () => {\n          this.setState({\n            history: history.concat([{position: new_position}]),\n            drag_end: null,\n            status: status,\n          })\n        }, 10);\n        if (new_position.player === 'black') {\n          setTimeout(this.engine_move.bind(this), 50);\n        }\n    }\n  }\n\n    render() {\n    let history= this.state.history;\n    let current_position = history[history.length - 1].position\n    let current_squares = normal_squares(current_position.squares);\n    let player = current_position.player;\n    let promotion_class = this.state.promotion['class'];\n    //let status = this.state.status;\n\n    return (\n    <div className = 'game_container'>\n      <Buttons \n      back = {() => this.back()}\n      reset = {() => this.reset()}\n      engine_move = {() => this.engine_move()}\n      train = {() => this.train()}\n      />\n      <div className = 'board_container' >\n        <Board \n          squares = {current_squares}\n          onDrop = {(id) => this.drop(id)}\n          player = {player}\n          handle_drop={(id) => this.handle_drop(id)}\n          handle_drag_end = {(id) => this.handle_drag_end(id)}\n          handle_click_start = {(id) => this.handle_click_start(id)}\n          handle_click_end = {(id) => this.handle_click_end(id)}\n        />\n      </div>\n      <FenPosition\n      setup_fen={(value) => this.setup_fen(value)}\n      />\n      <Promotion\n        className = {promotion_class}\n        player = {player}\n        handle_promotion = {(piece) => this.handle_promotion(piece)}\n      />\n    </div>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  renderSquares() {\n    var html_board = [];\n    var color = false;\n    for (var i = 0; i < 8; i ++){\n    color = !color;\n    var html_row = [];\n      for (var k = 0; k < 8; k ++){\n        let id = i*8 + k\n        let current_square = <Square \n          value={this.props.squares[id]} \n          key={id} \n          color={color} \n          player = {this.props.player}\n          id = {id}\n          handle_drop={() => this.props.handle_drop(id)}\n          handle_drag_end = {(id) => this.props.handle_drag_end(id)}\n          handle_click_start = {() => this.props.handle_click_start(id)}\n          handle_click_end = {() => this.props.handle_click_end(id)}\n        />;\n        html_row.push(current_square);\n        color = !color\n      }\n      html_row = <div className = \"board_row\" key = {i}> {html_row} </div>\n      html_board.push(html_row)\n    }\n    return html_board\n  }\n  render() {\n  return (\n    <div>\n    {this.renderSquares()}\n    </div>\n  );\n  }\n}\n\nclass Square extends React.Component {\n    renderSquare(color) {\n        var class_name = \"dark square\"\n        var style = null;\n        var url = null;\n        var player = null;\n\n        if (color) {\n            class_name = \"light square\"\n        }\n        if (this.props.value) {\n            style = this.props.value.style;\n            url = this.props.value.url;\n            player = this.props.value.player;\n        }\n        if (this.props.player === player) {\n          return (\n          <div className={class_name}>\n            <ReactPiece \n              url={url} \n              id = {this.props.id}\n              handle_drag_end = {(id) => this.props.handle_drag_end(id)}\n              handle_click_start = {() => this.props.handle_click_start()}\n            /> \n          </div> );\n        }\n        else {\n            return (\n            <DropSquare \n              class_name={class_name} \n              style={style} \n              handle_drop={() => this.props.handle_drop()}\n              handle_click_end = {() => this.props.handle_click_end()}\n            /> );\n        }\n    }\n\n  render() {\n    var color = this.props.color;\n    return (\n    <React.Fragment>\n      {this.renderSquare(color)}\n    </React.Fragment>\n    );\n  }\n}\n\nfunction Buttons(props) {\n  return (\n   <div className = 'button_container'>\n      <button \n      className = \"button_element\" \n      onClick={() => props.reset()} > Reset\n      </button>\n      <button \n      className = \"button_element\"  \n      onClick={() => props.back()} > Back \n      </button>\n      <button \n      className = \"button_element\" \n      onClick={() => props.engine_move()} > Engine Move\n      </button>\n    </div>\n  );\n} \n\nclass FenPosition extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: '' };\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    submit(event) {\n        event.preventDefault();\n        this.props.setup_fen(this.state.value);\n    }\n\n    render() {\n    return (\n        <form onSubmit={(event) => this.submit(event)} className='fen_input'>\n            <label>\n                FEN String: &nbsp;\n              <input type=\"text\" className = 'input_box' value={this.state.value} onChange={(event) => this.handleChange(event)} />\n            </label>\n            <input type=\"submit\" className = 'input_button' value=\"Set Position\" />\n        </form>\n    );\n    }\n\n}\n\nclass Promotion extends React.Component {\n  render(){\n    let knight_piece = new Knight(this.props.player);\n    let bishop_piece = new Bishop(this.props.player);\n    let rook_piece = new Rook(this.props.player);\n    let queen_piece = new Queen(this.props.player);\n\n    return (\n      <div className = {this.props.className}>\n        <div className=\"promotion\">\n            <button className = {\"promotion_button\"} style = {knight_piece.style} onClick={() => this.props.handle_promotion(knight_piece)}></button>\n            <button className = {\"promotion_button\"} style = {bishop_piece.style} onClick={() => this.props.handle_promotion(bishop_piece)}></button>\n            <button className = {\"promotion_button\"} style = {rook_piece.style} onClick={() => this.props.handle_promotion(rook_piece)}></button>\n            <button className = {\"promotion_button\"} style = {queen_piece.style} onClick={() => this.props.handle_promotion(queen_piece)}></button>\n        </div>\n      </div>\n    );\n  }\n} \n\n\nexport default DragDropContext(HTML5Backend)(Chess);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}