{"version":3,"sources":["Constants.js","DragPiece.js","DropSquare.js","Pieces.js","Game.js","EngineMoves.js","BoardFunctions.js","Search.js","Evaluation.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","ReactPiece","_this","this","img","Image","src","props","url","onload","connectDragPreview","_this$props","connectDragSource","isDragging","react_default","a","createElement","className","alt","style","opacity","cursor","React","Component","DragSource","beginDrag","id","endDrag","monitor","component","didDrop","item","getItem","handle_drag_end","connect","dragSource","dragPreview","DropSquare","class_name","connectDropTarget","DropTarget","drop","handle_drop","dropTarget","isOver","Piece","player","img_url","name","Object","classCallCheck","backgroundImage","has_moved","Pawn","possibleConstructorReturn","getPrototypeOf","call","just_moved_two","Rook","Knight","Bishop","Queen","King","piece_scores","Game","position","history","moves","legal_moves","move","slice","new_position","make_move","concat","Position","squares","king_locations","castle_state","material_balance","en_passant_square","Move","start","end","en_passant","rook_start","rook_end","promotion_piece","en_passant_capture","piece","JSON","parse","stringify","Math","abs","rook","king_location","pinned_pieces","get_pinned_pieces","en_passant_pins","en_passant_location","forward","special_squares","pinned_en_passant","_king_check_squares","attacking_pieces","checked_squares","up_right","right","up_left","left","pawn_moves","knight_moves","get_knight_moves","diag_directions","straight_directions","i","length","_attacked_squares","attacked_squares","_attacked_squares2","slicedToArray","attack_squares","attack_piece","push","_attacked_squares3","_attacked_squares4","end_piece","king_check_squares","_king_check_squares2","in_check","king_moves","bishop_moves","rook_moves","current_move","includes","splice","in_check_handler","location","pawn","forward_one","forward_two","left_one","right_one","diag_left","diag_right","create_pawn_move","bishop","pin_direction","inverse_direction","toString","moves_and_captures","king_squares","get_king_moves","is_attacked","white_king_start","castle","white_kingside_rook","white_queenside_rook","black_king_start","black_kingside_rook","black_queenside_rook","direction_is_attacked","move_direction","start_location","piece_types","end_location","direction","attacking_piece","square_location","pin_info","pinned_directions","x","get_pinned_piece","pin_location","pinned_piece","pawn_location","pawn_end_location","is_en_passant","pieces","k","promote","back","king_start","king_end","captured_location","directions","y","down_right","down_left","up","down","move_right","move_left","distance","ParseFen","fen","Array","fill","rank","file","count","fenCnt","charCodeAt","coordinate_change","wk_location","bk_location","current_square","get_king_locations","engine_squares","sum_material","evaluate_material","set_pawn_states","index","location64","initialize_engine_board","board","color","initialize_board","INFINITY","CHECKMATE","start_time","time_limit","depth_searched","time_cutoff","alphabeta","depth","alpha","beta","value","top_move","current_position","max","performance","now","min","alphabeta_search","max_depth","max_time","set_variables","value_move","search_move","console","log","best_weights","genetic_weights","learn_rate","evolve_weights","new_weights","key","random","play_game","chess_game","alphabeta_result","score","result","weights","evaluation","genetic_evaluation","base_evaluation","Chess","state","drag_end","promotion","class","status","initial_position","net_score","floor","train","setState","pop","alert","engine_move","engine_turn","drag_start","change_states","possible_moves","create_move","is_legal","_this2","current_squares","normal_squares","promotion_class","Buttons","reset","App_Board","onDrop","App_FenPosition","setup_fen","App_Promotion","handle_promotion","Board","_this3","html_board","html_row","_loop","App_Square","renderSquares","Square","_this4","DragPiece","src_DropSquare","Fragment","renderSquare","onClick","FenPosition","_this5","event","target","preventDefault","_this6","onSubmit","submit","type","onChange","handleChange","Promotion","_this7","knight_piece","bishop_piece","rook_piece","queen_piece","DragDropContext","HTML5Backend","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79db2b52.chunk.js","sourcesContent":["export const ItemTypes = {\r\n  PIECE: 'piece'\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ItemTypes } from './Constants';\r\nimport { DragSource } from 'react-dnd';\r\nimport './App.css';\r\n\r\nconst pieceSource = {\r\n  beginDrag(props) {\r\n    const item = { id: props.id };\r\n    return item;\r\n  },\r\n  endDrag(props, monitor, component) {\r\n    if (!monitor.didDrop()) {\r\n      //Decided not to move piece maybe\r\n      return;\r\n    }\r\n    const item = monitor.getItem();\r\n    return props.handle_drag_end(item.id);\r\n  }\r\n};\r\n\r\nfunction collect(connect, monitor) {\r\n    return {\r\n        connectDragSource: connect.dragSource(),\r\n        connectDragPreview: connect.dragPreview(),\r\n        isDragging: monitor.isDragging()\r\n    };\r\n}\r\n\r\nclass ReactPiece extends React.Component {\r\n  componentDidMount() {\r\n    const img = new Image(46, 46);\r\n    img.src = this.props.url;\r\n    img.onload = () => this.props.connectDragPreview(img);\r\n  }\r\n\r\n  render() {\r\n    var url = this.props.url\r\n    const { connectDragSource, isDragging } = this.props;\r\n    return connectDragSource(\r\n    <div className = \"piece_container\">\r\n      <img src={url} alt ='' className = \"react_piece\" style={{\r\n        opacity: 1,\r\n        cursor: isDragging ? 'grabbing' : 'grab'\r\n      }}>\r\n      </img>\r\n    </div>\r\n    );\r\n  }\r\n  }\r\n\r\nReactPiece.propTypes = {\r\n  connectDragSource: PropTypes.func.isRequired,\r\n  isDragging: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default DragSource(ItemTypes.PIECE, pieceSource, collect)(ReactPiece);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { ItemTypes } from './Constants';\r\nimport { DropTarget } from 'react-dnd';\r\nimport './App.css';\r\n\r\nconst squareTarget = {\r\n    drop(props) {\r\n      return props.handle_drop();\r\n    }\r\n};\r\n\r\nfunction collect(connect, monitor) {\r\n    return {\r\n      connectDropTarget: connect.dropTarget(),\r\n      isOver: monitor.isOver()\r\n    };\r\n}\r\n\r\nclass DropSquare extends React.Component {\r\n    render() {\r\n        var style = this.props.style;\r\n        var class_name = this.props.class_name;\r\n        const connectDropTarget = this.props.connectDropTarget;\r\n        return connectDropTarget(\r\n            <div className={class_name} style={style}> </div>\r\n        )\r\n    }\r\n}\r\n  \r\n\r\nexport default DropTarget(ItemTypes.PIECE, squareTarget, collect)(DropSquare);","\r\nclass Piece {\r\n  constructor(player, img_url, name){\r\n    this.player = player;\r\n    this.style = {backgroundImage: \"url('\"+img_url+\"')\"};\r\n    this.name = name;\r\n    this.url = img_url;\r\n    this.has_moved = false;\r\n  }\r\n}\r\n\r\nclass Pawn extends Piece {\r\n  constructor(player){\r\n    var url='https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg'\r\n    if (player === 'black') {\r\n        url = 'https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg'\r\n    }\r\n    super(player, url, 'Pawn');\r\n    this.just_moved_two = false;\r\n  }\r\n}\r\n\r\nclass Rook extends Piece {\r\n    constructor(player) {\r\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg'\r\n        if (player === 'black') {\r\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg'\r\n        }\r\n        super(player, url, 'Rook');\r\n    }\r\n}\r\n\r\nclass Knight extends Piece {\r\n    constructor(player) {\r\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg'\r\n        if (player === 'black') {\r\n            url = 'https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg'\r\n        }\r\n        super(player, url, 'Knight')\r\n    }\r\n}\r\n\r\nclass Bishop extends Piece {\r\n    constructor(player) {\r\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg'\r\n        if (player === 'black') {\r\n            url = 'https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg'\r\n        }\r\n        super(player, url, 'Bishop')\r\n    }\r\n}\r\n\r\nclass Queen extends Piece {\r\n    constructor(player) {\r\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg'\r\n        if (player === 'black') {\r\n            url = 'https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg'\r\n        }\r\n        super(player, url, 'Queen')\r\n    }\r\n}\r\n\r\nclass King extends Piece {\r\n    constructor(player) {\r\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg'\r\n        if (player === 'black') {\r\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg'\r\n        }\r\n        super(player, url, 'King')\r\n    }\r\n}\r\n\r\n\r\n\r\nexport {Pawn,Rook,Knight,Bishop,King,Queen}","import { legal_moves } from \"./EngineMoves\";\r\n\r\n\r\nvar piece_scores = { Pawn: 1, Knight: 3, Bishop: 3.3, Rook: 5, Queen: 9.5, King: 0 };\r\n\r\nclass Game {\r\n    constructor(position, history, moves) {\r\n        this.position = position;\r\n        this.history = history;\r\n        this.moves = moves; \r\n    }\r\n    moves() {\r\n        return legal_moves(this.position);\r\n    }\r\n    make_move(move) {\r\n        const history = this.history.slice();\r\n        const moves = this.moves.slice();\r\n        let new_position = make_move(this.position, move);\r\n        this.position = new_position;\r\n        this.history = history.concat(new_position);\r\n        this.moves = moves.concat(move);\r\n    }\r\n}\r\n\r\n/* king locations = [white king, black king]\r\n * castle_state = [white kingside, white queenside, black kingside, black queenside] 1 for can castle 0 for cannot castle */\r\nclass Position {\r\n    constructor(player, squares, king_locations, castle_state, material_balance, en_passant_square) {\r\n        this.player = player;\r\n        this.squares = squares;\r\n        this.king_locations = king_locations;\r\n        this.castle_state = castle_state;\r\n        this.material_balance = material_balance;\r\n        this.en_passant_square = en_passant_square;\r\n    }\r\n}\r\n\r\nclass Move {\r\n    constructor(start,end, en_passant, rook_start, rook_end, promotion_piece) {\r\n        this.start = start;\r\n        this.end = end;\r\n        this.en_passant_capture = en_passant;\r\n        this.rook_start = rook_start;\r\n        this.rook_end = rook_end;\r\n        this.promotion_piece = promotion_piece;\r\n    }\r\n}\r\n\r\nfunction make_move(position, move) {\r\n\r\n    let start = move.start\r\n    let end = move.end\r\n\r\n    /*Starting Rook Locations */\r\n    let wk_rook = 98;\r\n    let wq_rook = 91;\r\n    let bk_rook = 28;\r\n    let bq_rook = 21;\r\n\r\n    let player = position.player;\r\n\r\n    let squares = position.squares.slice();\r\n    let piece = JSON.parse(JSON.stringify(squares[start]));\r\n    let king_locations = position.king_locations.slice();\r\n    let castle_state = position.castle_state.slice();\r\n    let material_balance = position.material_balance;\r\n    let en_passant_square = null;\r\n\r\n    if (move.en_passant_capture !== null) {\r\n        squares[move.en_passant_capture] = null;\r\n    }\r\n\r\n    /* Pawn Just Moved Two */\r\n    if (piece.name === 'Pawn' && Math.abs(start - end) === 20) {\r\n        en_passant_square = start + (end - start) / 2;\r\n    }\r\n\r\n    /*Castling move*/\r\n    if (move.rook_start !== null) {\r\n        let rook = JSON.parse(JSON.stringify(squares[move.rook_start]));\r\n        squares[move.rook_start] = null;\r\n        squares[move.rook_end] = rook;\r\n        rook.has_moved = true;\r\n    }\r\n    /*Change King Location and Castling states*/\r\n    if (piece.name === 'King') {\r\n        if (piece.player === 'white') {\r\n            king_locations[0] = end\r\n            castle_state[0] = 0;\r\n            castle_state[1] = 0;\r\n        }\r\n        else {\r\n            king_locations[1] = end\r\n            castle_state[2] = 0;\r\n            castle_state[3] = 0;\r\n        }\r\n    }\r\n    /* Change castling states for first rook moves */\r\n    if (piece.name === 'Rook' && !piece.has_moved) {\r\n        if (start === wk_rook) {\r\n            castle_state[0] = 0;\r\n        }\r\n        else if (start === wq_rook) {\r\n            castle_state[1] = 0;\r\n        }\r\n        else if (start === bk_rook) {\r\n            castle_state[2] = 0;\r\n        }\r\n        else if (start === bq_rook) {\r\n            castle_state[3] = 0;\r\n        }\r\n    }\r\n    /* Change castling states for rook captures */\r\n    if (squares[end] !== null && squares[end].name === 'Rook') {\r\n        if (end === wk_rook) {\r\n            castle_state[0] = 0;\r\n        }\r\n        else if (end === wq_rook) {\r\n            castle_state[1] = 0;\r\n        }\r\n        else if (end === bk_rook) {\r\n            castle_state[2] = 0;\r\n        }\r\n        else if (end === bq_rook) {\r\n            castle_state[3] = 0;\r\n        }\r\n    }\r\n    /*Change material Balance */\r\n    if (material_balance !== null && squares[end] !== null) {\r\n        if (position.player === 'white') {\r\n            material_balance = material_balance + piece_scores[squares[end].name];\r\n        }\r\n        else {\r\n            material_balance = material_balance - piece_scores[squares[end].name];\r\n        }\r\n    }\r\n\r\n    /*Promotion */\r\n    if (move.promotion_piece !== null) {\r\n        piece = move.promotion_piece;\r\n        if (piece.player === 'white') {\r\n            material_balance = material_balance + piece_scores[piece.name] - 1;\r\n        }\r\n        else {\r\n            material_balance = material_balance - piece_scores[piece.name] + 1;\r\n        }\r\n    }\r\n\r\n    squares[start] = null;\r\n    squares[end] = piece;\r\n    piece.has_moved = true;\r\n\r\n    (player === 'white') ? player = 'black' : player = 'white';\r\n\r\n    return new Position(player, squares, king_locations, castle_state, material_balance, en_passant_square);\r\n}\r\n\r\n/*This move creation function turns dragged moves from the UI into move objects */\r\nfunction create_move(start, end, position, promotion_piece) {\r\n    let squares = position.squares;\r\n    let piece = position.squares[start];\r\n    let en_passant = null;\r\n    let rook_start = null;\r\n    let rook_end = null;\r\n\r\n    /*For En passant*/\r\n    if (piece.name === 'Pawn') {\r\n        /* En Passant One way*/\r\n        if (Math.abs(start - end) === 9 && squares[end] === null) {\r\n            if (position.player === 'white') {\r\n                en_passant = start + 1;\r\n            }\r\n            else {\r\n                en_passant = start - 1;\r\n            }\r\n\r\n        }\r\n        else if (Math.abs(start - end) === 11 && squares[end] === null) {\r\n            if (position.player === 'white') {\r\n                en_passant = start - 1;\r\n            }\r\n            else {\r\n                en_passant = start + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (piece.name === 'King') {\r\n        /* kingside */\r\n        if ((end - start) === 2) {\r\n            rook_start = end + 1\r\n            rook_end = start + 1\r\n        }\r\n        else if ((start - end) === 2) {\r\n            rook_start = end - 2\r\n            rook_end = start - 1\r\n        }\r\n    }\r\n    return new Move(start, end, en_passant, rook_start, rook_end, promotion_piece)\r\n}\r\n\r\nexport {Move, Position, make_move, create_move, Game}","/********************************************** Legal Move Generation and Checking for Engine*************************************/\r\nimport { Knight, Bishop, Rook, Queen } from './Pieces.js';\r\nimport { Move } from './Game.js';\r\n\r\n/* Return all legal moves given a position */\r\nfunction legal_moves(position) {\r\n    let squares = position.squares;\r\n    let player = position.player;\r\n    let king_location = (player === 'white') ? position.king_locations[0] : position.king_locations[1];\r\n    let pinned_pieces = get_pinned_pieces(squares, king_location, player);\r\n    let en_passant_pins = null;\r\n    let castle_state = position.castle_state;\r\n    let en_passant_square = position.en_passant_square;\r\n\r\n    if (en_passant_square !== null) {\r\n        en_passant_pins = pinned_en_passant(squares,en_passant_square,king_location,player);\r\n    }\r\n\r\n    let [attacking_pieces, attacked_squares] = king_check_squares(squares, king_location, player);\r\n    let in_check = (attacking_pieces.length > 0) ? true : false;\r\n\r\n    /* Only King can move in double check */\r\n    if (attacking_pieces.length > 1) {\r\n        return king_moves(squares, king_location, player, castle_state);\r\n    }\r\n    var legal_moves = [];\r\n\r\n    for (var i = 0; i < 120; i++) {\r\n        /* Skip empty and boundary squares */\r\n        if (squares[i] !== null && squares[i] !== 'boundary') {\r\n            /* Check for piece color and send move generation to subfunctions*/\r\n            if (squares[i].player === player) {\r\n                if (squares[i].name === 'Pawn') {\r\n                    legal_moves = legal_moves.concat(pawn_moves(squares, i, player, pinned_pieces, en_passant_square, en_passant_pins));\r\n                }\r\n                else if (squares[i].name === 'Knight') {\r\n                    legal_moves = legal_moves.concat(knight_moves(squares, i, player, pinned_pieces));\r\n                }\r\n                else if (squares[i].name === 'Bishop') {\r\n                    legal_moves = legal_moves.concat(bishop_moves(squares, i, player, pinned_pieces));\r\n                }\r\n                else if (squares[i].name === 'Rook') {\r\n                    legal_moves = legal_moves.concat(rook_moves(squares, i, player, pinned_pieces));\r\n                }\r\n                else if (squares[i].name === 'Queen') {\r\n                    legal_moves = legal_moves.concat(rook_moves(squares, i, player, pinned_pieces));\r\n                    legal_moves = legal_moves.concat(bishop_moves(squares, i, player, pinned_pieces));\r\n                }\r\n                else if (squares[i].name === 'King') {\r\n                    legal_moves = legal_moves.concat(king_moves(squares, i, player, castle_state, in_check));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (attacking_pieces.length > 0) {\r\n        legal_moves = in_check_handler(legal_moves, king_location, attacked_squares);\r\n    }\r\n\r\n    return legal_moves;\r\n}\r\n\r\n\r\n/* Check if a given move is within the legal moves found */\r\nfunction is_legal(move, legal_moves) {\r\n    let is_legal = false;\r\n    for (var i = 0; i < legal_moves.length; i++) {\r\n        if (JSON.stringify(move) === JSON.stringify(legal_moves[i])) {\r\n            is_legal = true;\r\n        }\r\n    }\r\n    return is_legal;\r\n}\r\n\r\n/************************************************************ Piece Move Generation Functions ************************************************/\r\n\r\n/* Get legal moves for a pawn given a board position */\r\nfunction pawn_moves(squares, location, player, pinned_pieces, en_passant_square, en_passant_pins) {\r\n    let legal_moves = [];\r\n    let pawn = squares[location];\r\n\r\n    let forward_one = forward(1, location, player);\r\n    let forward_two = forward(2, location, player);\r\n    let left_one = left(1, location, player);\r\n    let right_one = right(1, location, player);\r\n    let diag_left = left(1, forward(1, location, player), player)\r\n    let diag_right = right(1, forward(1, location, player), player)\r\n\r\n    /*legal to move 2 spaces forward*/\r\n    if (!pawn.has_moved && squares[forward_two] === null && squares[forward_one] === null) {\r\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, forward_two, pinned_pieces, [0, 1], false, null, null));\r\n    }\r\n    /*legal to move 1 space ahead*/\r\n    if (squares[forward_one] === null) {\r\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, forward_one, pinned_pieces, [0, 1], false, null, null));\r\n    }\r\n    /*legal to take left*/\r\n    if (squares[diag_left] !== null && squares[diag_left] !== 'boundary') {\r\n        if (squares[diag_left].player !== player) {\r\n            legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_left, pinned_pieces, [-1, 1], false, null, null));\r\n        }\r\n    }\r\n    /*legal to take right*/\r\n    if (squares[diag_right] !== null && squares[diag_right] !== 'boundary') {\r\n        if (squares[diag_right].player !== player) {\r\n            legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_right, pinned_pieces, [1, 1], false, null, null));\r\n        }\r\n    }\r\n    /*legal to take en passant right*/\r\n    if (diag_right === en_passant_square) {\r\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_right, pinned_pieces, [1, 1], true, right_one, en_passant_pins));\r\n    }\r\n    /*legal to take en passant left*/\r\n    if (diag_left === en_passant_square) {\r\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_left, pinned_pieces, [-1, 1], true, left_one, en_passant_pins));\r\n    }\r\n\r\n    return legal_moves;\r\n}\r\n\r\n/* Get legal moves for a knight given a board position */\r\nfunction knight_moves(squares, location, player, pinned_pieces) {\r\n    let legal_moves = [];\r\n    /*Impossible to move pinned knight*/\r\n    if (location in pinned_pieces) {\r\n        return legal_moves;\r\n    }\r\n\r\n    let moves = get_knight_moves(location, player);\r\n\r\n    for (var i = 0; i < moves.length; i++) {\r\n        if (squares[moves[i]] === null && squares[moves[i]] !== 'boundary') {\r\n            legal_moves.push(make_move(location, moves[i]));\r\n        }\r\n        else if (squares[moves[i]].player !== player && squares[moves[i]] !== 'boundary') {\r\n            legal_moves.push(make_move(location, moves[i]));\r\n        }\r\n    }\r\n\r\n    return legal_moves;\r\n}\r\n\r\n/* Get legal moves for bishop given board position */\r\nfunction bishop_moves(squares, location, player, pinned_pieces) {\r\n    let legal_moves = [];\r\n    let bishop = squares[location];\r\n    let pin_direction = null;\r\n    let inverse_direction = null;\r\n\r\n    let moves = [[1, 1], [-1, 1], [1, -1], [-1, -1]]\r\n\r\n    for (var i = 0; i < moves.length; i++) {\r\n        if (location in pinned_pieces) {\r\n            pin_direction = pinned_pieces[location];\r\n            inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\r\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\r\n                legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, bishop));\r\n            }\r\n        }\r\n        else {\r\n            legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, bishop));\r\n        }\r\n    }\r\n    return legal_moves;\r\n}\r\n/* Get legal moves for a rook given a board position*/\r\nfunction rook_moves(squares, location, player, pinned_pieces) {\r\n    let legal_moves = [];\r\n    let rook = squares[location];\r\n    let pin_direction = null;\r\n    let inverse_direction = null;\r\n\r\n    let moves = [[0, 1], [0, -1], [-1, 0], [1, 0]]\r\n\r\n    for (var i = 0; i < moves.length; i++) {\r\n        if (location in pinned_pieces) {\r\n            pin_direction = pinned_pieces[location];\r\n            inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\r\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\r\n                legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, rook));\r\n            }\r\n        }\r\n        else {\r\n            legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, rook));\r\n        }\r\n    }\r\n    return legal_moves;\r\n}\r\n/* Get legal moves for a king given a board position */\r\nfunction king_moves(squares, location, player, castle_state, in_check) {\r\n    let legal_moves = [];\r\n\r\n    /* Take King off the board for calculating normal move attacking squares */\r\n    let king_squares = squares.slice();\r\n    king_squares[location] = null;\r\n\r\n    let moves = get_king_moves(location, player);\r\n\r\n    /* Regular Moves (non castling) */\r\n    for (var i = 0; i < moves.length; i++) {\r\n        /* Move to empty square */\r\n        if (squares[moves[i]] === null) {\r\n            if (!is_attacked(king_squares, moves[i], player)[0]) {\r\n                legal_moves.push(make_move(location, moves[i]));\r\n            }\r\n        }\r\n        /* Capture */\r\n        else if (squares[moves[i]] !== 'boundary' && squares[moves[i]].player !== player && !is_attacked(king_squares, moves[i], player)[0]) {\r\n            legal_moves.push(make_move(location, moves[i]));\r\n        }\r\n    }\r\n\r\n    /* Castling */\r\n    let white_kingside_rook = 98;\r\n    let white_queenside_rook = 91;\r\n    let black_kingside_rook = 28;\r\n    let black_queenside_rook = 21;\r\n    let white_king_start = 95;\r\n    let black_king_start = 25;\r\n\r\n\r\n    /* White Kingside */\r\n    if (!in_check) {\r\n        if (castle_state[0] === 1 && squares[white_king_start + 1] === null && squares[white_king_start + 2] === null) {\r\n            if (!is_attacked(squares, white_king_start + 1, player)[0] && !is_attacked(squares, white_king_start + 2, player)[0]) {\r\n                legal_moves.push(castle(white_king_start, white_king_start + 2, white_kingside_rook, white_kingside_rook - 2));\r\n            }\r\n        }\r\n        /* White Queenside */\r\n        if (castle_state[1] === 1 && squares[white_king_start - 1] === null && squares[white_king_start - 2] === null && squares[white_king_start - 3] === null) {\r\n            if (!is_attacked(squares, white_king_start - 1, player)[0] && !is_attacked(squares, white_king_start - 2, player)[0]) {\r\n                legal_moves.push(castle(white_king_start, white_king_start - 2, white_queenside_rook, white_queenside_rook + 3));\r\n            }\r\n        }\r\n        /* Black Kingside */\r\n        if (castle_state[2] === 1 && squares[black_king_start + 1] === null && squares[black_king_start + 2] === null) {\r\n            if (!is_attacked(squares, black_king_start + 1, player)[0] && !is_attacked(squares, black_king_start + 2, player)[0]) {\r\n                legal_moves.push(castle(black_king_start, black_king_start + 2, black_kingside_rook, black_kingside_rook - 2));\r\n            }\r\n        }\r\n        /* Black Queenside */\r\n        if (castle_state[3] === 1 && squares[black_king_start - 1] === null && squares[black_king_start - 2] === null && squares[black_king_start - 3] === null) {\r\n            if (!is_attacked(squares, black_king_start - 1, player)[0] && !is_attacked(squares, black_king_start - 2, player)[0]) {\r\n                legal_moves.push(castle(black_king_start, black_king_start - 2, black_queenside_rook, black_queenside_rook + 3));\r\n            }\r\n        }\r\n    }\r\n    return legal_moves;\r\n}\r\n\r\n/************************************************************* Pinned Pieces and King Checks *******************************************************************/\r\n\r\n/* Eliminate moves where king is still in check from originally checking piece.  Only for in check positions.*/\r\nfunction in_check_handler(legal_moves, king_location, attacked_squares) {\r\n    for (var i = legal_moves.length - 1; i >= 0; i--) {\r\n        let current_move = legal_moves[i];\r\n        /* If king was not moved out of check and the moved piece did not block the check or eliminate the checking piece than remove the move */\r\n        if (!attacked_squares.includes(current_move.end) && !attacked_squares.includes(current_move.en_passant_capture) && current_move.start !== king_location) {\r\n            legal_moves.splice(i, 1);\r\n        }\r\n    }\r\n    return legal_moves;\r\n}\r\n\r\n/* Check if square is under attack from a specified direction */\r\nfunction direction_is_attacked(squares, move_direction, start_location, player, piece_types) {\r\n    let end_location = direction(move_direction, start_location, player);\r\n    let attacking_piece = null;\r\n\r\n    while (squares[end_location] === null) {\r\n        end_location = direction(move_direction, end_location, player);\r\n    }\r\n    let end_piece = squares[end_location];\r\n    if (end_piece !== 'boundary' && end_piece.player !== player) {\r\n        for (var i = 0; i < piece_types.length; i++) {\r\n            if (piece_types[i] === end_piece.name) {\r\n                attacking_piece = [end_location, move_direction];\r\n            }\r\n        }\r\n    }\r\n    return attacking_piece;\r\n}\r\n/* king_check squares returns a set of squares which a player's piece must end up in to block the check or remove the checking piece */\r\nfunction king_check_squares(squares, king_location, player) {\r\n\r\n    let attacking_pieces = [];\r\n    let checked_squares = [];\r\n\r\n    let up_right = right(1, forward(1, king_location, player), player);\r\n    let up_left = left(1, forward(1, king_location, player), player);\r\n\r\n    let pawn_moves = [up_right, up_left];\r\n    let knight_moves = get_knight_moves(king_location, player);\r\n    let diag_directions = [[1, 1], [-1, 1], [1, -1], [-1, -1]];\r\n    let straight_directions = [[0, 1], [0, -1], [-1, 0], [1, 0]];\r\n\r\n    /* get bishop/queen attack squares */\r\n    for (var i = 0; i < diag_directions.length; i++) {\r\n        let [attack_squares, attack_piece] = attacked_squares(squares, diag_directions[i], king_location, player, ['Queen', 'Bishop']);\r\n        if (attack_piece !== null) {\r\n            checked_squares = checked_squares.concat(attack_squares);\r\n            attacking_pieces.push(attack_piece);\r\n        }\r\n    }\r\n    /* Check for rook/queen attacks */\r\n    for (i = 0; i < straight_directions.length; i++) {\r\n        let [attack_squares, attack_piece] = attacked_squares(squares, straight_directions[i], king_location, player, ['Queen', 'Rook']);\r\n        if (attack_piece !== null) {\r\n            checked_squares = checked_squares.concat(attack_squares);\r\n            attacking_pieces.push(attack_piece);\r\n        }\r\n    }\r\n\r\n    /* Check if square is under attack by knights*/\r\n    for (i = 0; i < knight_moves.length; i++) {\r\n        let end_piece = squares[knight_moves[i]];\r\n        if (end_piece !== 'boundary' && end_piece !== null) {\r\n            if (end_piece.player !== player && end_piece.name === 'Knight') {\r\n                checked_squares = checked_squares.concat([knight_moves[i]]);\r\n                attacking_pieces.push(end_piece);\r\n            }\r\n        }\r\n    }\r\n    /* Check if square is under attack by pawns*/\r\n    for (i = 0; i < pawn_moves.length; i++) {\r\n        let end_piece = squares[pawn_moves[i]];\r\n        if (end_piece !== 'boundary' && end_piece !== null) {\r\n            if (end_piece.player !== player && end_piece.name === 'Pawn') {\r\n                checked_squares = checked_squares.concat([pawn_moves[i]]);\r\n                attacking_pieces.push(end_piece);\r\n            }\r\n        }\r\n    }\r\n\r\n    return [attacking_pieces, checked_squares];\r\n}\r\n\r\n/* Return the squares that are under attack and the piece that is attacking*/\r\nfunction attacked_squares(squares, move_direction, start_location, player, piece_types) {\r\n    let end_location = direction(move_direction, start_location, player);\r\n    let attacked_squares = [end_location];\r\n\r\n    while (squares[end_location] === null) {\r\n        end_location = direction(move_direction, end_location, player);\r\n        attacked_squares.push(end_location);\r\n    }\r\n    let end_piece = squares[end_location];\r\n    if (end_piece !== 'boundary' && end_piece.player !== player) {\r\n        for (var i = 0; i < piece_types.length; i++) {\r\n            if (piece_types[i] === end_piece.name) {\r\n                attacked_squares.push(end_location);\r\n                return [attacked_squares, end_piece];\r\n            }\r\n        }\r\n    }\r\n    return [null, null];\r\n}\r\n\r\n/* Check if square is under attack by opposing pieces */\r\nfunction is_attacked(squares, square_location, player) {\r\n\r\n    let is_attacked = false;\r\n    let attacking_pieces = {};\r\n    let attacking_piece = null;\r\n\r\n    let up_right = right(1, forward(1, square_location, player), player);\r\n    let up_left = left(1, forward(1, square_location, player), player);\r\n\r\n    let pawn_moves = [up_right, up_left];\r\n    let knight_moves = get_knight_moves(square_location, player);\r\n    let king_moves = get_king_moves(square_location, player);\r\n    let diag_directions = [[1, 1], [-1, 1], [1, -1], [-1, -1]];\r\n    let straight_directions = [[0, 1], [0, -1], [-1, 0], [1, 0]];\r\n\r\n    /* check for bishop/queen attacks */\r\n    for (var i = 0; i < diag_directions.length; i++) {\r\n        attacking_piece = direction_is_attacked(squares, diag_directions[i], square_location, player, ['Queen', 'Bishop']);\r\n        if (attacking_piece !== null) {\r\n            is_attacked = true;\r\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\r\n        }\r\n    }\r\n    /* Check for rook/queen attacks */\r\n    for (i = 0; i < straight_directions.length; i++) {\r\n        attacking_piece = direction_is_attacked(squares, straight_directions[i], square_location, player, ['Queen', 'Rook']);\r\n        if (attacking_piece !== null) {\r\n            is_attacked = true;\r\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\r\n        }\r\n    }\r\n\r\n    /* Check if square is under attack by knights*/\r\n    for (i = 0; i < knight_moves.length; i++) {\r\n        let end_piece = squares[knight_moves[i]];\r\n        if (end_piece !== 'boundary' && end_piece !== null) {\r\n            if (end_piece.player !== player && end_piece.name === 'Knight') {\r\n                is_attacked = true;\r\n                attacking_pieces[knight_moves[i]] = 'knight_attack';\r\n            }\r\n        }\r\n    }\r\n    /* Check if square is under attack by pawns*/\r\n    for (i = 0; i < pawn_moves.length; i++) {\r\n        let end_piece = squares[pawn_moves[i]];\r\n        if (end_piece !== 'boundary' && end_piece !== null) {\r\n            if (end_piece.player !== player && end_piece.name === 'Pawn') {\r\n                is_attacked = true;\r\n                attacking_pieces[pawn_moves[i]] = 'pawn_attack';\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Check if square is under attack by king. */\r\n    for (i = 0; i < king_moves.length; i++) {\r\n        let end_piece = squares[king_moves[i]];\r\n        if (end_piece !== 'boundary' && end_piece !== null) {\r\n            if (end_piece.player !== player && end_piece.name === 'King') {\r\n                is_attacked = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return [is_attacked, attacking_pieces];\r\n}\r\n\r\n/* Get pieces which are pinned to the king */\r\nfunction get_pinned_pieces(squares, king_location, player) {\r\n    let pinned_pieces = {};\r\n    let pin_info = null;\r\n    let pinned_directions = [[0, 1], [0, -1], [-1, 0], [1, 0], [1, 1], [-1, 1], [1, -1], [-1, -1]];\r\n    let pin_direction = null;\r\n\r\n    for (var x = 0; x < pinned_directions.length; x++) {\r\n        pin_direction = pinned_directions[x];\r\n        if (pin_direction[0] === 0 || pin_direction[1] === 0) {\r\n            pin_info = get_pinned_piece(squares, pin_direction, king_location, player, ['Queen', 'Rook']);\r\n        }\r\n        else {\r\n            pin_info = get_pinned_piece(squares, pin_direction, king_location, player, ['Queen', 'Bishop']);\r\n        }\r\n        if (pin_info !== null) {\r\n            pinned_pieces[pin_info[0]] = pin_info[1];\r\n        }\r\n    }\r\n    return pinned_pieces;\r\n}\r\n/* Check for a pinned piece given an attacking direction towards the king */\r\nfunction get_pinned_piece(squares, pin_direction, king_location, player, piece_types) {\r\n    let pin_location = direction(pin_direction, king_location, player);\r\n    let pinned_piece = null;\r\n    /* Go until you run into a piece or boundary */\r\n    while (squares[pin_location] === null) {\r\n        pin_location = direction(pin_direction, pin_location, player);\r\n    }\r\n\r\n    /* If you run into same player piece, go until you run into the next piece or boundary */\r\n    if (squares[pin_location] !== 'boundary' && squares[pin_location].player === player) {\r\n        pinned_piece = pin_location;\r\n        pin_location = direction(pin_direction, pin_location, player);\r\n        while (squares[pin_location] === null) {\r\n            pin_location = direction(pin_direction, pin_location, player);\r\n        }\r\n        /* Check if piece on the other end is a piece type associated with a pin */\r\n        if (squares[pin_location] !== 'boundary' && squares[pin_location].player !== player) {\r\n            for (var i = 0; i < piece_types.length; i++) {\r\n                if (squares[pin_location].name === piece_types[i]) {\r\n                    return [pinned_piece, pin_direction];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction pinned_en_passant(squares,en_passant_square, king_location, player) {\r\n    let en_passant_location = forward(1,en_passant_square);\r\n    let special_squares = squares.slice();\r\n    special_squares[en_passant_location] = null;\r\n\r\n    return get_pinned_pieces(special_squares, king_location, player)\r\n}\r\n\r\n/****************************************************** Move Checking/Exploring and Board Navigating Helper Functions *********************************************************/\r\n\r\n/* Given a possible pawn move check if the move is legal and add the move */\r\nfunction create_pawn_move(pawn, pawn_location, pawn_end_location, pinned_pieces, move_direction, is_en_passant, en_passant_capture, en_passant_pins) {\r\n    let legal_moves = [];\r\n    let pin_direction = null;\r\n    let inverse_direction = null;\r\n\r\n    if (pawn_location in pinned_pieces) {\r\n        pin_direction = pinned_pieces[pawn_location];\r\n        inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\r\n\r\n        /* Can only move towards King or away from king when pinned */\r\n        if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\r\n            if (is_en_passant) {\r\n                legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\r\n            }\r\n            else {\r\n                legal_moves.push(make_move(pawn_location, pawn_end_location));\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (is_en_passant) {\r\n            if (pawn_location in en_passant_pins) {\r\n                pin_direction = en_passant_pins[pawn_location];\r\n                inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\r\n                if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\r\n                    legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\r\n                }\r\n            }\r\n            else {\r\n                legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\r\n            }\r\n        }\r\n        else {\r\n            /*Handle Promotions*/\r\n            if (pawn_end_location >= 91 || pawn_end_location <= 28) {\r\n                let knight_piece = new Knight(pawn.player);\r\n                let bishop_piece = new Bishop(pawn.player);\r\n                let rook_piece = new Rook(pawn.player);\r\n                let queen_piece = new Queen(pawn.player);\r\n\r\n                let pieces = [knight_piece, bishop_piece, rook_piece, queen_piece];\r\n\r\n                for (var k = 0; k < pieces.length; k++) {\r\n                    legal_moves.push(promote(pieces[k], pawn_location, pawn_end_location));\r\n                }\r\n            }\r\n            else {\r\n                legal_moves.push(make_move(pawn_location, pawn_end_location));\r\n            }\r\n        }\r\n    }\r\n    return legal_moves;\r\n}\r\n\r\n/* Get possible moves and captures for rooks, queens, and bishops (straight pieces) with respect to direction */\r\nfunction moves_and_captures(squares, move_direction, start_location, player, piece) {\r\n    let legal_moves = [];\r\n    let end_location = direction(move_direction, start_location, player);\r\n\r\n    while (squares[end_location] === null) {\r\n        legal_moves.push(make_move(start_location, end_location));\r\n        end_location = direction(move_direction, end_location, player);\r\n    }\r\n    if (squares[end_location] !== 'boundary' && squares[end_location].player !== player) {\r\n        legal_moves.push(make_move(start_location, end_location));\r\n    }\r\n    return legal_moves;\r\n}\r\n/* Get Knight move directions */\r\nfunction get_knight_moves(location, player) {\r\n\r\n    let up_right = right(1, forward(2, location, player), player);\r\n    let up_left = left(1, forward(2, location, player), player);\r\n    let down_right = right(1, back(2, location, player), player);\r\n    let down_left = left(1, back(2, location, player), player);\r\n    let right_up = right(2, forward(1, location, player), player);\r\n    let right_down = right(2, back(1, location, player), player);\r\n    let left_up = left(2, forward(1, location, player), player);\r\n    let left_down = left(2, back(1, location, player), player);\r\n\r\n    let moves = [up_right, up_left, down_right, down_left, right_up, right_down, left_up, left_down];\r\n    return moves;\r\n}\r\n/* Get King move directions */\r\nfunction get_king_moves(location, player) {\r\n\r\n    let up = forward(1, location, player);\r\n    let up_right = right(1, forward(1, location, player), player);\r\n    let up_left = left(1, forward(1, location, player), player);\r\n    let move_left = left(1, location, player);\r\n    let move_right = right(1, location, player);\r\n    let down_right = right(1, back(1, location, player), player);\r\n    let down_left = left(1, back(1, location, player), player);\r\n    let down = back(1, location, player);\r\n\r\n    let moves = [up, up_right, up_left, move_left, move_right, down_right, down_left, down];\r\n    return moves;\r\n}\r\n\r\n/* Standard move making.  Set start square to null and end square to piece value */\r\nfunction make_move(start, end) {\r\n\r\n    let move = new Move(start, end, null, null, null, null)\r\n    return move;\r\n}\r\n/* Function Promote */\r\nfunction promote(piece, start, end) {\r\n\r\n    let move = new Move(start, end, null, null, null, piece)\r\n    return move;\r\n}\r\n/* Castling Requires special move making */\r\nfunction castle(king_start, king_end, rook_start, rook_end) {\r\n    let move = new Move(king_start, king_end, null, rook_start, rook_end, null);\r\n    return move;\r\n}\r\n/* En Passant requires special move making */\r\nfunction en_passant(start, end, captured_location) {\r\n    let move = new Move(start, end, captured_location, null, null, null);\r\n    return move;\r\n}\r\n\r\n/* Abstact away difference between black and white moves. All from perspective of player. */\r\nfunction direction(directions, location, player) {\r\n    let x = directions[0];\r\n    let y = directions[1];\r\n\r\n    let up_right = right(1, forward(1, location, player), player);\r\n    let up_left = left(1, forward(1, location, player), player);\r\n    let down_right = right(1, back(1, location, player), player);\r\n    let down_left = left(1, back(1, location, player), player);\r\n    let up = forward(1, location, player);\r\n    let down = back(1, location, player);\r\n    let move_right = right(1, location, player);\r\n    let move_left = left(1, location, player);\r\n\r\n    if (x === 0 && y === 1) {\r\n        return up;\r\n    }\r\n    else if (x === -1 && y === 1) {\r\n        return up_left;\r\n    }\r\n    else if (x === 1 && y === 1) {\r\n        return up_right;\r\n    }\r\n    else if (x === 1 && y === 0) {\r\n        return move_right;\r\n    }\r\n    else if (x === -1 && y === 0) {\r\n        return move_left;\r\n    }\r\n    else if (x === 1 && y === -1) {\r\n        return down_right;\r\n    }\r\n    else if (x === -1 && y === -1) {\r\n        return down_left;\r\n    }\r\n    else if (x === 0 && y === -1) {\r\n        return down;\r\n    }\r\n}\r\n\r\nfunction forward(distance, location, player) {\r\n    if (player === 'white') {\r\n        return location - 10 * distance;\r\n    }\r\n    else {\r\n        return location + 10 * distance;\r\n    }\r\n}\r\nfunction back(distance, location, player) {\r\n    if (player === 'white') {\r\n        return location + 10 * distance;\r\n    }\r\n    else {\r\n        return location - 10 * distance;\r\n    }\r\n}\r\nfunction left(distance, location, player) {\r\n    if (player === 'white') {\r\n        return location - distance;\r\n    }\r\n    else {\r\n        return location + distance;\r\n    }\r\n}\r\nfunction right(distance, location, player) {\r\n    if (player === 'white') {\r\n        return location + distance;\r\n    }\r\n    else {\r\n        return location - distance;\r\n    }\r\n}\r\n\r\n\r\nexport { legal_moves, is_legal, is_attacked}\r\n","import {King, Rook, Pawn, Knight, Bishop, Queen } from './Pieces.js';\r\nimport {Position } from './Game.js'\r\n\r\nvar piece_scores = { Pawn: 1, Knight: 3, Bishop: 3.3, Rook: 5, Queen: 9.5, King: 0 }\r\n\r\n/* Turn FEN into chess position object */\r\nfunction ParseFen(fen) {\r\n    if (fen.length === 0) {\r\n        return \"FEN Error\";\r\n    }\r\n    let squares = Array(64).fill(null);\r\n    let player = null;\r\n    let castle_state = [0,0,0,0];\r\n    let en_passant_square = null;\r\n\r\n\tvar rank = 0;\r\n    var file = 0;\r\n    var piece = 0;\r\n    var count = 0;\r\n    var i = 0;  \r\n    var sq64 = 0;\r\n    var fenCnt = 0; // fen[fenCnt]\r\n\t\r\n\twhile ((rank <= 7) && fenCnt < fen.length) {\r\n\t    count = 1;\r\n\t\tswitch (fen[fenCnt]) {\r\n\t\t\tcase 'p': piece = new Pawn('black'); break;\r\n            case 'r': piece = new Rook('black'); break;\r\n            case 'n': piece = new Knight('black'); break;\r\n            case 'b': piece = new Bishop('black'); break;\r\n            case 'k': piece = new King('black'); break;\r\n            case 'q': piece = new Queen('black'); break;\r\n            case 'P': piece = new Pawn('white'); break;\r\n            case 'R': piece = new Rook('white'); break;\r\n            case 'N': piece = new Knight('white'); break;\r\n            case 'B': piece = new Bishop('white'); break;\r\n            case 'K': piece = new King('white'); break;\r\n            case 'Q': piece = new Queen('white'); break;\r\n\r\n            case '1':\r\n            case '2':\r\n            case '3':\r\n            case '4':\r\n            case '5':\r\n            case '6':\r\n            case '7':\r\n            case '8':\r\n                piece = null;\r\n                count = fen[fenCnt].charCodeAt() - '0'.charCodeAt();\r\n                break;\r\n            \r\n            case '/':\r\n            case ' ':\r\n                rank = rank + 1;\r\n                file = 0;\r\n                fenCnt = fenCnt + 1;\r\n                continue;  \r\n            default:\r\n                return \"FEN error\";\r\n        }\r\n        for (i = 0; i < count; i++) {\t\r\n\t\t\tsq64 = rank*8 + file;            \r\n            squares[sq64] = piece;\r\n\t\t\tfile++;\r\n        }\r\n\t\tfenCnt++;\r\n    } // while loop end\r\n\t\r\n\t//rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\r\n\tplayer = (fen[fenCnt] === 'w') ? 'white' : 'black';\r\n    fenCnt += 2;\r\n\t\r\n\tfor (i = 0; i < 4; i++) {\r\n        if (fen[fenCnt] === ' ') {\r\n            break;\r\n        }\t\t\r\n\t\tswitch(fen[fenCnt]) {\r\n\t\t\tcase 'K': castle_state[0] = 1 ; break;\r\n\t\t\tcase 'Q': castle_state[1] = 1 ; break;\r\n\t\t\tcase 'k': castle_state[2] = 1 ; break;\r\n\t\t\tcase 'q': castle_state[3] = 1 ; break;\r\n\t\t\tdefault:\t     break;\r\n        }\r\n\t\tfenCnt++;\r\n\t}\r\n    fenCnt++;\t\r\n\t\r\n\tif (fen[fenCnt] !== '-') {        \r\n\t\tfile = fen[fenCnt].charCodeAt() - 'a'.charCodeAt();\r\n        rank = fen[fenCnt + 1].charCodeAt() - '1'.charCodeAt();\t\r\n        en_passant_square = coordinate_change((7-rank) * 8 + file);\t\r\n    }\r\n    squares = engine_squares(squares);\r\n    let king_locations = get_king_locations(squares);\r\n    let material_balance = evaluate_material(squares);\r\n    let position = new Position(player,squares,king_locations, castle_state,material_balance,en_passant_square);\r\n    set_pawn_states(position);\r\n    return position;\r\n\t\r\n}\r\n\r\n/* Add padding around board so moves don't wrap. Get king locations while looping. */\r\nfunction engine_squares(squares) {\r\n    let engine_squares = Array(120).fill(null);\r\n    let count = 0;\r\n    let index = 0;\r\n\r\n    for (var i = 0; i < 12; i++) {\r\n        for (var y = 0; y < 10; y++) {\r\n            /*if boundary square*/\r\n            index = i * 10 + y;\r\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\r\n                engine_squares[index] = 'boundary';\r\n            }\r\n            else {\r\n                engine_squares[index] = squares[count];\r\n                count = count + 1;\r\n            }\r\n        }\r\n    }\r\n    return engine_squares\r\n}\r\n/* Turn padded board back into 64 Square board */\r\nfunction normal_squares(engine_squares) {\r\n    let squares = Array(64).fill(null);\r\n    let count = 0;\r\n    let index = 0;\r\n\r\n    for (var i = 0; i < 12; i++) {\r\n        for (var y = 0; y < 10; y++) {\r\n            /*if boundary square*/\r\n            index = i * 10 + y;\r\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\r\n                //do nothing\r\n            }\r\n            else {\r\n                squares[count] = engine_squares[index];\r\n                count = count + 1;\r\n            }\r\n        }\r\n    }\r\n    return squares;\r\n}\r\n\r\nfunction get_king_locations(squares) {\r\n    /*White King Location & Black King location*/\r\n    let wk_location = null;\r\n    let bk_location = null;\r\n\r\n    for (var k = 0; k < squares.length; k++) {\r\n        let current_square = squares[k];\r\n        if (current_square !== null && current_square !== 'boundary') {\r\n            if (current_square.name === 'King') {\r\n                if (current_square.player === 'white') {\r\n                    wk_location = k;\r\n                }\r\n                else {\r\n                    bk_location = k;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let king_locations = [wk_location, bk_location]\r\n    return king_locations;\r\n}\r\n\r\nfunction coordinate_change(location64) {\r\n    let count = 0;\r\n    for (var i = 0; i < 12; i++) {\r\n        for (var y = 0; y < 10; y++) {\r\n            /*if boundary square*/\r\n            let coord120 = i * 10 + y;\r\n            if (!(y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11)) {\r\n                if (location64 === count) {\r\n                    return coord120;\r\n                }\r\n                count = count + 1\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction set_pawn_states(position) {\r\n    let squares = position.squares;\r\n    for (var x = 0; x < squares.length; x++) {\r\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\r\n            let piece = squares[x];\r\n            if (piece.name === 'Pawn'){\r\n                if (piece.player === 'white') {\r\n                    if (x < 81) {\r\n                        piece.has_moved = true;\r\n                    }\r\n                }\r\n                else{\r\n                    if (x > 38) {\r\n                        piece.has_moved = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*All evaluations with respect to white */\r\nfunction evaluate_material(squares) {\r\n    let sum_material = 0\r\n    for (var x = 0; x < squares.length; x ++) {\r\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\r\n            if (squares[x].player === 'white') {\r\n                sum_material = sum_material + piece_scores[squares[x].name];\r\n            }\r\n            else {\r\n                sum_material = sum_material - piece_scores[squares[x].name];\r\n            }\r\n        }\r\n    }\r\n\r\n    return (sum_material)\r\n}\r\n\r\nfunction initialize_board() {\r\n    var board = Array(64).fill(null)\r\n    for (var k = 0; k < 8; k++) {\r\n        board[k + 8] = new Pawn('black');\r\n        board[k + 48] = new Pawn('white');\r\n    };\r\n\r\n    var color = 'black';\r\n    for (var i = 0; i < 2; i++) {\r\n        if (i === 1) {\r\n            color = 'white'\r\n        }\r\n        board[i * 56] = new Rook(color);\r\n        board[i * 56 + 7] = new Rook(color);\r\n        board[i * 56 + 1] = new Knight(color);\r\n        board[i * 56 + 6] = new Knight(color);\r\n        board[i * 56 + 2] = new Bishop(color);\r\n        board[i * 56 + 5] = new Bishop(color);\r\n        board[i * 56 + 3] = new Queen(color);\r\n        board[i * 56 + 4] = new King(color);\r\n    }\r\n    return board\r\n}\r\n\r\nfunction initialize_engine_board() {\r\n    let board = initialize_board();\r\n    let engine_board = engine_squares(board);\r\n    return engine_board\r\n}\r\n\r\nexport {ParseFen, coordinate_change, get_king_locations, normal_squares, engine_squares, evaluate_material, initialize_board, initialize_engine_board}","import { legal_moves } from './EngineMoves';\r\nimport { make_move } from './Game';\r\n\r\nvar INFINITY = 10000;\r\nvar CHECKMATE = 9000;\r\n\r\nvar start_time = null;\r\nvar best_moves = {};\r\nvar time_limit = null;\r\nvar depth_searched = null;\r\nvar time_cutoff = false;\r\n\r\nfunction set_variables(max_time) {\r\n    start_time = performance.now();\r\n    best_moves = {};\r\n    time_limit = max_time;\r\n    depth_searched = 0;\r\n    time_cutoff = false;\r\n}\r\n\r\nfunction alphabeta(position, depth, alpha, beta) {\r\n    if (depth === 0) {\r\n        return { value: position.material_balance, move: null};\r\n    }\r\n    let moves = legal_moves(position);\r\n    //Checkmate\r\n    if (moves.length === 0) {\r\n        if (position.player === 'white') {\r\n            return {value: -CHECKMATE, move: null};\r\n        }\r\n        else {\r\n            return {value: CHECKMATE, move: null};\r\n        }\r\n    }\r\n    if (time_cutoff) {\r\n        return {value: 0, move: null};\r\n    }\r\n\r\n    if (position.player === 'white') {\r\n        let value = -INFINITY;\r\n        let top_move = null;\r\n        for (var x = 0; x < moves.length; x ++) {\r\n            let current_move = moves[x];\r\n            let current_position = make_move(position, current_move);\r\n            value = Math.max(value, alphabeta(current_position, depth - 1, alpha, beta).value);\r\n            if (value > alpha) {\r\n                alpha = value;\r\n                //best_moves[] = best_moves[depth].concat(current_move);\r\n                top_move = current_move;\r\n            }\r\n            if (alpha >= beta) {\r\n                break;\r\n            }\r\n        }\r\n        if ((performance.now() - start_time) >= time_limit ) {\r\n            time_cutoff = true;\r\n            return {value:0,move:null};\r\n        }\r\n        return {value: value, move:top_move};\r\n    }\r\n    else {\r\n        let value = INFINITY;\r\n        let top_move = null;\r\n        for (var k = 0; k < moves.length; k ++) {\r\n            let current_move = moves[k];\r\n            let current_position = make_move(position, current_move);\r\n            value = Math.min(value, alphabeta(current_position, depth - 1, alpha, beta).value);\r\n            if (value < beta) {\r\n                beta = value;\r\n                //best_moves[depth] = best_moves[depth].concat(current_move);\r\n                top_move = current_move;\r\n            }\r\n            if (alpha >= beta) {\r\n                break;\r\n            }\r\n        }\r\n        if ((performance.now() - start_time) >= time_limit ) {\r\n            time_cutoff = true;\r\n            return {value:0,move:null};\r\n\r\n        }\r\n        return {value: value, move: top_move};\r\n    }\r\n}\r\n\r\n/*Give Max Depth and max search time*/\r\nfunction alphabeta_search(position, max_depth, max_time) {\r\n    set_variables(max_time);\r\n    let value_move = {value: 0, move: null};\r\n    for (var depth = 1; depth <= max_depth; depth++) {\r\n        let search_move = alphabeta(position,depth,-INFINITY, INFINITY);\r\n\r\n        if (search_move.move !== null) {\r\n            value_move = search_move\r\n            depth_searched = depth\r\n        }\r\n    }\r\n    console.log(depth_searched)\r\n    return value_move;\r\n}\r\n\r\n/* Breadth First Search.*/\r\nfunction breadth_search(depth, positions) {\r\n    if (depth === 0) {\r\n        return positions;\r\n    }\r\n    else {\r\n        let new_positions = [];\r\n        for (var j = 0; j < positions.length; j++) {\r\n            let current_position = positions[j];\r\n            let moves = legal_moves(current_position);\r\n\r\n            for (var i = 0; i < moves.length; i++) {\r\n                let current_move = moves[i];\r\n                let next_position = make_move(current_position, current_move)\r\n                new_positions.push(next_position);\r\n            }\r\n        }\r\n        return breadth_search(depth - 1, new_positions);\r\n    }\r\n}\r\n\r\nexport {alphabeta_search, alphabeta, breadth_search}","import { Game } from './Game';\r\nimport { initialize_engine_board } from './BoardFunctions';\r\nimport { legal_moves } from './EngineMoves';\r\nimport { make_move, Position } from './Game';\r\nimport { is_attacked } from './EngineMoves'\r\n\r\nvar INFINITY = 10000;\r\nvar CHECKMATE = 9000;\r\nvar best_weights = { Pawn: 0, Knight: 0, Bishop: 0, Rook: 0, Queen: 0, King: 0};\r\nvar genetic_weights = null;\r\nvar learn_rate = 1;\r\n\r\nfunction train() {\r\n    let initial_position = new Position('white', initialize_engine_board(), [95, 25], [1, 1, 1, 1], 0);\r\n    evolve_weights();\r\n    let num_games = 50;\r\n    let net_score = 0;\r\n    learn_rate = 1; \r\n\r\n    for (var k = 0; k < num_games; k++) {\r\n        /*Initialize Chess game and make two random moves to introduce variation*/\r\n        let chess_game = new Game(initial_position, [initial_position], []);\r\n        let moves = legal_moves(chess_game.position);\r\n        let move = moves[Math.floor(Math.random() * moves.length)];\r\n        chess_game.make_move(move);\r\n        moves = legal_moves(chess_game.position);\r\n        move = moves[Math.floor(Math.random() * moves.length)];\r\n        chess_game.make_move(move);\r\n\r\n        let game_result = play_game(chess_game)\r\n        net_score = net_score + game_result.result;\r\n    }\r\n    console.log(net_score, best_weights, genetic_weights);\r\n    if (net_score > 3) {\r\n        learn_rate = learn_rate / 2;\r\n        best_weights = genetic_weights\r\n        evolve_weights();\r\n    }\r\n}\r\n\r\nfunction evolve_weights() {\r\n    let new_weights = {};\r\n    /* add noise to best_weights */\r\n    let max = 0; \r\n    for (var key in best_weights) {\r\n        new_weights[key] = best_weights[key] + (Math.random()-0.5) * learn_rate;\r\n        if (Math.abs(new_weights[key]) > max) {\r\n            max = Math.abs(new_weights[key])\r\n        }\r\n    }\r\n    /*Normalize new Weights*/\r\n    for (key in new_weights) {\r\n        new_weights[key] = new_weights[key] / max;\r\n    }\r\n    genetic_weights = new_weights;\r\n}\r\n\r\nfunction play_game(chess_game) {\r\n    let alphabeta_result = null;\r\n    let score = 0; \r\n    let result = 0;\r\n    while (chess_game.history.length < 100) {\r\n        if (chess_game.position.player === 'white') {\r\n            alphabeta_result = alphabeta(chess_game.position, 1, -INFINITY, INFINITY, 'base');\r\n        }\r\n        else {\r\n            alphabeta_result = alphabeta(chess_game.position, 1, -INFINITY, INFINITY, 'genetic');\r\n        }\r\n        score = alphabeta_result.value\r\n        let move = alphabeta_result.move\r\n        if (Math.abs(score) < 1000) {\r\n            chess_game.make_move(move);\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    if (score === 9000) {\r\n        result = -1\r\n    }\r\n    else if (score === -9000) {\r\n        result = 1;\r\n    }\r\n    return { result: result, weights: genetic_weights };\r\n}\r\n\r\nfunction genetic_evaluation(position) {\r\n    let squares = position.squares;\r\n    let score = 0;\r\n    for (var x = 0; x < squares.length; x++) {\r\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\r\n            let piece = squares[x];\r\n            if (piece.player === 'white') {\r\n                score = score + genetic_weights[piece.name];\r\n            }\r\n            else {\r\n                score = score - genetic_weights[piece.name];\r\n            }\r\n        }\r\n    }\r\n    return score;\r\n}\r\n\r\nfunction base_evaluation(position) {\r\n    let squares = position.squares;\r\n    let score = 0;\r\n    for (var x = 0; x < squares.length; x++) {\r\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\r\n            let piece = squares[x];\r\n            if (piece.player === 'white') {\r\n                score = score + best_weights[piece.name];\r\n            }\r\n            else {\r\n                score = score - best_weights[piece.name];\r\n            }\r\n        }\r\n    }\r\n    return score;\r\n}\r\n\r\nfunction alphabeta(position, depth, alpha, beta, evaluation) {\r\n    if (depth === 0) {\r\n        if (evaluation === 'genetic') {\r\n            return { value: genetic_evaluation(position), move: null };\r\n        }\r\n        else {\r\n            return { value: base_evaluation(position), move: null };\r\n        }\r\n    }\r\n    let moves = legal_moves(position);\r\n    //Checkmate Stalemate\r\n    if (moves.length === 0) {\r\n        let in_check = false;\r\n        if (!in_check) {\r\n            return { value: 0, move: null };\r\n        }\r\n        else if (position.player === 'white') {\r\n            in_check = is_attacked(position.squares, position.king_locations[0], position.player)[0];\r\n            return { value: -CHECKMATE, move: null };\r\n        }\r\n        else {\r\n            in_check = is_attacked(position.squares, position.king_locations[1], position.player)[0];\r\n            return { value: CHECKMATE, move: null };\r\n        }\r\n    }\r\n    if (position.player === 'white') {\r\n        let value = -INFINITY;\r\n        let top_move = null;\r\n        for (var x = 0; x < moves.length; x++) {\r\n            let current_move = moves[x];\r\n            let current_position = make_move(position, current_move);\r\n            value = Math.max(value, alphabeta(current_position, depth - 1, alpha, beta, evaluation).value);\r\n            if (value > alpha) {\r\n                alpha = value;\r\n                top_move = current_move;\r\n            }\r\n            if (alpha >= beta) {\r\n                break;\r\n            }\r\n        }\r\n        return { value: value, move: top_move };\r\n    }\r\n    else {\r\n        let value = INFINITY;\r\n        let top_move = null;\r\n        for (var k = 0; k < moves.length; k++) {\r\n            let current_move = moves[k];\r\n            let current_position = make_move(position, current_move);\r\n            value = Math.min(value, alphabeta(current_position, depth - 1, alpha, beta, evaluation).value);\r\n            if (value < beta) {\r\n                beta = value;\r\n                top_move = current_move;\r\n            }\r\n            if (alpha >= beta) {\r\n                break;\r\n            }\r\n        }\r\n        return { value: value, move: top_move };\r\n    }\r\n}\r\n\r\nexport {play_game, train}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { DragDropContext } from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport ReactPiece from './DragPiece';\r\nimport DropSquare from './DropSquare';\r\nimport { Knight, Bishop, Rook, Queen} from './Pieces';\r\nimport { legal_moves, is_legal} from './EngineMoves';\r\nimport {normal_squares,coordinate_change, ParseFen, initialize_engine_board} from './BoardFunctions';\r\nimport { make_move, Position, create_move, Game} from './Game';\r\nimport { alphabeta_search} from './Search';\r\n//import { game_test, perft_test } from './Tests';\r\nimport { train } from './Evaluation.js';\r\n\r\nclass Chess extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{ position: new Position('white', initialize_engine_board(), [95, 25], [1, 1, 1, 1], 0) }],\r\n      drag_end: null,\r\n      promotion:{class:'hidden',start: null, end: null, player: null},\r\n      status:null,\r\n    }\r\n  }\r\n  train() {\r\n    const history = this.state.history.slice();\r\n    const position = history[history.length - 1].position;\r\n\r\n    //perft_test(position,4);\r\n    \r\n    let chess_game = new Game(position, history);\r\n    train(chess_game);\r\n    \r\n\r\n  };\r\n\r\n  reset() {\r\n    this.setState({\r\n      history: [{ position: new Position('white', initialize_engine_board(), [95, 25], [1, 1, 1, 1], 0)}],\r\n      drag_end: null,\r\n      promotion:{class:'hidden',start: null, end: null, player: null},\r\n      status:null\r\n    });\r\n  }\r\n  back() {\r\n    const history = this.state.history.slice();\r\n    if (history.length === 1) {\r\n      return;\r\n    }\r\n    history.pop();\r\n\r\n    this.setState({\r\n      history: history,\r\n      status:null\r\n    });\r\n    }\r\n\r\n  setup_fen(value) {\r\n      let position = ParseFen(value);\r\n      if (position !== 'FEN Error') {\r\n          this.setState({\r\n              history: [{ position: position }],\r\n              drag_end: null,\r\n              promotion: { class: 'hidden', start: null, end: null, player: null },\r\n              status: null\r\n          });\r\n      }\r\n      else {\r\n          alert('FEN ERROR');\r\n      }\r\n  }\r\n\r\n  engine_move() {\r\n    const history = this.state.history.slice();\r\n    const position = history[history.length - 1].position;\r\n    //Time in milliseconds\r\n    let search_time = 1000;\r\n    let engine_move = alphabeta_search(position,10,search_time);\r\n    console.log(engine_move.value)\r\n\r\n    if (engine_move.move === null) {\r\n        this.setState({\r\n            status: 'Game Over',\r\n        });\r\n        return;\r\n    }\r\n\r\n    let new_position = make_move(position, engine_move.move);\r\n    this.setState({\r\n      history: history.concat([{position: new_position}]),\r\n      engine_turn: false\r\n    });\r\n  }\r\n\r\n  handle_drop(id) {\r\n    this.setState({drag_end: id});\r\n  }\r\n\r\n  handle_drag_end(id) {\r\n    const history = this.state.history.slice();\r\n    const position = history[history.length - 1].position;\r\n\r\n    let drag_start = coordinate_change(id);\r\n    let drag_end = coordinate_change(this.state.drag_end);\r\n    let piece = position.squares[drag_start];\r\n    /* promotions */\r\n    if ((drag_end <= 28 || drag_end >= 91) && piece.name === 'Pawn'){\r\n      let promotion = {class:'promotion_container',start: drag_start, end: drag_end, player: position.player}\r\n      this.setState({promotion:promotion})\r\n      return;\r\n    }\r\n    this.change_states(history, position, drag_start, drag_end, null);\r\n  };\r\n\r\n  handle_promotion(piece) {\r\n    const history = this.state.history.slice();\r\n    const position = history[history.length - 1].position;\r\n    const promotion = this.state.promotion;\r\n\r\n    let start = promotion['start'];\r\n    let end = promotion['end'];\r\n\r\n    this.change_states(history, position, start, end, piece)\r\n\r\n    this.setState({\r\n      promotion:{class:'hidden',start: null, end: null, player: null}\r\n    });\r\n  }\r\n\r\n  change_states(history, position, start, end, promotion_piece) {\r\n      let possible_moves = legal_moves(position);\r\n      let move = create_move(start, end, position, promotion_piece);\r\n      let status = null;\r\n      if (is_legal(move, possible_moves)) {\r\n        let new_position = make_move(position, move);\r\n        let new_moves = legal_moves(new_position);\r\n    \r\n        if (new_moves.length === 0) {\r\n            status = 'Game Over'\r\n        }\r\n        this.setState({\r\n          history: history.concat([{position: new_position}]),\r\n          drag_end: null,\r\n          status: status,\r\n        });\r\n    }\r\n  }\r\n\r\n    render() {\r\n    let history= this.state.history;\r\n    let current_position = history[history.length - 1].position\r\n    let current_squares = normal_squares(current_position.squares);\r\n    let player = current_position.player;\r\n    let promotion_class = this.state.promotion['class'];\r\n    //let status = this.state.status;\r\n\r\n    return (\r\n    <div className = 'game_container'>\r\n      <Buttons \r\n      back = {() => this.back()}\r\n      reset = {() => this.reset()}\r\n      engine_move = {() => this.engine_move()}\r\n      train = {() => this.train()}\r\n      />\r\n      <div className = 'board_container' >\r\n        <Board \r\n          squares = {current_squares}\r\n          onDrop = {(id) => this.drop(id)}\r\n          player = {player}\r\n          handle_drop={(id) => this.handle_drop(id)}\r\n          handle_drag_end = {(id) => this.handle_drag_end(id)}\r\n        />\r\n      </div>\r\n      <FenPosition\r\n      setup_fen={(value) => this.setup_fen(value)}\r\n      />\r\n      <Promotion\r\n        className = {promotion_class}\r\n        player = {player}\r\n        handle_promotion = {(piece) => this.handle_promotion(piece)}\r\n      />\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquares() {\r\n    var html_board = [];\r\n    var color = false;\r\n    for (var i = 0; i < 8; i ++){\r\n    color = !color;\r\n    var html_row = [];\r\n      for (var k = 0; k < 8; k ++){\r\n        let id = i*8 + k\r\n        let current_square = <Square \r\n          value={this.props.squares[id]} \r\n          key={id} \r\n          color={color} \r\n          player = {this.props.player}\r\n          handle_drop={() => this.props.handle_drop(id)}\r\n          handle_drag_end = {(id) => this.props.handle_drag_end(id)}\r\n          id = {id}\r\n        />;\r\n        html_row.push(current_square);\r\n        color = !color\r\n      }\r\n      html_row = <div className = \"board_row\" key = {i}> {html_row} </div>\r\n      html_board.push(html_row)\r\n    }\r\n    return html_board\r\n  }\r\n  render() {\r\n  return (\r\n    <div>\r\n    {this.renderSquares()}\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nclass Square extends React.Component {\r\n    renderSquare(color) {\r\n        var class_name = \"dark square\"\r\n        var style = null;\r\n        var url = null;\r\n        var player = null;\r\n\r\n        if (color) {\r\n            class_name = \"light square\"\r\n        }\r\n        if (this.props.value) {\r\n            style = this.props.value.style;\r\n            url = this.props.value.url;\r\n            player = this.props.value.player;\r\n        }\r\n        if (this.props.player === player) {\r\n          return (\r\n          <div className={class_name}>\r\n            <ReactPiece \r\n              url={url} \r\n              id = {this.props.id}\r\n              handle_drag_end = {(id) => this.props.handle_drag_end(id)}\r\n            /> \r\n          </div> );\r\n        }\r\n        else {\r\n            return (\r\n            <DropSquare \r\n              class_name={class_name} \r\n              style={style} \r\n              handle_drop={() => this.props.handle_drop()}\r\n            /> );\r\n        }\r\n    }\r\n\r\n  render() {\r\n    var color = this.props.color;\r\n    return (\r\n    <React.Fragment>\r\n      {this.renderSquare(color)}\r\n    </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Buttons(props) {\r\n  return (\r\n   <div className = 'button_container'>\r\n      <button \r\n      className = \"button_element\" \r\n      onClick={() => props.reset()} > Reset\r\n      </button>\r\n      <button \r\n      className = \"button_element\"  \r\n      onClick={() => props.back()} > Back \r\n      </button>\r\n      <button \r\n      className = \"button_element\" \r\n      onClick={() => props.engine_move()} > Engine Move\r\n      </button>\r\n    </div>\r\n  );\r\n} \r\n\r\nclass FenPosition extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    submit(event) {\r\n        event.preventDefault();\r\n        this.props.setup_fen(this.state.value);\r\n    }\r\n\r\n    render() {\r\n    return (\r\n        <form onSubmit={(event) => this.submit(event)} className='fen_input'>\r\n            <label>\r\n                FEN String: &nbsp;\r\n              <input type=\"text\" className = 'input_box' value={this.state.value} onChange={(event) => this.handleChange(event)} />\r\n            </label>\r\n            <input type=\"submit\" className = 'input_button' value=\"Set Position\" />\r\n        </form>\r\n    );\r\n    }\r\n\r\n}\r\n\r\nclass Promotion extends React.Component {\r\n  render(){\r\n    let knight_piece = new Knight(this.props.player);\r\n    let bishop_piece = new Bishop(this.props.player);\r\n    let rook_piece = new Rook(this.props.player);\r\n    let queen_piece = new Queen(this.props.player);\r\n\r\n    return (\r\n      <div className = {this.props.className}>\r\n        <div className=\"promotion\">\r\n            <button className = {\"promotion_button\"} style = {knight_piece.style} onClick={() => this.props.handle_promotion(knight_piece)}></button>\r\n            <button className = {\"promotion_button\"} style = {bishop_piece.style} onClick={() => this.props.handle_promotion(bishop_piece)}></button>\r\n            <button className = {\"promotion_button\"} style = {rook_piece.style} onClick={() => this.props.handle_promotion(rook_piece)}></button>\r\n            <button className = {\"promotion_button\"} style = {queen_piece.style} onClick={() => this.props.handle_promotion(queen_piece)}></button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n} \r\n\r\n\r\nexport default DragDropContext(HTML5Backend)(Chess);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}