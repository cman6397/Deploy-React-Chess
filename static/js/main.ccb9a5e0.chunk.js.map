{"version":3,"sources":["Constants.js","DragPiece.js","DropSquare.js","Pieces.js","BoardFunctions.js","Game.js","EngineMoves.js","Search.js","Evaluation.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","ReactPiece","_this","this","img","Image","src","props","url","onload","connectDragPreview","_this2","_this$props","connectDragSource","isDragging","react_default","a","createElement","className","onClick","handle_click_start","alt","style","opacity","cursor","React","Component","DragSource","beginDrag","id","endDrag","monitor","component","didDrop","item","getItem","handle_drag_end","connect","dragSource","dragPreview","DropSquare","class_name","connectDropTarget","handle_click_end","DropTarget","drop","handle_drop","dropTarget","isOver","Piece","player","img_url","name","Object","classCallCheck","backgroundImage","has_moved","Pawn","possibleConstructorReturn","getPrototypeOf","call","just_moved_two","Rook","Knight","Bishop","Queen","King","piece_scores","ParseFen","fen","length","squares","Array","fill","castle_state","en_passant_square","rank","file","piece","count","i","fenCnt","charCodeAt","coordinate_change","king_locations","wk_location","bk_location","k","current_square","get_king_locations","engine_squares","material_balance","sum_material","x","evaluate_material","position","Position","set_pawn_states","index","y","sq64","Math","floor","initialize_engine_board","board","color","initialize_board","square_values","Game","history","moves","position_key","position_keys","defineProperty","legal_moves","move","slice","new_position","make_move","concat","pop","Move","start","end","en_passant","rook_start","rook_end","promotion_piece","en_passant_capture","JSON","parse","stringify","abs","rook","location_score","new_game","king_location","pinned_pieces","get_pinned_pieces","en_passant_pins","en_passant_location","forward","special_squares","pinned_en_passant","_king_check_squares","attacking_pieces","checked_squares","up_right","right","up_left","left","pawn_moves","knight_moves","get_knight_moves","diag_directions","straight_directions","_attacked_squares","attacked_squares","_attacked_squares2","slicedToArray","attack_squares","attack_piece","push","_attacked_squares3","_attacked_squares4","end_piece","king_check_squares","_king_check_squares2","in_check","king_moves","bishop_moves","rook_moves","current_move","includes","splice","in_check_handler","location","pawn","forward_one","forward_two","left_one","right_one","diag_left","diag_right","create_pawn_move","bishop","pin_direction","inverse_direction","toString","moves_and_captures","king_squares","get_king_moves","is_attacked","white_king_start","castle","white_kingside_rook","white_queenside_rook","black_king_start","black_kingside_rook","black_queenside_rook","direction_is_attacked","move_direction","start_location","piece_types","end_location","direction","attacking_piece","square_location","pin_info","pinned_directions","get_pinned_piece","pin_location","pinned_piece","pawn_location","pawn_end_location","is_en_passant","pieces","promote","back","king_start","king_end","captured_location","directions","down_right","down_left","up","down","move_right","move_left","distance","INFINITY","CHECKMATE","start_time","time_limit","depth_searched","time_cutoff","total_positions","set_variables","max_time","performance","now","alphabeta","depth","alpha","beta","value","score_position","top_move","current_position","max","min","best_weights","genetic_weights","learn_rate","evolve_weights","new_weights","key","random","play_game","chess_game","alphabeta_result","score","result","weights","evaluation","genetic_evaluation","base_evaluation","Chess","state","game","drag_end","promotion","class","status","click_start","initial_position","net_score","console","log","train","setState","take_move","alert","engine_move","max_depth","value_move","search_move","alphabeta_search","start_square","click_end","change_states","drag_start","possible_moves","create_move","is_legal","setTimeout","bind","_this3","current_squares","normal_squares","promotion_class","Buttons","reset","App_Board","onDrop","App_FenPosition","setup_fen","App_Promotion","handle_promotion","Board","_this4","html_board","html_row","_loop","App_Square","renderSquares","Square","_this5","DragPiece","src_DropSquare","Fragment","renderSquare","FenPosition","_this6","event","target","preventDefault","_this7","onSubmit","submit","type","onChange","handleChange","Promotion","_this8","knight_piece","bishop_piece","rook_piece","queen_piece","DragDropContext","HTML5Backend","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iNAAaA,EACJ,YC4BHC,8LACgB,IAAAC,EAAAC,KACZC,EAAM,IAAIC,MAAM,GAAI,IAC1BD,EAAIE,IAAMH,KAAKI,MAAMC,IACrBJ,EAAIK,OAAS,kBAAMP,EAAKK,MAAMG,mBAAmBN,qCAG1C,IAAAO,EAAAR,KACHK,EAAML,KAAKI,MAAMC,IADdI,EAEmCT,KAAKI,MAAvCM,EAFDD,EAECC,kBAAmBC,EAFpBF,EAEoBE,WAC3B,OAAOD,EACPE,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBAAkBC,QAAW,kBAAMR,EAAKJ,MAAMa,uBAC7DL,EAAAC,EAAAC,cAAA,OAAKX,IAAKE,EAAKa,IAAK,GAAGH,UAAY,cAAcI,MAAO,CACtDC,QAAS,EACTC,OAAQV,EAAa,WAAa,mBAdjBW,IAAMC,WA2BhBC,uBAAW3B,EAlDN,CAClB4B,UADkB,SACRrB,GAER,MADa,CAAEsB,GAAItB,EAAMsB,KAG3BC,QALkB,SAKVvB,EAAOwB,EAASC,GACtB,GAAKD,EAAQE,UAAb,CAIA,IAAMC,EAAOH,EAAQI,UACrB,OAAO5B,EAAM6B,gBAAgBF,EAAKL,OAItC,SAAiBQ,EAASN,GACtB,MAAO,CACHlB,kBAAmBwB,EAAQC,aAC3B5B,mBAAoB2B,EAAQE,cAC5BzB,WAAYiB,EAAQjB,eA+Bba,CAAkD1B,OCtC3DuC,mLACO,IAAAtC,EAAAC,KACDmB,EAAQnB,KAAKI,MAAMe,MACnBmB,EAAatC,KAAKI,MAAMkC,WAE5B,OAAOC,EADmBvC,KAAKI,MAAMmC,mBAEjC3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWuB,EAAYnB,MAAOA,EAAOH,QAAW,kBAAMjB,EAAKK,MAAMoC,qBAAtE,aANalB,IAAMC,WAYhBkB,uBAAW5C,EAzBL,CACjB6C,KADiB,SACZtC,GACH,OAAOA,EAAMuC,gBAInB,SAAiBT,EAASN,GACtB,MAAO,CACLW,kBAAmBL,EAAQU,aAC3BC,OAAQjB,EAAQiB,WAgBPJ,CAAmDJ,GC7B5DS,EACJ,SAAAA,EAAYC,EAAQC,EAASC,GAAMC,OAAAC,EAAA,EAAAD,CAAAlD,KAAA8C,GACjC9C,KAAK+C,OAASA,EACd/C,KAAKmB,MAAQ,CAACiC,gBAAiB,QAAQJ,EAAQ,MAC/ChD,KAAKiD,KAAOA,EACZjD,KAAKK,IAAM2C,EACXhD,KAAKqD,WAAY,GAIfC,cACJ,SAAAA,EAAYP,GAAO,IAAAhD,EAAAmD,OAAAC,EAAA,EAAAD,CAAAlD,KAAAsD,GACjB,IAAIjD,EAAI,sEADS,MAEF,UAAX0C,IACA1C,EAAM,wEAEVN,EAAAmD,OAAAK,EAAA,EAAAL,CAAAlD,KAAAkD,OAAAM,EAAA,EAAAN,CAAAI,GAAAG,KAAAzD,KAAM+C,EAAQ1C,EAAK,UACdqD,gBAAiB,EANL3D,6BADF+C,GAWba,cACF,SAAAA,EAAYZ,GAASG,OAAAC,EAAA,EAAAD,CAAAlD,KAAA2D,GACjB,IAAItD,EAAM,sEADM,MAED,UAAX0C,IACA1C,EAAM,uEAHM6C,OAAAK,EAAA,EAAAL,CAAAlD,KAAAkD,OAAAM,EAAA,EAAAN,CAAAS,GAAAF,KAAAzD,KAKV+C,EAAQ1C,EAAK,oCANRyC,GAUbc,cACF,SAAAA,EAAYb,GAASG,OAAAC,EAAA,EAAAD,CAAAlD,KAAA4D,GACjB,IAAIvD,EAAM,sEADM,MAED,UAAX0C,IACA1C,EAAM,uEAHM6C,OAAAK,EAAA,EAAAL,CAAAlD,KAAAkD,OAAAM,EAAA,EAAAN,CAAAU,GAAAH,KAAAzD,KAKV+C,EAAQ1C,EAAK,sCANNyC,GAUfe,cACF,SAAAA,EAAYd,GAASG,OAAAC,EAAA,EAAAD,CAAAlD,KAAA6D,GACjB,IAAIxD,EAAM,sEADM,MAED,UAAX0C,IACA1C,EAAM,uEAHM6C,OAAAK,EAAA,EAAAL,CAAAlD,KAAAkD,OAAAM,EAAA,EAAAN,CAAAW,GAAAJ,KAAAzD,KAKV+C,EAAQ1C,EAAK,sCANNyC,GAUfgB,cACF,SAAAA,EAAYf,GAASG,OAAAC,EAAA,EAAAD,CAAAlD,KAAA8D,GACjB,IAAIzD,EAAM,sEADM,MAED,UAAX0C,IACA1C,EAAM,uEAHM6C,OAAAK,EAAA,EAAAL,CAAAlD,KAAAkD,OAAAM,EAAA,EAAAN,CAAAY,GAAAL,KAAAzD,KAKV+C,EAAQ1C,EAAK,qCANPyC,GAUdiB,cACF,SAAAA,EAAYhB,GAASG,OAAAC,EAAA,EAAAD,CAAAlD,KAAA+D,GACjB,IAAI1D,EAAM,sEADM,MAED,UAAX0C,IACA1C,EAAM,uEAHM6C,OAAAK,EAAA,EAAAL,CAAAlD,KAAAkD,OAAAM,EAAA,EAAAN,CAAAa,GAAAN,KAAAzD,KAKV+C,EAAQ1C,EAAK,oCANRyC,mBC3DfkB,EAAe,CAAEV,KAAM,EAAGM,OAAQ,EAAGC,OAAQ,IAAKF,KAAM,EAAGG,MAAO,IAAKC,KAAM,GAGjF,SAASE,EAASC,GACd,GAAmB,IAAfA,EAAIC,OACJ,MAAO,YAed,IAbG,IACIpB,EADAqB,EAAUC,MAAM,IAAIC,KAAK,MAEzBC,EAAe,CAAC,EAAE,EAAE,EAAE,GACtBC,EAAoB,KAEvBC,EAAO,EACJC,EAAO,EACPC,EAAQ,EACRC,EAAQ,EACRC,EAAI,EAEJC,EAAS,EAERL,GAAQ,GAAMK,EAASZ,EAAIC,QAAQ,CAE1C,OADGS,EAAQ,EACHV,EAAIY,IACX,IAAK,IAAKH,EAAQ,IAAIrB,EAAK,SAAU,MAC5B,IAAK,IAAKqB,EAAQ,IAAIhB,EAAK,SAAU,MACrC,IAAK,IAAKgB,EAAQ,IAAIf,EAAO,SAAU,MACvC,IAAK,IAAKe,EAAQ,IAAId,EAAO,SAAU,MACvC,IAAK,IAAKc,EAAQ,IAAIZ,EAAK,SAAU,MACrC,IAAK,IAAKY,EAAQ,IAAIb,EAAM,SAAU,MACtC,IAAK,IAAKa,EAAQ,IAAIrB,EAAK,SAAU,MACrC,IAAK,IAAKqB,EAAQ,IAAIhB,EAAK,SAAU,MACrC,IAAK,IAAKgB,EAAQ,IAAIf,EAAO,SAAU,MACvC,IAAK,IAAKe,EAAQ,IAAId,EAAO,SAAU,MACvC,IAAK,IAAKc,EAAQ,IAAIZ,EAAK,SAAU,MACrC,IAAK,IAAKY,EAAQ,IAAIb,EAAM,SAAU,MAEtC,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACDa,EAAQ,KACRC,EAAQV,EAAIY,GAAQC,aAAe,IAAIA,aACvC,MAEJ,IAAK,IACL,IAAK,IACDN,GAAc,EACdC,EAAO,EACPI,GAAkB,EAClB,SACJ,QACI,MAAO,YAEf,IAAKD,EAAI,EAAGA,EAAID,EAAOC,IAEnBT,EADG,EAALK,EAASC,GACSC,EACzBD,IAEDI,IAOD,IAHA/B,EAA0B,MAAhBmB,EAAIY,GAAmB,QAAU,QACxCA,GAAU,EAERD,EAAI,EAAGA,EAAI,GACW,MAAhBX,EAAIY,GADID,IAAK,CAIvB,OAAOX,EAAIY,IACV,IAAK,IAAKP,EAAa,GAAK,EAAI,MAChC,IAAK,IAAKA,EAAa,GAAK,EAAI,MAChC,IAAK,IAAKA,EAAa,GAAK,EAAI,MAChC,IAAK,IAAKA,EAAa,GAAK,EAG7BO,IAImB,MAAhBZ,IAFDY,KAGFJ,EAAOR,EAAIY,GAAQC,aAAe,IAAIA,aAEhCP,EAAoBQ,EAA6B,GAAV,GADvCP,EAAOP,EAAIY,EAAS,GAAGC,aAAe,IAAIA,eACWL,IAGzD,IAAIO,EAmDR,SAA4Bb,GAKxB,IAHA,IAAIc,EAAc,KACdC,EAAc,KAETC,EAAI,EAAGA,EAAIhB,EAAQD,OAAQiB,IAAK,CACrC,IAAIC,EAAiBjB,EAAQgB,GACN,OAAnBC,GAA8C,aAAnBA,GACC,SAAxBA,EAAepC,OACe,UAA1BoC,EAAetC,OACfmC,EAAcE,EAGdD,EAAcC,GAM9B,MADqB,CAACF,EAAaC,GArEdG,CADrBlB,EAAUmB,EAAenB,IAErBoB,EAwGR,SAA2BpB,GAEvB,IADA,IAAIqB,EAAe,EACVC,EAAI,EAAGA,EAAItB,EAAQD,OAAQuB,IACb,aAAftB,EAAQsB,IAAoC,OAAftB,EAAQsB,KACX,UAAtBtB,EAAQsB,GAAG3C,OACX0C,GAA8BzB,EAAaI,EAAQsB,GAAGzC,MAGtDwC,GAA8BzB,EAAaI,EAAQsB,GAAGzC,OAKlE,OAAQwC,EArHeE,CAAkBvB,GACrCwB,EAAW,IAAIC,EAAS9C,EAAOqB,EAAQa,EAAgBV,EAAaiB,EAAiBhB,GAEzF,OA+EJ,SAAyBoB,GAErB,IADA,IAAIxB,EAAUwB,EAASxB,QACdsB,EAAI,EAAGA,EAAItB,EAAQD,OAAQuB,IAChC,GAAmB,aAAftB,EAAQsB,IAAoC,OAAftB,EAAQsB,GAAa,CAClD,IAAIf,EAAQP,EAAQsB,GACD,SAAff,EAAM1B,OACe,UAAjB0B,EAAM5B,OACF2C,EAAI,KACJf,EAAMtB,WAAY,GAIlBqC,EAAI,KACJf,EAAMtB,WAAY,KA7FtCyC,CAAgBF,GACTA,EAKX,SAASL,EAAenB,GAKpB,IAJA,IAAImB,EAAiBlB,MAAM,KAAKC,KAAK,MACjCM,EAAQ,EACRmB,EAAQ,EAEHlB,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAImB,EAAI,EAAGA,EAAI,GAAIA,IAEpBD,EAAY,GAAJlB,EAASmB,EACP,IAANA,GAAiB,IAANA,GAAiB,IAANnB,GAAiB,IAANA,GAAiB,KAANA,GAAkB,KAANA,EACxDU,EAAeQ,GAAS,YAGxBR,EAAeQ,GAAS3B,EAAQQ,GAChCA,GAAgB,GAI5B,OAAOW,EAmDX,SAASP,EAAkBiB,GAEvB,OADYA,EAAO,GAAwB,EAAnBC,KAAKC,MAAMF,EAAK,GAkE5C,SAASG,IAGL,OADmBb,EA1BvB,WAEI,IADA,IAAIc,EAAQhC,MAAM,IAAIC,KAAK,MAClBc,EAAI,EAAGA,EAAI,EAAGA,IACnBiB,EAAMjB,EAAI,GAAK,IAAI9B,EAAK,SACxB+C,EAAMjB,EAAI,IAAM,IAAI9B,EAAK,SAI7B,IADA,IAAIgD,EAAQ,QACHzB,EAAI,EAAGA,EAAI,EAAGA,IACT,IAANA,IACAyB,EAAQ,SAEZD,EAAU,GAAJxB,GAAU,IAAIlB,EAAK2C,GACzBD,EAAU,GAAJxB,EAAS,GAAK,IAAIlB,EAAK2C,GAC7BD,EAAU,GAAJxB,EAAS,GAAK,IAAIjB,EAAO0C,GAC/BD,EAAU,GAAJxB,EAAS,GAAK,IAAIjB,EAAO0C,GAC/BD,EAAU,GAAJxB,EAAS,GAAK,IAAIhB,EAAOyC,GAC/BD,EAAU,GAAJxB,EAAS,GAAK,IAAIhB,EAAOyC,GAC/BD,EAAU,GAAJxB,EAAS,GAAK,IAAIf,EAAMwC,GAC9BD,EAAU,GAAJxB,EAAS,GAAK,IAAId,EAAKuC,GAEjC,OAAOD,EAIKE,IC5OhB,IAAIvC,EAAe,CAAEV,KAAM,EAAGM,OAAQ,EAAGC,OAAQ,IAAKF,KAAM,EAAGG,MAAO,IAAKC,KAAM,GAE7EyC,EAAgB,CACpBA,KACG,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,IAAM,IAAM,IAAM,IAAM,EAAG,EAAG,EACvC,EAAG,EAAG,EAAG,IAAM,IAAM,IAAM,IAAM,EAAG,EAAG,EACvC,EAAG,EAAG,EAAG,IAAM,IAAM,IAAM,IAAM,EAAG,EAAG,EACvC,EAAG,EAAG,EAAG,IAAM,IAAM,IAAM,IAAM,EAAG,EAAG,EACvC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE/BA,KACI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,GAAI,IAAM,EAAG,IAAM,IAAM,IAAM,IAAM,GAAI,IAAM,EAC/C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,GAAI,IAAM,EAAG,IAAM,IAAM,IAAM,KAAO,IAAM,EAC5C,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE/BA,OACI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,GAAI,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,EAC3D,GAAG,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,KAAO,IAAM,EACpD,GAAI,IAAM,EAAG,IAAM,IAAM,IAAM,IAAM,GAAI,IAAM,EAC/C,GAAI,IAAM,EAAG,IAAM,IAAM,IAAM,IAAM,GAAI,IAAM,EAC/C,GAAI,IAAM,EAAG,IAAM,IAAM,IAAM,IAAM,GAAI,IAAM,EAC/C,GAAI,IAAM,EAAG,IAAM,IAAM,IAAM,IAAM,GAAI,IAAM,EAC/C,GAAI,IAAM,EAAG,IAAM,IAAM,IAAM,IAAM,GAAI,IAAM,EAC/C,GAAI,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,KAAO,IAAM,EAC3D,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE/BA,OACI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE/BA,MACI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE/BA,KACI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,IAAM,IAAM,EAAG,EAAG,EAAG,EAAG,IAAM,IAAM,EACvC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,EAAG,EAAG,EAAG,EAAG,EAAG,E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","file":"static/js/main.ccb9a5e0.chunk.js","sourcesContent":["export const ItemTypes = {\n  PIECE: 'piece'\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from './Constants';\nimport { DragSource } from 'react-dnd';\nimport './App.css';\n\nconst pieceSource = {\n  beginDrag(props) {\n    const item = { id: props.id };\n    return item;\n  },\n  endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      //Decided not to move piece maybe\n      return;\n    }\n    const item = monitor.getItem();\n    return props.handle_drag_end(item.id);\n  }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    };\n}\n\nclass ReactPiece extends React.Component {\n  componentDidMount() {\n    const img = new Image(46, 46);\n    img.src = this.props.url;\n    img.onload = () => this.props.connectDragPreview(img);\n  }\n\n  render() {\n    var url = this.props.url\n    const { connectDragSource, isDragging } = this.props;\n    return connectDragSource(\n    <div className = \"piece_container\" onClick = {() => this.props.handle_click_start()}>\n      <img src={url} alt ='' className = \"react_piece\" style={{\n        opacity: 1,\n        cursor: isDragging ? 'grabbing' : 'grab'\n      }}>\n      </img>\n    </div>\n    );\n  }\n  }\n\nReactPiece.propTypes = {\n  connectDragSource: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired\n};\n\nexport default DragSource(ItemTypes.PIECE, pieceSource, collect)(ReactPiece);\n\n\n\n\n\n\n\n","import React from 'react';\nimport { ItemTypes } from './Constants';\nimport { DropTarget } from 'react-dnd';\nimport './App.css';\n\nconst squareTarget = {\n    drop(props) {\n      return props.handle_drop();\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n      connectDropTarget: connect.dropTarget(),\n      isOver: monitor.isOver()\n    };\n}\n\nclass DropSquare extends React.Component {\n    render() {\n        var style = this.props.style;\n        var class_name = this.props.class_name;\n        const connectDropTarget = this.props.connectDropTarget;\n        return connectDropTarget(\n            <div className={class_name} style={style} onClick = {() => this.props.handle_click_end()}> </div>\n        )\n    }\n}\n  \n\nexport default DropTarget(ItemTypes.PIECE, squareTarget, collect)(DropSquare);","\nclass Piece {\n  constructor(player, img_url, name){\n    this.player = player;\n    this.style = {backgroundImage: \"url('\"+img_url+\"')\"};\n    this.name = name;\n    this.url = img_url;\n    this.has_moved = false;\n  }\n}\n\nclass Pawn extends Piece {\n  constructor(player){\n    var url='https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg'\n    if (player === 'black') {\n        url = 'https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg'\n    }\n    super(player, url, 'Pawn');\n    this.just_moved_two = false;\n  }\n}\n\nclass Rook extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg'\n        }\n        super(player, url, 'Rook');\n    }\n}\n\nclass Knight extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg'\n        }\n        super(player, url, 'Knight')\n    }\n}\n\nclass Bishop extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg'\n        }\n        super(player, url, 'Bishop')\n    }\n}\n\nclass Queen extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg'\n        }\n        super(player, url, 'Queen')\n    }\n}\n\nclass King extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg'\n        }\n        super(player, url, 'King')\n    }\n}\n\n\n\nexport {Pawn,Rook,Knight,Bishop,King,Queen}","import {King, Rook, Pawn, Knight, Bishop, Queen } from './Pieces.js';\nimport {Position } from './Game.js'\n\nvar piece_scores = { Pawn: 1, Knight: 3, Bishop: 3.3, Rook: 5, Queen: 9.5, King: 0 }\n\n/* Turn FEN into chess position object */\nfunction ParseFen(fen) {\n    if (fen.length === 0) {\n        return \"FEN Error\";\n    }\n    let squares = Array(64).fill(null);\n    let player = null;\n    let castle_state = [0,0,0,0];\n    let en_passant_square = null;\n\n\tvar rank = 0;\n    var file = 0;\n    var piece = 0;\n    var count = 0;\n    var i = 0;  \n    var sq64 = 0;\n    var fenCnt = 0; // fen[fenCnt]\n\t\n\twhile ((rank <= 7) && fenCnt < fen.length) {\n\t    count = 1;\n\t\tswitch (fen[fenCnt]) {\n\t\t\tcase 'p': piece = new Pawn('black'); break;\n            case 'r': piece = new Rook('black'); break;\n            case 'n': piece = new Knight('black'); break;\n            case 'b': piece = new Bishop('black'); break;\n            case 'k': piece = new King('black'); break;\n            case 'q': piece = new Queen('black'); break;\n            case 'P': piece = new Pawn('white'); break;\n            case 'R': piece = new Rook('white'); break;\n            case 'N': piece = new Knight('white'); break;\n            case 'B': piece = new Bishop('white'); break;\n            case 'K': piece = new King('white'); break;\n            case 'Q': piece = new Queen('white'); break;\n\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n                piece = null;\n                count = fen[fenCnt].charCodeAt() - '0'.charCodeAt();\n                break;\n            \n            case '/':\n            case ' ':\n                rank = rank + 1;\n                file = 0;\n                fenCnt = fenCnt + 1;\n                continue;  \n            default:\n                return \"FEN error\";\n        }\n        for (i = 0; i < count; i++) {\t\n\t\t\tsq64 = rank*8 + file;            \n            squares[sq64] = piece;\n\t\t\tfile++;\n        }\n\t\tfenCnt++;\n    } // while loop end\n\t\n\t//rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\n\tplayer = (fen[fenCnt] === 'w') ? 'white' : 'black';\n    fenCnt += 2;\n\t\n\tfor (i = 0; i < 4; i++) {\n        if (fen[fenCnt] === ' ') {\n            break;\n        }\t\t\n\t\tswitch(fen[fenCnt]) {\n\t\t\tcase 'K': castle_state[0] = 1 ; break;\n\t\t\tcase 'Q': castle_state[1] = 1 ; break;\n\t\t\tcase 'k': castle_state[2] = 1 ; break;\n\t\t\tcase 'q': castle_state[3] = 1 ; break;\n\t\t\tdefault:\t     break;\n        }\n\t\tfenCnt++;\n\t}\n    fenCnt++;\t\n\t\n\tif (fen[fenCnt] !== '-') {        \n\t\tfile = fen[fenCnt].charCodeAt() - 'a'.charCodeAt();\n        rank = fen[fenCnt + 1].charCodeAt() - '1'.charCodeAt();\t\n        en_passant_square = coordinate_change((7-rank) * 8 + file);\t\n    }\n    squares = engine_squares(squares);\n    let king_locations = get_king_locations(squares);\n    let material_balance = evaluate_material(squares);\n    let position = new Position(player,squares,king_locations, castle_state,material_balance,en_passant_square);\n    set_pawn_states(position);\n    return position;\n\t\n}\n\n/* Add padding around board so moves don't wrap. Get king locations while looping. */\nfunction engine_squares(squares) {\n    let engine_squares = Array(120).fill(null);\n    let count = 0;\n    let index = 0;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y < 10; y++) {\n            /*if boundary square*/\n            index = i * 10 + y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                engine_squares[index] = 'boundary';\n            }\n            else {\n                engine_squares[index] = squares[count];\n                count = count + 1;\n            }\n        }\n    }\n    return engine_squares\n}\n/* Turn padded board back into 64 Square board */\nfunction normal_squares(engine_squares) {\n    let squares = Array(64).fill(null);\n    let count = 0;\n    let index = 0;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y < 10; y++) {\n            /*if boundary square*/\n            index = i * 10 + y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                //do nothing\n            }\n            else {\n                squares[count] = engine_squares[index];\n                count = count + 1;\n            }\n        }\n    }\n    return squares;\n}\n\nfunction get_king_locations(squares) {\n    /*White King Location & Black King location*/\n    let wk_location = null;\n    let bk_location = null;\n\n    for (var k = 0; k < squares.length; k++) {\n        let current_square = squares[k];\n        if (current_square !== null && current_square !== 'boundary') {\n            if (current_square.name === 'King') {\n                if (current_square.player === 'white') {\n                    wk_location = k;\n                }\n                else {\n                    bk_location = k;\n                }\n            }\n        }\n    }\n    let king_locations = [wk_location, bk_location]\n    return king_locations;\n}\n\nfunction inverse_coordinate_change(sq120) {\n    let sq64 = sq120 - 17 - Math.floor(sq120/10)*2\n    return sq64\n}\n\nfunction coordinate_change(sq64) {\n    let sq120 = sq64 + 21 + Math.floor(sq64/8)*2\n    return sq120\n}\n\nfunction set_pawn_states(position) {\n    let squares = position.squares;\n    for (var x = 0; x < squares.length; x++) {\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\n            let piece = squares[x];\n            if (piece.name === 'Pawn'){\n                if (piece.player === 'white') {\n                    if (x < 81) {\n                        piece.has_moved = true;\n                    }\n                }\n                else{\n                    if (x > 38) {\n                        piece.has_moved = true;\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*All evaluations with respect to white */\nfunction evaluate_material(squares) {\n    let sum_material = 0\n    for (var x = 0; x < squares.length; x ++) {\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\n            if (squares[x].player === 'white') {\n                sum_material = sum_material + piece_scores[squares[x].name];\n            }\n            else {\n                sum_material = sum_material - piece_scores[squares[x].name];\n            }\n        }\n    }\n\n    return (sum_material)\n}\n\nfunction initialize_board() {\n    var board = Array(64).fill(null)\n    for (var k = 0; k < 8; k++) {\n        board[k + 8] = new Pawn('black');\n        board[k + 48] = new Pawn('white');\n    };\n\n    var color = 'black';\n    for (var i = 0; i < 2; i++) {\n        if (i === 1) {\n            color = 'white'\n        }\n        board[i * 56] = new Rook(color);\n        board[i * 56 + 7] = new Rook(color);\n        board[i * 56 + 1] = new Knight(color);\n        board[i * 56 + 6] = new Knight(color);\n        board[i * 56 + 2] = new Bishop(color);\n        board[i * 56 + 5] = new Bishop(color);\n        board[i * 56 + 3] = new Queen(color);\n        board[i * 56 + 4] = new King(color);\n    }\n    return board\n}\n\nfunction initialize_engine_board() {\n    let board = initialize_board();\n    let engine_board = engine_squares(board);\n    return engine_board\n}\n\nfunction rand_32() {\n\n\treturn (Math.floor((Math.random()*255)+1) << 23) | (Math.floor((Math.random()*255)+1) << 16)\n\t\t | (Math.floor((Math.random()*255)+1) << 8) | Math.floor((Math.random()*255)+1);\n\n}\n\nexport {ParseFen, coordinate_change, inverse_coordinate_change, get_king_locations, normal_squares, engine_squares, evaluate_material, initialize_board, initialize_engine_board, rand_32}","import { legal_moves } from \"./EngineMoves\";\nimport { initialize_engine_board} from \"./BoardFunctions\";\n\nvar piece_scores = { Pawn: 1, Knight: 3, Bishop: 3.3, Rook: 5, Queen: 9.5, King: 0 };\n\nvar square_values = {};\nsquare_values['Pawn'] =\n   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0.02, 0.02, 0.02, 0.02, 0, 0, 0,\n    0, 0, 0, 0.02, 0.05, 0.05, 0.02, 0, 0, 0,\n    0, 0, 0, 0.02, 0.05, 0.05, 0.02, 0, 0, 0,\n    0, 0, 0, 0.02, 0.02, 0.02, 0.02, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nsquare_values['Rook'] =\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, -0.01, 0, 0.01, 0.02, 0.02, 0.01, 0, -0.01, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, -0.01, 0, 0.01, 0.02, 0.02, 0.01, -0.01, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nsquare_values['Knight'] =\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, 0,\n    0,-0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, -0.01, 0,\n    0, -0.01, 0, 0.01, 0.01, 0.01, 0.01, 0, -0.01, 0,\n    0, -0.01, 0, 0.01, 0.02, 0.02, 0.01, 0, -0.01, 0,\n    0, -0.01, 0, 0.01, 0.02, 0.02, 0.01, 0, -0.01, 0,\n    0, -0.01, 0, 0.01, 0.02, 0.02, 0.01, 0, -0.01, 0,\n    0, -0.01, 0, 0.01, 0.01, 0.01, 0.01, 0, -0.01, 0,\n    0, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, -0.01, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nsquare_values['Bishop'] =\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nsquare_values['Queen'] =\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\nsquare_values['King'] =\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0.02, 0.02, 0, 0, 0, 0, 0.02, 0.02, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0.02, 0.02, 0, 0, 0, 0, 0.02, 0.02, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n\nclass Game {\n    constructor(position, history, moves, position_key) {\n        this.position = position;\n        this.history = history;\n        this.moves = moves; \n        this.position_keys = {[position_key]: position};\n        this.position_key = position_key;\n    }\n    moves() {\n        return legal_moves(this.position);\n    }\n    make_move(move) {\n        const history = this.history.slice();\n        const moves = this.moves.slice();\n        let new_position = make_move(this.position, move);\n        this.position = new_position;\n        this.history = history.concat(new_position);\n        this.moves = moves.concat(move);\n    }\n    take_move() {\n        this.history.pop();\n        this.moves.pop();\n        this.position = this.history[this.history.length - 1]\n    }\n}\n\n/* king locations = [white king, black king]\n * castle_state = [white kingside, white queenside, black kingside, black queenside] 1 for can castle 0 for cannot castle */\nclass Position {\n    constructor(player, squares, king_locations, castle_state, material_balance, en_passant_square) {\n        this.player = player;\n        this.squares = squares;\n        this.king_locations = king_locations;\n        this.castle_state = castle_state;\n        this.material_balance = material_balance;\n        this.en_passant_square = en_passant_square;\n    }\n}\n\nclass Move {\n    constructor(start,end, en_passant, rook_start, rook_end, promotion_piece) {\n        this.start = start;\n        this.end = end;\n        this.en_passant_capture = en_passant;\n        this.rook_start = rook_start;\n        this.rook_end = rook_end;\n        this.promotion_piece = promotion_piece;\n    }\n}\n\nfunction make_move(position, move) {\n\n    let start = move.start\n    let end = move.end\n\n    /*Starting Rook Locations */\n    let wk_rook = 98;\n    let wq_rook = 91;\n    let bk_rook = 28;\n    let bq_rook = 21;\n\n    let player = position.player;\n\n    let squares = position.squares.slice();\n    let piece = JSON.parse(JSON.stringify(squares[start]));\n    let king_locations = position.king_locations.slice();\n    let castle_state = position.castle_state.slice();\n    let material_balance = position.material_balance;\n    let en_passant_square = null;\n\n    if (move.en_passant_capture !== null) {\n        squares[move.en_passant_capture] = null;\n    }\n\n    /* Pawn Just Moved Two */\n    if (piece.name === 'Pawn' && Math.abs(start - end) === 20) {\n        en_passant_square = start + (end - start) / 2;\n    }\n\n    /*Castling move*/\n    if (move.rook_start !== null) {\n        let rook = JSON.parse(JSON.stringify(squares[move.rook_start]));\n        squares[move.rook_start] = null;\n        squares[move.rook_end] = rook;\n        rook.has_moved = true;\n    }\n    /*Change King Location and Castling states*/\n    if (piece.name === 'King') {\n        if (piece.player === 'white') {\n            king_locations[0] = end\n            castle_state[0] = 0;\n            castle_state[1] = 0;\n        }\n        else {\n            king_locations[1] = end\n            castle_state[2] = 0;\n            castle_state[3] = 0;\n        }\n    }\n    /* Change castling states for first rook moves */\n    if (piece.name === 'Rook' && !piece.has_moved) {\n        if (start === wk_rook) {\n            castle_state[0] = 0;\n        }\n        else if (start === wq_rook) {\n            castle_state[1] = 0;\n        }\n        else if (start === bk_rook) {\n            castle_state[2] = 0;\n        }\n        else if (start === bq_rook) {\n            castle_state[3] = 0;\n        }\n    }\n    /* Change castling states for rook captures */\n    if (squares[end] !== null && squares[end].name === 'Rook') {\n        if (end === wk_rook) {\n            castle_state[0] = 0;\n        }\n        else if (end === wq_rook) {\n            castle_state[1] = 0;\n        }\n        else if (end === bk_rook) {\n            castle_state[2] = 0;\n        }\n        else if (end === bq_rook) {\n            castle_state[3] = 0;\n        }\n    }\n    /*Change material Balance */\n    if (material_balance !== null && squares[end] !== null) {\n        if (position.player === 'white') {\n            material_balance = material_balance + piece_scores[squares[end].name];\n        }\n        else {\n            material_balance = material_balance - piece_scores[squares[end].name];\n        }\n    }\n\n    /*Promotion */\n    if (move.promotion_piece !== null) {\n        piece = move.promotion_piece;\n        if (piece.player === 'white') {\n            material_balance = material_balance + piece_scores[piece.name] - 1;\n        }\n        else {\n            material_balance = material_balance - piece_scores[piece.name] + 1;\n        }\n    }\n\n    let location_score = square_values[piece.name][end] - square_values[piece.name][start];\n    if (piece.player === 'white') {\n        material_balance = material_balance + location_score;\n    }\n    else {\n        material_balance = material_balance - location_score;\n    }\n\n    squares[start] = null;\n    squares[end] = piece;\n    piece.has_moved = true;\n\n    (player === 'white') ? player = 'black' : player = 'white';\n\n    return new Position(player, squares, king_locations, castle_state, material_balance, en_passant_square);\n}\n\n/*This move creation function turns dragged moves from the UI into move objects */\nfunction create_move(start, end, position, promotion_piece) {\n    let squares = position.squares;\n    let piece = position.squares[start];\n    let en_passant = null;\n    let rook_start = null;\n    let rook_end = null;\n\n    /*For En passant*/\n    if (piece.name === 'Pawn') {\n        /* En Passant One way*/\n        if (Math.abs(start - end) === 9 && squares[end] === null) {\n            if (position.player === 'white') {\n                en_passant = start + 1;\n            }\n            else {\n                en_passant = start - 1;\n            }\n\n        }\n        else if (Math.abs(start - end) === 11 && squares[end] === null) {\n            if (position.player === 'white') {\n                en_passant = start - 1;\n            }\n            else {\n                en_passant = start + 1;\n            }\n        }\n    }\n\n    if (piece.name === 'King') {\n        /* kingside */\n        if ((end - start) === 2) {\n            rook_start = end + 1\n            rook_end = start + 1\n        }\n        else if ((start - end) === 2) {\n            rook_start = end - 2\n            rook_end = start - 1\n        }\n    }\n    return new Move(start, end, en_passant, rook_start, rook_end, promotion_piece)\n}\n\nfunction new_game() {\n    let position = new Position('white', initialize_engine_board(), [95, 25], [1, 1, 1, 1], 0);\n    let history = [position];\n    let moves = [];\n    return new Game(position, history, moves)\n}\n\nexport {Move, Position, make_move, create_move, Game, new_game}","/********************************************** Legal Move Generation and Checking for Engine*************************************/\nimport { Knight, Bishop, Rook, Queen } from './Pieces.js';\nimport { Move } from './Game.js';\n\n/* Return all legal moves given a position */\nfunction legal_moves(position) {\n    let squares = position.squares;\n    let player = position.player;\n    let king_location = (player === 'white') ? position.king_locations[0] : position.king_locations[1];\n    let pinned_pieces = get_pinned_pieces(squares, king_location, player);\n    let en_passant_pins = null;\n    let castle_state = position.castle_state;\n    let en_passant_square = position.en_passant_square;\n\n    if (en_passant_square !== null) {\n        en_passant_pins = pinned_en_passant(squares,en_passant_square,king_location,player);\n    }\n\n    let [attacking_pieces, attacked_squares] = king_check_squares(squares, king_location, player);\n    let in_check = (attacking_pieces.length > 0) ? true : false;\n\n    /* Only King can move in double check */\n    if (attacking_pieces.length > 1) {\n        return king_moves(squares, king_location, player, castle_state, in_check);\n    }\n    var legal_moves = [];\n\n    for (var i = 0; i < 120; i++) {\n        /* Skip empty and boundary squares */\n        if (squares[i] !== null && squares[i] !== 'boundary') {\n            /* Check for piece color and send move generation to subfunctions*/\n            if (squares[i].player === player) {\n                if (squares[i].name === 'Pawn') {\n                    legal_moves = legal_moves.concat(pawn_moves(squares, i, player, pinned_pieces, en_passant_square, en_passant_pins));\n                }\n                else if (squares[i].name === 'Knight') {\n                    legal_moves = legal_moves.concat(knight_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'Bishop') {\n                    legal_moves = legal_moves.concat(bishop_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'Rook') {\n                    legal_moves = legal_moves.concat(rook_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'Queen') {\n                    legal_moves = legal_moves.concat(rook_moves(squares, i, player, pinned_pieces));\n                    legal_moves = legal_moves.concat(bishop_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'King') {\n                    legal_moves = legal_moves.concat(king_moves(squares, i, player, castle_state, in_check));\n                }\n            }\n        }\n    }\n\n    if (attacking_pieces.length > 0) {\n        legal_moves = in_check_handler(legal_moves, king_location, attacked_squares);\n    }\n\n    return legal_moves;\n}\n\n\n/* Check if a given move is within the legal moves found */\nfunction is_legal(move, legal_moves) {\n    let is_legal = false;\n    for (var i = 0; i < legal_moves.length; i++) {\n        if (JSON.stringify(move) === JSON.stringify(legal_moves[i])) {\n            is_legal = true;\n        }\n    }\n    return is_legal;\n}\n\n/************************************************************ Piece Move Generation Functions ************************************************/\n\n/* Get legal moves for a pawn given a board position */\nfunction pawn_moves(squares, location, player, pinned_pieces, en_passant_square, en_passant_pins) {\n    let legal_moves = [];\n    let pawn = squares[location];\n\n    let forward_one = forward(1, location, player);\n    let forward_two = forward(2, location, player);\n    let left_one = left(1, location, player);\n    let right_one = right(1, location, player);\n    let diag_left = left(1, forward(1, location, player), player)\n    let diag_right = right(1, forward(1, location, player), player)\n\n    /*legal to move 2 spaces forward*/\n    if (!pawn.has_moved && squares[forward_two] === null && squares[forward_one] === null) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, forward_two, pinned_pieces, [0, 1], false, null, null));\n    }\n    /*legal to move 1 space ahead*/\n    if (squares[forward_one] === null) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, forward_one, pinned_pieces, [0, 1], false, null, null));\n    }\n    /*legal to take left*/\n    if (squares[diag_left] !== null && squares[diag_left] !== 'boundary') {\n        if (squares[diag_left].player !== player) {\n            legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_left, pinned_pieces, [-1, 1], false, null, null));\n        }\n    }\n    /*legal to take right*/\n    if (squares[diag_right] !== null && squares[diag_right] !== 'boundary') {\n        if (squares[diag_right].player !== player) {\n            legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_right, pinned_pieces, [1, 1], false, null, null));\n        }\n    }\n    /*legal to take en passant right*/\n    if (diag_right === en_passant_square) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_right, pinned_pieces, [1, 1], true, right_one, en_passant_pins));\n    }\n    /*legal to take en passant left*/\n    if (diag_left === en_passant_square) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_left, pinned_pieces, [-1, 1], true, left_one, en_passant_pins));\n    }\n\n    return legal_moves;\n}\n\n/* Get legal moves for a knight given a board position */\nfunction knight_moves(squares, location, player, pinned_pieces) {\n    let legal_moves = [];\n    /*Impossible to move pinned knight*/\n    if (location in pinned_pieces) {\n        return legal_moves;\n    }\n\n    let moves = get_knight_moves(location, player);\n\n    for (var i = 0; i < moves.length; i++) {\n        if (squares[moves[i]] === null && squares[moves[i]] !== 'boundary') {\n            legal_moves.push(make_move(location, moves[i]));\n        }\n        else if (squares[moves[i]].player !== player && squares[moves[i]] !== 'boundary') {\n            legal_moves.push(make_move(location, moves[i]));\n        }\n    }\n\n    return legal_moves;\n}\n\n/* Get legal moves for bishop given board position */\nfunction bishop_moves(squares, location, player, pinned_pieces) {\n    let legal_moves = [];\n    let bishop = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[1, 1], [-1, 1], [1, -1], [-1, -1]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n            }\n        }\n        else {\n            legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n        }\n    }\n    return legal_moves;\n}\n/* Get legal moves for a rook given a board position*/\nfunction rook_moves(squares, location, player, pinned_pieces) {\n    let legal_moves = [];\n    let rook = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[0, 1], [0, -1], [-1, 0], [1, 0]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, rook));\n            }\n        }\n        else {\n            legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, rook));\n        }\n    }\n    return legal_moves;\n}\n/* Get legal moves for a king given a board position */\nfunction king_moves(squares, location, player, castle_state, in_check) {\n    let legal_moves = [];\n\n    /* Take King off the board for calculating normal move attacking squares */\n    let king_squares = squares.slice();\n    king_squares[location] = null;\n\n    let moves = get_king_moves(location, player);\n\n    /* Regular Moves (non castling) */\n    for (var i = 0; i < moves.length; i++) {\n        /* Move to empty square */\n        if (squares[moves[i]] === null) {\n            if (!is_attacked(king_squares, moves[i], player)[0]) {\n                legal_moves.push(make_move(location, moves[i]));\n            }\n        }\n        /* Capture */\n        else if (squares[moves[i]] !== 'boundary' && squares[moves[i]].player !== player && !is_attacked(king_squares, moves[i], player)[0]) {\n            legal_moves.push(make_move(location, moves[i]));\n        }\n    }\n\n    /* Castling */\n    let white_kingside_rook = 98;\n    let white_queenside_rook = 91;\n    let black_kingside_rook = 28;\n    let black_queenside_rook = 21;\n    let white_king_start = 95;\n    let black_king_start = 25;\n\n\n    /* White Kingside */\n    if (!in_check) {\n        if (castle_state[0] === 1 && squares[white_king_start + 1] === null && squares[white_king_start + 2] === null) {\n            if (!is_attacked(squares, white_king_start + 1, player)[0] && !is_attacked(squares, white_king_start + 2, player)[0]) {\n                legal_moves.push(castle(white_king_start, white_king_start + 2, white_kingside_rook, white_kingside_rook - 2));\n            }\n        }\n        /* White Queenside */\n        if (castle_state[1] === 1 && squares[white_king_start - 1] === null && squares[white_king_start - 2] === null && squares[white_king_start - 3] === null) {\n            if (!is_attacked(squares, white_king_start - 1, player)[0] && !is_attacked(squares, white_king_start - 2, player)[0]) {\n                legal_moves.push(castle(white_king_start, white_king_start - 2, white_queenside_rook, white_queenside_rook + 3));\n            }\n        }\n        /* Black Kingside */\n        if (castle_state[2] === 1 && squares[black_king_start + 1] === null && squares[black_king_start + 2] === null) {\n            if (!is_attacked(squares, black_king_start + 1, player)[0] && !is_attacked(squares, black_king_start + 2, player)[0]) {\n                legal_moves.push(castle(black_king_start, black_king_start + 2, black_kingside_rook, black_kingside_rook - 2));\n            }\n        }\n        /* Black Queenside */\n        if (castle_state[3] === 1 && squares[black_king_start - 1] === null && squares[black_king_start - 2] === null && squares[black_king_start - 3] === null) {\n            if (!is_attacked(squares, black_king_start - 1, player)[0] && !is_attacked(squares, black_king_start - 2, player)[0]) {\n                legal_moves.push(castle(black_king_start, black_king_start - 2, black_queenside_rook, black_queenside_rook + 3));\n            }\n        }\n    }\n    return legal_moves;\n}\n\n/************************************************************* Pinned Pieces and King Checks *******************************************************************/\n\n/* Eliminate moves where king is still in check from originally checking piece.  Only for in check positions.*/\nfunction in_check_handler(legal_moves, king_location, attacked_squares) {\n    for (var i = legal_moves.length - 1; i >= 0; i--) {\n        let current_move = legal_moves[i];\n        /* If king was not moved out of check and the moved piece did not block the check or eliminate the checking piece than remove the move */\n        if (!attacked_squares.includes(current_move.end) && !attacked_squares.includes(current_move.en_passant_capture) && current_move.start !== king_location) {\n            legal_moves.splice(i, 1);\n        }\n    }\n    return legal_moves;\n}\n\n/* Check if square is under attack from a specified direction */\nfunction direction_is_attacked(squares, move_direction, start_location, player, piece_types) {\n    let end_location = direction(move_direction, start_location, player);\n    let attacking_piece = null;\n\n    while (squares[end_location] === null) {\n        end_location = direction(move_direction, end_location, player);\n    }\n    let end_piece = squares[end_location];\n    if (end_piece !== 'boundary' && end_piece.player !== player) {\n        for (var i = 0; i < piece_types.length; i++) {\n            if (piece_types[i] === end_piece.name) {\n                attacking_piece = [end_location, move_direction];\n            }\n        }\n    }\n    return attacking_piece;\n}\n/* king_check squares returns a set of squares which a player's piece must end up in to block the check or remove the checking piece */\nfunction king_check_squares(squares, king_location, player) {\n\n    let attacking_pieces = [];\n    let checked_squares = [];\n\n    let up_right = right(1, forward(1, king_location, player), player);\n    let up_left = left(1, forward(1, king_location, player), player);\n\n    let pawn_moves = [up_right, up_left];\n    let knight_moves = get_knight_moves(king_location, player);\n    let diag_directions = [[1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let straight_directions = [[0, 1], [0, -1], [-1, 0], [1, 0]];\n\n    /* get bishop/queen attack squares */\n    for (var i = 0; i < diag_directions.length; i++) {\n        let [attack_squares, attack_piece] = attacked_squares(squares, diag_directions[i], king_location, player, ['Queen', 'Bishop']);\n        if (attack_piece !== null) {\n            checked_squares = checked_squares.concat(attack_squares);\n            attacking_pieces.push(attack_piece);\n        }\n    }\n    /* Check for rook/queen attacks */\n    for (i = 0; i < straight_directions.length; i++) {\n        let [attack_squares, attack_piece] = attacked_squares(squares, straight_directions[i], king_location, player, ['Queen', 'Rook']);\n        if (attack_piece !== null) {\n            checked_squares = checked_squares.concat(attack_squares);\n            attacking_pieces.push(attack_piece);\n        }\n    }\n\n    /* Check if square is under attack by knights*/\n    for (i = 0; i < knight_moves.length; i++) {\n        let end_piece = squares[knight_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Knight') {\n                checked_squares = checked_squares.concat([knight_moves[i]]);\n                attacking_pieces.push(end_piece);\n            }\n        }\n    }\n    /* Check if square is under attack by pawns*/\n    for (i = 0; i < pawn_moves.length; i++) {\n        let end_piece = squares[pawn_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Pawn') {\n                checked_squares = checked_squares.concat([pawn_moves[i]]);\n                attacking_pieces.push(end_piece);\n            }\n        }\n    }\n\n    return [attacking_pieces, checked_squares];\n}\n\n/* Return the squares that are under attack and the piece that is attacking*/\nfunction attacked_squares(squares, move_direction, start_location, player, piece_types) {\n    let end_location = direction(move_direction, start_location, player);\n    let attacked_squares = [end_location];\n\n    while (squares[end_location] === null) {\n        end_location = direction(move_direction, end_location, player);\n        attacked_squares.push(end_location);\n    }\n    let end_piece = squares[end_location];\n    if (end_piece !== 'boundary' && end_piece.player !== player) {\n        for (var i = 0; i < piece_types.length; i++) {\n            if (piece_types[i] === end_piece.name) {\n                attacked_squares.push(end_location);\n                return [attacked_squares, end_piece];\n            }\n        }\n    }\n    return [null, null];\n}\n\n/* Check if square is under attack by opposing pieces */\nfunction is_attacked(squares, square_location, player) {\n\n    let is_attacked = false;\n    let attacking_pieces = {};\n    let attacking_piece = null;\n\n    let up_right = right(1, forward(1, square_location, player), player);\n    let up_left = left(1, forward(1, square_location, player), player);\n\n    let pawn_moves = [up_right, up_left];\n    let knight_moves = get_knight_moves(square_location, player);\n    let king_moves = get_king_moves(square_location, player);\n    let diag_directions = [[1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let straight_directions = [[0, 1], [0, -1], [-1, 0], [1, 0]];\n\n    /* check for bishop/queen attacks */\n    for (var i = 0; i < diag_directions.length; i++) {\n        attacking_piece = direction_is_attacked(squares, diag_directions[i], square_location, player, ['Queen', 'Bishop']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n    /* Check for rook/queen attacks */\n    for (i = 0; i < straight_directions.length; i++) {\n        attacking_piece = direction_is_attacked(squares, straight_directions[i], square_location, player, ['Queen', 'Rook']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n\n    /* Check if square is under attack by knights*/\n    for (i = 0; i < knight_moves.length; i++) {\n        let end_piece = squares[knight_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Knight') {\n                is_attacked = true;\n                attacking_pieces[knight_moves[i]] = 'knight_attack';\n            }\n        }\n    }\n    /* Check if square is under attack by pawns*/\n    for (i = 0; i < pawn_moves.length; i++) {\n        let end_piece = squares[pawn_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Pawn') {\n                is_attacked = true;\n                attacking_pieces[pawn_moves[i]] = 'pawn_attack';\n            }\n        }\n    }\n\n    /* Check if square is under attack by king. */\n    for (i = 0; i < king_moves.length; i++) {\n        let end_piece = squares[king_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'King') {\n                is_attacked = true;\n            }\n        }\n    }\n\n    return [is_attacked, attacking_pieces];\n}\n\n/* Get pieces which are pinned to the king */\nfunction get_pinned_pieces(squares, king_location, player) {\n    let pinned_pieces = {};\n    let pin_info = null;\n    let pinned_directions = [[0, 1], [0, -1], [-1, 0], [1, 0], [1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let pin_direction = null;\n\n    for (var x = 0; x < pinned_directions.length; x++) {\n        pin_direction = pinned_directions[x];\n        if (pin_direction[0] === 0 || pin_direction[1] === 0) {\n            pin_info = get_pinned_piece(squares, pin_direction, king_location, player, ['Queen', 'Rook']);\n        }\n        else {\n            pin_info = get_pinned_piece(squares, pin_direction, king_location, player, ['Queen', 'Bishop']);\n        }\n        if (pin_info !== null) {\n            pinned_pieces[pin_info[0]] = pin_info[1];\n        }\n    }\n    return pinned_pieces;\n}\n/* Check for a pinned piece given an attacking direction towards the king */\nfunction get_pinned_piece(squares, pin_direction, king_location, player, piece_types) {\n    let pin_location = direction(pin_direction, king_location, player);\n    let pinned_piece = null;\n    /* Go until you run into a piece or boundary */\n    while (squares[pin_location] === null) {\n        pin_location = direction(pin_direction, pin_location, player);\n    }\n\n    /* If you run into same player piece, go until you run into the next piece or boundary */\n    if (squares[pin_location] !== 'boundary' && squares[pin_location].player === player) {\n        pinned_piece = pin_location;\n        pin_location = direction(pin_direction, pin_location, player);\n        while (squares[pin_location] === null) {\n            pin_location = direction(pin_direction, pin_location, player);\n        }\n        /* Check if piece on the other end is a piece type associated with a pin */\n        if (squares[pin_location] !== 'boundary' && squares[pin_location].player !== player) {\n            for (var i = 0; i < piece_types.length; i++) {\n                if (squares[pin_location].name === piece_types[i]) {\n                    return [pinned_piece, pin_direction];\n                }\n            }\n        }\n    }\n    return null;\n}\n\nfunction pinned_en_passant(squares,en_passant_square, king_location, player) {\n    let en_passant_location = forward(1,en_passant_square);\n    let special_squares = squares.slice();\n    special_squares[en_passant_location] = null;\n\n    return get_pinned_pieces(special_squares, king_location, player)\n}\n\n/****************************************************** Move Checking/Exploring and Board Navigating Helper Functions *********************************************************/\n\n/* Given a possible pawn move check if the move is legal and add the move */\nfunction create_pawn_move(pawn, pawn_location, pawn_end_location, pinned_pieces, move_direction, is_en_passant, en_passant_capture, en_passant_pins) {\n    let legal_moves = [];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    if (pawn_location in pinned_pieces) {\n        pin_direction = pinned_pieces[pawn_location];\n        inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n\n        /* Can only move towards King or away from king when pinned */\n        if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\n            if (is_en_passant) {\n                legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\n            }\n            else {\n                legal_moves.push(make_move(pawn_location, pawn_end_location));\n            }\n        }\n    }\n    else {\n        if (is_en_passant) {\n            if (pawn_location in en_passant_pins) {\n                pin_direction = en_passant_pins[pawn_location];\n                inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n                if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\n                    legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\n                }\n            }\n            else {\n                legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\n            }\n        }\n        else {\n            /*Handle Promotions*/\n            if (pawn_end_location >= 91 || pawn_end_location <= 28) {\n                let knight_piece = new Knight(pawn.player);\n                let bishop_piece = new Bishop(pawn.player);\n                let rook_piece = new Rook(pawn.player);\n                let queen_piece = new Queen(pawn.player);\n\n                let pieces = [knight_piece, bishop_piece, rook_piece, queen_piece];\n\n                for (var k = 0; k < pieces.length; k++) {\n                    legal_moves.push(promote(pieces[k], pawn_location, pawn_end_location));\n                }\n            }\n            else {\n                legal_moves.push(make_move(pawn_location, pawn_end_location));\n            }\n        }\n    }\n    return legal_moves;\n}\n\n/* Get possible moves and captures for rooks, queens, and bishops (straight pieces) with respect to direction */\nfunction moves_and_captures(squares, move_direction, start_location, player, piece) {\n    let legal_moves = [];\n    let end_location = direction(move_direction, start_location, player);\n\n    while (squares[end_location] === null) {\n        legal_moves.push(make_move(start_location, end_location));\n        end_location = direction(move_direction, end_location, player);\n    }\n    if (squares[end_location] !== 'boundary' && squares[end_location].player !== player) {\n        legal_moves.push(make_move(start_location, end_location));\n    }\n    return legal_moves;\n}\n/* Get Knight move directions */\nfunction get_knight_moves(location, player) {\n\n    let up_right = right(1, forward(2, location, player), player);\n    let up_left = left(1, forward(2, location, player), player);\n    let down_right = right(1, back(2, location, player), player);\n    let down_left = left(1, back(2, location, player), player);\n    let right_up = right(2, forward(1, location, player), player);\n    let right_down = right(2, back(1, location, player), player);\n    let left_up = left(2, forward(1, location, player), player);\n    let left_down = left(2, back(1, location, player), player);\n\n    let moves = [up_right, up_left, down_right, down_left, right_up, right_down, left_up, left_down];\n    return moves;\n}\n/* Get King move directions */\nfunction get_king_moves(location, player) {\n\n    let up = forward(1, location, player);\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let move_left = left(1, location, player);\n    let move_right = right(1, location, player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let down = back(1, location, player);\n\n    let moves = [up, up_right, up_left, move_left, move_right, down_right, down_left, down];\n    return moves;\n}\n\n/* Standard move making.  Set start square to null and end square to piece value */\nfunction make_move(start, end) {\n\n    let move = new Move(start, end, null, null, null, null)\n    return move;\n}\n/* Function Promote */\nfunction promote(piece, start, end) {\n\n    let move = new Move(start, end, null, null, null, piece)\n    return move;\n}\n/* Castling Requires special move making */\nfunction castle(king_start, king_end, rook_start, rook_end) {\n    let move = new Move(king_start, king_end, null, rook_start, rook_end, null);\n    return move;\n}\n/* En Passant requires special move making */\nfunction en_passant(start, end, captured_location) {\n    let move = new Move(start, end, captured_location, null, null, null);\n    return move;\n}\n\n/* Abstact away difference between black and white moves. All from perspective of player. */\nfunction direction(directions, location, player) {\n    let x = directions[0];\n    let y = directions[1];\n\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let up = forward(1, location, player);\n    let down = back(1, location, player);\n    let move_right = right(1, location, player);\n    let move_left = left(1, location, player);\n\n    if (x === 0 && y === 1) {\n        return up;\n    }\n    else if (x === -1 && y === 1) {\n        return up_left;\n    }\n    else if (x === 1 && y === 1) {\n        return up_right;\n    }\n    else if (x === 1 && y === 0) {\n        return move_right;\n    }\n    else if (x === -1 && y === 0) {\n        return move_left;\n    }\n    else if (x === 1 && y === -1) {\n        return down_right;\n    }\n    else if (x === -1 && y === -1) {\n        return down_left;\n    }\n    else if (x === 0 && y === -1) {\n        return down;\n    }\n}\n\nfunction forward(distance, location, player) {\n    if (player === 'white') {\n        return location - 10 * distance;\n    }\n    else {\n        return location + 10 * distance;\n    }\n}\nfunction back(distance, location, player) {\n    if (player === 'white') {\n        return location + 10 * distance;\n    }\n    else {\n        return location - 10 * distance;\n    }\n}\nfunction left(distance, location, player) {\n    if (player === 'white') {\n        return location - distance;\n    }\n    else {\n        return location + distance;\n    }\n}\nfunction right(distance, location, player) {\n    if (player === 'white') {\n        return location + distance;\n    }\n    else {\n        return location - distance;\n    }\n}\n\n\nexport { legal_moves, is_legal, is_attacked}\n","import { legal_moves } from './EngineMoves';\nimport { make_move } from './Game';\n\nvar INFINITY = 10000;\nvar CHECKMATE = 9000;\n\nvar start_time = null;\n//var best_moves = {};\nvar time_limit = null;\nvar depth_searched = null;\nvar time_cutoff = false;\nvar total_positions = null;\n\nfunction set_variables(max_time) {\n    start_time = performance.now();\n    //best_moves = {};\n    time_limit = max_time;\n    depth_searched = 0;\n    time_cutoff = false;\n    total_positions = 0;\n}\n\nfunction alphabeta(position, depth, alpha, beta) {\n    if (depth === 0) {\n        return { value: score_position(position), move: null};\n    }\n    let moves = legal_moves(position);\n    total_positions = total_positions + moves.length;\n    //Checkmate\n    if (moves.length === 0) {\n        if (position.player === 'white') {\n            return {value: -CHECKMATE, move: null};\n        }\n        else {\n            return {value: CHECKMATE, move: null};\n        }\n    }\n    if (time_cutoff) {\n        return {value: 0, move: null};\n    }\n\n    if (position.player === 'white') {\n        let value = -INFINITY;\n        let top_move = null;\n        for (var x = 0; x < moves.length; x ++) {\n            let current_move = moves[x];\n            let current_position = make_move(position, current_move);\n            value = Math.max(value, alphabeta(current_position, depth - 1, alpha, beta).value);\n            if (value > alpha) {\n                alpha = value;\n                //best_moves[] = best_moves[depth].concat(current_move);\n                top_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        if ((performance.now() - start_time) >= time_limit ) {\n            time_cutoff = true;\n            return {value:0,move:null};\n        }\n        return {value: value, move:top_move};\n    }\n    else {\n        let value = INFINITY;\n        let top_move = null;\n        for (var k = 0; k < moves.length; k ++) {\n            let current_move = moves[k];\n            let current_position = make_move(position, current_move);\n            value = Math.min(value, alphabeta(current_position, depth - 1, alpha, beta).value);\n            if (value < beta) {\n                beta = value;\n                //best_moves[depth] = best_moves[depth].concat(current_move);\n                top_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        if ((performance.now() - start_time) >= time_limit ) {\n            time_cutoff = true;\n            return {value:0,move:null};\n\n        }\n        return {value: value, move: top_move};\n    }\n}\n// Alpha Beta using Game Object\nfunction game_alphabeta(game, depth, alpha, beta) {\n    let position = game.position;\n    if (depth === 0) {\n        return { value: score_position(position), move: null};\n    }\n    let moves = legal_moves(position);\n    //Checkmate\n    if (moves.length === 0) {\n        if (position.player === 'white') {\n            return {value: -CHECKMATE, move: null};\n        }\n        else {\n            return {value: CHECKMATE, move: null};\n        }\n    }\n    if (time_cutoff) {\n        return {value: 0, move: null};\n    }\n\n    if (position.player === 'white') {\n        let value = -INFINITY;\n        let top_move = null;\n        for (var x = 0; x < moves.length; x ++) {\n            let current_move = moves[x];\n            game.make_move(current_move);\n            value = Math.max(value, game_alphabeta(game, depth - 1, alpha, beta).value);\n            game.take_move();\n            if (value > alpha) {\n                alpha = value;\n                //best_moves[] = best_moves[depth].concat(current_move);\n                top_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        if ((performance.now() - start_time) >= time_limit ) {\n            time_cutoff = true;\n            return {value:0,move:null};\n        }\n        return {value: value, move:top_move};\n    }\n    else {\n        let value = INFINITY;\n        let top_move = null;\n        for (var k = 0; k < moves.length; k ++) {\n            let current_move = moves[k];\n            game.make_move(current_move);\n            value = Math.min(value, game_alphabeta(game, depth - 1, alpha, beta).value);\n            game.take_move();\n            if (value < beta) {\n                beta = value;\n                //best_moves[depth] = best_moves[depth].concat(current_move);\n                top_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        if ((performance.now() - start_time) >= time_limit ) {\n            time_cutoff = true;\n            return {value:0,move:null};\n\n        }\n        return {value: value, move: top_move};\n    }\n}\n\n/*Give Max Depth and max search time*/\nfunction alphabeta_search(position, max_depth, max_time) {\n    set_variables(max_time);\n    let value_move = {value: 0, move: null};\n    for (var depth = 1; depth <= max_depth; depth++) {\n        let search_move = alphabeta(position,depth,-INFINITY, INFINITY);\n\n        if (search_move.move !== null) {\n            value_move = search_move\n            depth_searched = depth\n        }\n    }\n    console.log(\"depth searched:\", depth_searched, \"total positions:\", total_positions)\n    return value_move;\n}\n\n/*Give Max Depth and max search time*/\nfunction game_alphabeta_search(game, max_depth, max_time) {\n    set_variables(max_time);\n    let value_move = {value: 0, move: null};\n    for (var depth = 1; depth <= max_depth; depth++) {\n        let search_move = game_alphabeta(game,depth,-INFINITY, INFINITY);\n\n        if (search_move.move !== null) {\n            value_move = search_move\n            depth_searched = depth\n        }\n    }\n    console.log(\"depth searched:\", depth_searched)\n    return value_move;\n}\n\n/* Breadth First Search.*/\nfunction breadth_search(depth, positions) {\n    if (depth === 0) {\n        return positions;\n    }\n    else {\n        let new_positions = [];\n        for (var j = 0; j < positions.length; j++) {\n            let current_position = positions[j];\n            let moves = legal_moves(current_position);\n\n            for (var i = 0; i < moves.length; i++) {\n                let current_move = moves[i];\n                let next_position = make_move(current_position, current_move)\n                new_positions.push(next_position);\n            }\n        }\n        return breadth_search(depth - 1, new_positions);\n    }\n}\n\nfunction score_position(position) {\n    let score = position.material_balance;\n    return score;\n}\n\nexport {alphabeta_search, alphabeta, breadth_search, game_alphabeta_search}","import { Game } from './Game';\nimport { initialize_engine_board } from './BoardFunctions';\nimport { legal_moves } from './EngineMoves';\nimport { make_move, Position } from './Game';\nimport { is_attacked } from './EngineMoves'\n\nvar INFINITY = 10000;\nvar CHECKMATE = 9000;\nvar best_weights = { Pawn: 0, Knight: 0, Bishop: 0, Rook: 0, Queen: 0, King: 0};\nvar genetic_weights = null;\nvar learn_rate = 1;\n\nfunction train() {\n    let initial_position = new Position('white', initialize_engine_board(), [95, 25], [1, 1, 1, 1], 0);\n    evolve_weights();\n    let num_games = 50;\n    let net_score = 0;\n    learn_rate = 1; \n\n    for (var k = 0; k < num_games; k++) {\n        /*Initialize Chess game and make two random moves to introduce variation*/\n        let chess_game = new Game(initial_position, [initial_position], []);\n        let moves = legal_moves(chess_game.position);\n        let move = moves[Math.floor(Math.random() * moves.length)];\n        chess_game.make_move(move);\n        moves = legal_moves(chess_game.position);\n        move = moves[Math.floor(Math.random() * moves.length)];\n        chess_game.make_move(move);\n\n        let game_result = play_game(chess_game)\n        net_score = net_score + game_result.result;\n    }\n    console.log(net_score, best_weights, genetic_weights);\n    if (net_score > 3) {\n        learn_rate = learn_rate / 2;\n        best_weights = genetic_weights\n        evolve_weights();\n    }\n}\n\nfunction evolve_weights() {\n    let new_weights = {};\n    /* add noise to best_weights */\n    let max = 0; \n    for (var key in best_weights) {\n        new_weights[key] = best_weights[key] + (Math.random()-0.5) * learn_rate;\n        if (Math.abs(new_weights[key]) > max) {\n            max = Math.abs(new_weights[key])\n        }\n    }\n    /*Normalize new Weights*/\n    for (key in new_weights) {\n        new_weights[key] = new_weights[key] / max;\n    }\n    genetic_weights = new_weights;\n}\n\nfunction play_game(chess_game) {\n    let alphabeta_result = null;\n    let score = 0; \n    let result = 0;\n    while (chess_game.history.length < 100) {\n        if (chess_game.position.player === 'white') {\n            alphabeta_result = alphabeta(chess_game.position, 1, -INFINITY, INFINITY, 'base');\n        }\n        else {\n            alphabeta_result = alphabeta(chess_game.position, 1, -INFINITY, INFINITY, 'genetic');\n        }\n        score = alphabeta_result.value\n        let move = alphabeta_result.move\n        if (Math.abs(score) < 1000) {\n            chess_game.make_move(move);\n        }\n        else {\n            break;\n        }\n    }\n    if (score === 9000) {\n        result = -1\n    }\n    else if (score === -9000) {\n        result = 1;\n    }\n    return { result: result, weights: genetic_weights };\n}\n\nfunction genetic_evaluation(position) {\n    let squares = position.squares;\n    let score = 0;\n    for (var x = 0; x < squares.length; x++) {\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\n            let piece = squares[x];\n            if (piece.player === 'white') {\n                score = score + genetic_weights[piece.name];\n            }\n            else {\n                score = score - genetic_weights[piece.name];\n            }\n        }\n    }\n    return score;\n}\n\nfunction base_evaluation(position) {\n    let squares = position.squares;\n    let score = 0;\n    for (var x = 0; x < squares.length; x++) {\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\n            let piece = squares[x];\n            if (piece.player === 'white') {\n                score = score + best_weights[piece.name];\n            }\n            else {\n                score = score - best_weights[piece.name];\n            }\n        }\n    }\n    return score;\n}\n\nfunction alphabeta(position, depth, alpha, beta, evaluation) {\n    if (depth === 0) {\n        if (evaluation === 'genetic') {\n            return { value: genetic_evaluation(position), move: null };\n        }\n        else {\n            return { value: base_evaluation(position), move: null };\n        }\n    }\n    let moves = legal_moves(position);\n    //Checkmate Stalemate\n    if (moves.length === 0) {\n        let in_check = false;\n        if (!in_check) {\n            return { value: 0, move: null };\n        }\n        else if (position.player === 'white') {\n            in_check = is_attacked(position.squares, position.king_locations[0], position.player)[0];\n            return { value: -CHECKMATE, move: null };\n        }\n        else {\n            in_check = is_attacked(position.squares, position.king_locations[1], position.player)[0];\n            return { value: CHECKMATE, move: null };\n        }\n    }\n    if (position.player === 'white') {\n        let value = -INFINITY;\n        let top_move = null;\n        for (var x = 0; x < moves.length; x++) {\n            let current_move = moves[x];\n            let current_position = make_move(position, current_move);\n            value = Math.max(value, alphabeta(current_position, depth - 1, alpha, beta, evaluation).value);\n            if (value > alpha) {\n                alpha = value;\n                top_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        return { value: value, move: top_move };\n    }\n    else {\n        let value = INFINITY;\n        let top_move = null;\n        for (var k = 0; k < moves.length; k++) {\n            let current_move = moves[k];\n            let current_position = make_move(position, current_move);\n            value = Math.min(value, alphabeta(current_position, depth - 1, alpha, beta, evaluation).value);\n            if (value < beta) {\n                beta = value;\n                top_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        return { value: value, move: top_move };\n    }\n}\n\nexport {play_game, train}","import React, { Component } from 'react';\nimport './App.css';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport ReactPiece from './DragPiece';\nimport DropSquare from './DropSquare';\nimport { Knight, Bishop, Rook, Queen} from './Pieces';\nimport { legal_moves, is_legal} from './EngineMoves';\nimport {normal_squares,coordinate_change, ParseFen} from './BoardFunctions';\nimport { create_move, Game, new_game} from './Game';\nimport { alphabeta_search } from './Search';\n//import { game_test, perft_test } from './Tests';\nimport { train } from './Evaluation.js';\n\nclass Chess extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      game: new_game(),\n      drag_end: null,\n      promotion:{class:'hidden',start: null, end: null, player: null},\n      status:null,\n      click_start: null\n    }\n  }\n  train() {\n    const game = this.state.game\n    //perft_test(position,4);\n    train(game);\n  };\n\n  reset() {\n    this.setState({\n      game: new_game(),\n      drag_end: null,\n      promotion:{class:'hidden',start: null, end: null, player: null},\n      status:null\n    });\n  }\n  back() {\n    const game = this.state.game\n    if (game.history.length <= 1){\n      return;\n    }\n    game.take_move();\n    this.setState({\n      game: game,\n      status:null\n    });\n    }\n\n  setup_fen(value) {\n      let position = ParseFen(value);\n      if (position !== 'FEN Error') {\n          let game = new Game(position, [], []);\n          this.setState({\n              game: game,\n              drag_end: null,\n              promotion: { class: 'hidden', start: null, end: null, player: null },\n              status: null\n          });\n      }\n      else {\n          alert('FEN ERROR');\n      }\n  }\n\n  engine_move() {\n    const game = this.state.game\n    let position = game.position;\n    //Time in milliseconds\n    let search_time = 1000;\n    let engine_move = alphabeta_search(position,10,search_time);\n    //console.log(engine_move.value)\n\n    if (engine_move.move === null) {\n        this.setState({\n            status: 'Game Over',\n        });\n        return;\n    }\n    game.make_move(engine_move.move);\n\n    this.setState({\n        game: game,\n    })\n  }\n\n  handle_drop(id) {\n    this.setState({drag_end: id});\n  }\n\n  handle_click_start(id) {\n    let start_square = coordinate_change(id);\n    this.setState({click_start: start_square});\n  }\n\n  handle_click_end(id) {\n    const game = this.state.game;\n    const position = game.position;\n    const click_start = this.state.click_start;\n\n    let piece = position.squares[click_start];\n    let click_end = coordinate_change(id);\n\n    if ((click_end <= 28 || click_end >= 91) && piece.name === 'Pawn'){\n      let promotion = {class:'promotion_container',start: click_start, end: click_end, player: position.player}\n      this.setState({promotion:promotion})\n      return;\n    }\n    else {\n      this.change_states(game, click_start, click_end, null);\n    }\n  }\n\n  handle_drag_end(id) {\n    const game = this.state.game;\n    const position = game.position;\n\n    let drag_start = coordinate_change(id);\n    let drag_end = coordinate_change(this.state.drag_end);\n    let piece = position.squares[drag_start];\n    /* promotions */\n    if ((drag_end <= 28 || drag_end >= 91) && piece.name === 'Pawn'){\n      let promotion = {class:'promotion_container',start: drag_start, end: drag_end, player: position.player}\n      this.setState({promotion:promotion})\n      return;\n    }\n    this.change_states(game, drag_start, drag_end, null);\n  };\n\n  handle_promotion(piece) {\n    const game = this.state.game;\n    const promotion = this.state.promotion;\n\n    let start = promotion['start'];\n    let end = promotion['end'];\n\n    this.change_states(game, start, end, piece)\n\n    this.setState({\n      promotion:{class:'hidden',start: null, end: null, player: null}\n    });\n  }\n\n  change_states(game, start, end, promotion_piece) {\n      let possible_moves = legal_moves(game.position);\n      let move = create_move(start, end, game.position, promotion_piece);\n      let status = null;\n\n      if (is_legal(move, possible_moves)) {\n        game.make_move(move);\n        let new_moves = legal_moves(game.position);\n    \n        if (new_moves.length === 0) {\n            status = 'Game Over'\n        }\n        setTimeout( () => {\n          this.setState({\n            game: game,\n            drag_end: null,\n            status: status,\n          })\n        }, 10);\n        if (game.position.player === 'black') {\n          setTimeout(this.engine_move.bind(this), 50);\n        }\n    }\n  }\n\n    render() {\n    const game = this.state.game;\n    let current_position = game.position\n    let current_squares = normal_squares(current_position.squares);\n    let player = current_position.player;\n    let promotion_class = this.state.promotion['class'];\n    //let status = this.state.status;\n\n    return (\n    <div className = 'game_container'>\n      <Buttons \n      back = {() => this.back()}\n      reset = {() => this.reset()}\n      engine_move = {() => this.engine_move()}\n      train = {() => this.train()}\n      />\n      <div className = 'board_container' >\n        <Board \n          squares = {current_squares}\n          onDrop = {(id) => this.drop(id)}\n          player = {player}\n          handle_drop={(id) => this.handle_drop(id)}\n          handle_drag_end = {(id) => this.handle_drag_end(id)}\n          handle_click_start = {(id) => this.handle_click_start(id)}\n          handle_click_end = {(id) => this.handle_click_end(id)}\n        />\n      </div>\n      <FenPosition\n      setup_fen={(value) => this.setup_fen(value)}\n      />\n      <Promotion\n        className = {promotion_class}\n        player = {player}\n        handle_promotion = {(piece) => this.handle_promotion(piece)}\n      />\n    </div>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  renderSquares() {\n    var html_board = [];\n    var color = false;\n    for (var i = 0; i < 8; i ++){\n    color = !color;\n    var html_row = [];\n      for (var k = 0; k < 8; k ++){\n        let id = i*8 + k\n        let current_square = <Square \n          value={this.props.squares[id]} \n          key={id} \n          color={color} \n          player = {this.props.player}\n          id = {id}\n          handle_drop={() => this.props.handle_drop(id)}\n          handle_drag_end = {(id) => this.props.handle_drag_end(id)}\n          handle_click_start = {() => this.props.handle_click_start(id)}\n          handle_click_end = {() => this.props.handle_click_end(id)}\n        />;\n        html_row.push(current_square);\n        color = !color\n      }\n      html_row = <div className = \"board_row\" key = {i}> {html_row} </div>\n      html_board.push(html_row)\n    }\n    return html_board\n  }\n  render() {\n  return (\n    <div>\n    {this.renderSquares()}\n    </div>\n  );\n  }\n}\n\nclass Square extends React.Component {\n    renderSquare(color) {\n        var class_name = \"dark square\"\n        var style = null;\n        var url = null;\n        var player = null;\n\n        if (color) {\n            class_name = \"light square\"\n        }\n        if (this.props.value) {\n            style = this.props.value.style;\n            url = this.props.value.url;\n            player = this.props.value.player;\n        }\n        if (this.props.player === player) {\n          return (\n          <div className={class_name}>\n            <ReactPiece \n              url={url} \n              id = {this.props.id}\n              handle_drag_end = {(id) => this.props.handle_drag_end(id)}\n              handle_click_start = {() => this.props.handle_click_start()}\n            /> \n          </div> );\n        }\n        else {\n            return (\n            <DropSquare \n              class_name={class_name} \n              style={style} \n              handle_drop={() => this.props.handle_drop()}\n              handle_click_end = {() => this.props.handle_click_end()}\n            /> );\n        }\n    }\n\n  render() {\n    var color = this.props.color;\n    return (\n    <React.Fragment>\n      {this.renderSquare(color)}\n    </React.Fragment>\n    );\n  }\n}\n\nfunction Buttons(props) {\n  return (\n   <div className = 'button_container'>\n      <button \n      className = \"button_element\" \n      onClick={() => props.reset()} > Reset\n      </button>\n      <button \n      className = \"button_element\"  \n      onClick={() => props.back()} > Back \n      </button>\n      <button \n      className = \"button_element\" \n      onClick={() => props.engine_move()} > Engine Move\n      </button>\n    </div>\n  );\n} \n\nclass FenPosition extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: '' };\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    submit(event) {\n        event.preventDefault();\n        this.props.setup_fen(this.state.value);\n    }\n\n    render() {\n    return (\n        <form onSubmit={(event) => this.submit(event)} className='fen_input'>\n            <label>\n                FEN String: &nbsp;\n              <input type=\"text\" className = 'input_box' value={this.state.value} onChange={(event) => this.handleChange(event)} />\n            </label>\n            <input type=\"submit\" className = 'input_button' value=\"Set Position\" />\n        </form>\n    );\n    }\n\n}\n\nclass Promotion extends React.Component {\n  render(){\n    let knight_piece = new Knight(this.props.player);\n    let bishop_piece = new Bishop(this.props.player);\n    let rook_piece = new Rook(this.props.player);\n    let queen_piece = new Queen(this.props.player);\n\n    return (\n      <div className = {this.props.className}>\n        <div className=\"promotion\">\n            <button className = {\"promotion_button\"} style = {knight_piece.style} onClick={() => this.props.handle_promotion(knight_piece)}></button>\n            <button className = {\"promotion_button\"} style = {bishop_piece.style} onClick={() => this.props.handle_promotion(bishop_piece)}></button>\n            <button className = {\"promotion_button\"} style = {rook_piece.style} onClick={() => this.props.handle_promotion(rook_piece)}></button>\n            <button className = {\"promotion_button\"} style = {queen_piece.style} onClick={() => this.props.handle_promotion(queen_piece)}></button>\n        </div>\n      </div>\n    );\n  }\n} \n\n\nexport default DragDropContext(HTML5Backend)(Chess);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}