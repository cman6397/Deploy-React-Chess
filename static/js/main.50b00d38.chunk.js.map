{"version":3,"sources":["Constants.js","DragPiece.js","DropSquare.js","Pieces.js","ChessMoves.js","Engine.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","ReactPiece","_this","this","img","Image","src","props","url","onload","connectDragPreview","_this$props","connectDragSource","isDragging","react_default","a","createElement","className","alt","style","opacity","cursor","React","Component","DragSource","beginDrag","id","endDrag","monitor","component","didDrop","item","getItem","handle_drag_end","connect","dragSource","dragPreview","DropSquare","class_name","connectDropTarget","DropTarget","drop","handle_drop","dropTarget","isOver","Piece","player","img_url","name","Object","classCallCheck","backgroundImage","has_moved","Pawn","possibleConstructorReturn","getPrototypeOf","call","just_moved_two","Rook","Knight","Bishop","Queen","King","initialize_board","board","Array","fill","k","color","i","legal_moves","squares","_engine_squares","engine_squares","_engine_squares2","slicedToArray","boundary_squares","white_king_location","black_king_location","king_location","pinned_pieces","pin_info","pinned_directions","pin_direction","x","length","get_pinned_piece","get_pinned_pieces","_is_attacked","is_attacked","_is_attacked2","in_check","attacking_pieces","status","keys","king_moves","legal_boards","concat","pawn_moves","knight_moves","bishop_moves","rook_moves","attacking_piece","attacking_piece_location","move_direction","piece_types","splice","direction_is_attacked","in_check_handler","location","pawn","forward_one","forward","forward_two","left_one","left","right_one","right","diag_left","diag_right","pinned_pawn_move","knight","moves","get_knight_moves","push","make_move","bishop","inverse_direction","toString","moves_and_captures","rook","king","king_squares","slice","get_king_moves","white_king_start","castle","white_kingside_rook","black_king_start","black_kingside_rook","white_queenside_rook","black_queenside_rook","start_location","end_location","direction","end_piece","square_location","diag_directions","straight_directions","pin_location","pinned_piece","pawn_location","pawn_end_location","is_en_passant","en_passant_capture","en_passant","pieces","piece","back","start","end","standard","king_start","king_end","rook_start","rook_end","captured_location","directions","y","up_right","up_left","down_right","down_left","up","down","move_right","move_left","distance","count","index","squares_repr","squares_rep","make_engine_move","squares64","move","JSON","parse","stringify","normal_squares","Chess","state","history","drag_end","promotion","class","setState","pop","engine_moves","possible_moves","new_squares","Math","floor","random","drag_start","piece_copy","change_states","abs","is_legal","_this2","boards","current_squares","promotion_class","Buttons","reset","engine_move","App_Board","onDragStart","onDragEnd","onDrop","App_Promotion","handle_promotion","Board","_this3","html_board","html_row","_loop","current_square","App_Square","value","key","renderSquares","Square","_this4","DragPiece","src_DropSquare","Fragment","renderSquare","onClick","Promotion","_this5","knight_piece","bishop_piece","rook_piece","queen_piece","DragDropContext","HTML5Backend","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50b00d38.chunk.js","sourcesContent":["export const ItemTypes = {\n  PIECE: 'piece'\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from './Constants';\nimport { DragSource } from 'react-dnd';\nimport './App.css';\n\nconst pieceSource = {\n  beginDrag(props) {\n    const item = { id: props.id };\n    return item;\n  },\n  endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      //Decided not to move piece maybe\n      return;\n    }\n    const item = monitor.getItem();\n    return props.handle_drag_end(item.id);\n  }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    };\n}\n\nclass ReactPiece extends React.Component {\n  componentDidMount() {\n    const img = new Image(46, 46);\n    img.src = this.props.url;\n    img.onload = () => this.props.connectDragPreview(img);\n  }\n  render() {\n    var url = this.props.url\n    const { connectDragSource, isDragging } = this.props;\n    return connectDragSource(\n    <div className = \"piece_container\">\n      <img src={url} alt ='' className = \"react_piece\" style={{\n        opacity: 1,\n        cursor: isDragging ? 'grabbing' : 'grab'\n      }}>\n      </img>\n    </div>\n    );\n  }\n  }\n\nReactPiece.propTypes = {\n  connectDragSource: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired\n};\n\nexport default DragSource(ItemTypes.PIECE, pieceSource, collect)(ReactPiece);\n\n\n\n\n\n\n\n","import React from 'react';\nimport { ItemTypes } from './Constants';\nimport { DropTarget } from 'react-dnd';\nimport './App.css';\n\nconst squareTarget = {\n    drop(props) {\n      return props.handle_drop();\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n      connectDropTarget: connect.dropTarget(),\n      isOver: monitor.isOver()\n    };\n}\n\nclass DropSquare extends React.Component {\n    render() {\n        var style = this.props.style;\n        var class_name = this.props.class_name;\n        const connectDropTarget = this.props.connectDropTarget;\n        return connectDropTarget(\n            <div className={class_name} style={style}> </div>\n        )\n    }\n}\n  \n\nexport default DropTarget(ItemTypes.PIECE, squareTarget, collect)(DropSquare);","class Piece {\n  constructor(player, img_url, name){\n    this.player = player;\n    this.style = {backgroundImage: \"url('\"+img_url+\"')\"};\n    this.name = name;\n    this.url = img_url;\n    this.has_moved = false;\n  }\n}\n\nclass Pawn extends Piece {\n  constructor(player){\n    var url='https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg'\n    if (player === 'black') {\n        url = 'https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg'\n    }\n    super(player, url, 'Pawn');\n    this.just_moved_two = false;\n  }\n}\n\nclass Rook extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg'\n        }\n        super(player, url, 'Rook');\n    }\n}\n\nclass Knight extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg'\n        }\n        super(player, url, 'Knight')\n    }\n}\n\nclass Bishop extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg'\n        }\n        super(player, url, 'Bishop')\n    }\n}\n\nclass Queen extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg'\n        }\n        super(player, url, 'Queen')\n    }\n}\n\nclass King extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg'\n        }\n        super(player, url, 'King')\n    }\n}\n/*This move generation function is for the UI and it interprets the mouse moves not egine moves */\nfunction make_move(start, end, squares, piece) {\n\n    /*For En passant*/\n    if (piece.name === 'Pawn') {\n        if (Math.abs(start - end) === 16) {\n            piece.just_moved_two = true;\n\t\t\t\t}\n        else {\n            piece.just_moved_two = false;\n            /* En Passant.  Remove pawn to the direct left or right when en passant criteria is satisfied.*/\n            if (Math.abs(start - end) === 7 && squares[end] === null) {\n                if (piece.player === 'white') {\n                    squares[start + 1] = null;\n                }\n                else {\n                    squares[start - 1] = null;\n                }\n            }\n            else if (Math.abs(start - end) === 9 && squares[end] === null) {\n                if (piece.player === 'white') {\n                    squares[start - 1] = null;\n                }\n                else {\n                    squares[start + 1] = null;\n                }\n            }\n        }\n    }\n    /* For Castling */\n    if (piece.name === 'King') {\n        /* kingside */\n        if ((end - start) === 2) {\n            squares[start + 1] = squares[end + 1];\n            squares[end + 1] = null\n        }\n        else if ((start - end) === 2) {\n            squares[start - 1] = squares[end - 2];\n            squares[end - 2] = null\n        }\n    }\n    squares[start] = null;\n    squares[end] = piece;\n    piece.has_moved = true;\n}\n\nfunction initialize_board() {\n    var board = Array(64).fill(null)\n    for (var k = 0; k < 8; k++) {\n        board[k + 8] = new Pawn('black');\n        board[k + 48] = new Pawn('white');\n    };\n\n    var color = 'black';\n    for (var i = 0; i < 2; i++) {\n        if (i === 1) {\n            color = 'white'\n        }\n        board[i * 56] = new Rook(color);\n        board[i * 56 + 7] = new Rook(color);\n        board[i * 56 + 1] = new Knight(color);\n        board[i * 56 + 6] = new Knight(color);\n        board[i * 56 + 2] = new Bishop(color);\n        board[i * 56 + 5] = new Bishop(color);\n        board[i * 56 + 3] = new Queen(color);\n        board[i * 56 + 4] = new King(color);\n    }\n    return board\n}\n\nexport {Pawn,Rook,Knight,Bishop,King,Queen, initialize_board, make_move}","/********************************************** Legal Move Generation and Checking *************************************/\nimport {Knight, Bishop, Rook, Queen } from './Pieces.js';\n\n/* Return all legal moves given a board position and the player to move (white or black) */\nfunction legal_moves(squares, player) {\n    let [boundary_squares, white_king_location, black_king_location] = engine_squares(squares,player);\n    let king_location = (player === 'white') ? white_king_location : black_king_location;\n    let pinned_pieces = get_pinned_pieces(boundary_squares, king_location, player);\n    let [in_check, attacking_pieces] = is_attacked(boundary_squares, king_location, player);\n    let status = null;\n    /* Only King can move in double check */\n    if (in_check && Object.keys(attacking_pieces).length > 1) {\n        return king_moves(boundary_squares, king_location, player);\n    }\n    var legal_boards = [];\n\n    for (var i = 0; i < 120; i++) {\n        /* Skip empty and boundary squares */\n        if (boundary_squares[i] !== null && boundary_squares[i] !== 'boundary') {\n            /* Check for piece color and send move generation to subfunctions*/\n            if (boundary_squares[i].player === player){\n                if (boundary_squares[i].name === 'Pawn') {\n                    legal_boards = legal_boards.concat(pawn_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Knight') {\n                    legal_boards = legal_boards.concat(knight_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Bishop') {\n                    legal_boards = legal_boards.concat(bishop_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Rook') {\n                    legal_boards = legal_boards.concat(rook_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Queen') {\n                    legal_boards = legal_boards.concat(rook_moves(boundary_squares, i, player, pinned_pieces));\n                    legal_boards = legal_boards.concat(bishop_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'King') {\n                    legal_boards = legal_boards.concat(king_moves(boundary_squares, i, player));\n                }\n            }\n        }\n    }\n    \n    if (in_check) {\n        legal_boards = in_check_handler(boundary_squares, legal_boards, king_location, attacking_pieces, player);\n    }\n\n    if(legal_boards.length === 0){\n        if (in_check) {\n            status = 'Checkmate'\n        }\n        else {\n            status = 'Stalemate'\n        }\n    }\n\n    return [legal_boards, status];\n}\n\n\n/* Check if a given move is within the legal moves found */\nfunction is_legal(squares, legal_boards) {\n    let boundary_squares = engine_squares(squares)[0];\n    let is_legal = false;\n    for (var i = 0; i < legal_boards.length; i++) {\n        if (squares_repr(legal_boards[i][0]) === squares_repr(boundary_squares)) {\n            is_legal = true;\n        }\n    }\n    return is_legal;\n}\n\n/************************************************************ Piece Move Generation Functions ************************************************/\n\n/* Get legal moves for a pawn given a board position */\nfunction pawn_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    let pawn = squares[location];\n\n    let forward_one = forward(1,location, player);\n    let forward_two = forward(2, location, player);\n    let left_one = left(1, location, player);\n    let right_one = right(1, location, player);\n    let diag_left = left(1,forward(1,location,player),player)\n    let diag_right = right(1,forward(1,location,player),player)\n    \n    /*legal to move 2 spaces forward*/\n    if (!pawn.has_moved && squares[forward_two] === null && squares[forward_one] === null) {\n        legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, forward_two, pinned_pieces,[0,1],squares, false, null));\n    }\n    /*legal to move 1 space ahead*/\n    if (squares[forward_one] === null) {\n        legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, forward_one, pinned_pieces,[0,1],squares, false, null));\n    }\n    /*legal to take left*/\n    if (squares[diag_left] !== null && squares[diag_left] !== 'boundary') {\n        if (squares[diag_left].player !== player) {\n            legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_left, pinned_pieces,[-1,1],squares, false, null));\n        }\n    }\n    /*legal to take right*/\n    if (squares[diag_right] !== null && squares[diag_right] !== 'boundary') {\n        if (squares[diag_right].player !== player) {\n            legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_right, pinned_pieces,[1,1],squares, false, null));\n        }\n    }\n    /*legal to take en passant right*/\n    if (squares[right_one] !== null && squares[right_one] !== 'boundary') {\n        if (squares[right_one].name === 'Pawn') {\n            if (squares[right_one].player !== player && squares[right_one].just_moved_two) {\n                legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_right, pinned_pieces,[1,1],squares, true, right_one));\n            }\n        }\n    }\n    /*legal to take en passant left*/\n    if (squares[left_one] !== null && squares[left_one] !== 'boundary') {\n        if (squares[left_one].name === 'Pawn') {\n            if (squares[left_one].player !== player && squares[left_one].just_moved_two) {\n                legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_left, pinned_pieces,[-1,1],squares, true, left_one));\n            }\n        }\n    }\n\n    return legal_boards;\n}\n\n/* Get legal moves for a knight given a board position */\nfunction knight_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    /*Impossible to move pinned knight*/\n    if (location in pinned_pieces) {\n        return legal_boards;\n    }\n    let knight = squares[location];\n    \n    let moves = get_knight_moves(location,player);\n\n    for (var i = 0; i < moves.length; i++) {\n        if (squares[moves[i]] === null && squares[moves[i]] !== 'boundary') {\n            legal_boards.push(make_move(knight, location, moves[i], squares));\n        }\n        else if (squares[moves[i]].player !== player && squares[moves[i]] !== 'boundary') {\n            legal_boards.push(make_move(knight, location, moves[i], squares));\n        }\n    }\n    \n    return legal_boards;\n}\n\n/* Get legal moves for bishop given board position */\nfunction bishop_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    let bishop = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[1,1],[-1,1],[1,-1],[-1,-1]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0]*-1, pin_direction[1]*-1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n            }\n        }\n        else {\n            legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n        }\n    }\n    return legal_boards;\n}\n/* Get legal moves for a rook given a board position*/\nfunction rook_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    let rook = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[0,1],[0,-1],[-1,0],[1,0]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0]*-1, pin_direction[1]*-1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, rook));\n            }\n        }\n        else {\n            legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, rook));\n        }\n    }\n    return legal_boards;\n}\n/* Get legal moves for a king given a board position */\nfunction king_moves(squares, location, player) {\n    let legal_boards = [];\n\n    let king = squares[location];\n\n    /* Take King off the board for calculating normal move attacking squares */\n    let king_squares = squares.slice();\n    king_squares[location] = null;\n\n    let moves = get_king_moves(location, player);\n\n    /* Regular Moves (non castling) */\n    for (var i = 0; i < moves.length; i++) {\n        /* Move to empty square */\n        if (squares[moves[i]] === null) {\n            if (!is_attacked(king_squares,moves[i],player)[0]) {\n                legal_boards.push(make_move(king, location, moves[i], squares));\n            }\n        }\n        /* Capture */\n        else if (squares[moves[i]] !== 'boundary' && squares[moves[i]].player !== player && !is_attacked(king_squares,moves[i],player)[0]) {\n            legal_boards.push(make_move(king, location, moves[i], squares));\n        }\n    }\n\n    /* Castling */\n    let white_kingside_rook = 98;\n    let white_queenside_rook = 91;\n    let black_kingside_rook = 28;\n    let black_queenside_rook = 21;\n    let white_king_start = 95;\n    let black_king_start = 25;\n\n    if (!king.has_moved && !is_attacked(squares,location,player)[0]) {\n        /* White Kingside */\n        if (location === white_king_start && squares[white_kingside_rook] !== null && !squares[white_kingside_rook].has_moved && squares[white_king_start + 1] === null && squares[white_king_start + 2] === null ) {\n            if (!is_attacked(squares,white_king_start + 1,player)[0] && !is_attacked(squares,white_king_start + 2,player)[0]) {\n                legal_boards.push(castle(king, white_king_start, white_king_start + 2, squares[white_kingside_rook], white_kingside_rook, white_kingside_rook-2, squares));\n            }\n        }\n        /* Black Kingside */\n        if (location === black_king_start && squares[black_kingside_rook] !== null && !squares[black_kingside_rook].has_moved && squares[black_king_start + 1] === null && squares[black_king_start + 2] === null) {\n            if (!is_attacked(squares,black_king_start + 1,player)[0] && !is_attacked(squares,black_king_start + 2,player)[0]) {\n                legal_boards.push(castle(king, black_king_start, black_king_start + 2, squares[black_kingside_rook], black_kingside_rook, black_kingside_rook - 2, squares));\n            }\n        }\n        /* White Queenside */\n        if (location === white_king_start && squares[white_queenside_rook] !== null && !squares[white_queenside_rook].has_moved && squares[white_king_start - 1] === null && squares[white_king_start - 2] === null && squares[white_king_start - 3] === null) {\n            if (!is_attacked(squares,white_king_start - 1,player)[0] && !is_attacked(squares,white_king_start - 2,player)[0]) {\n            legal_boards.push(castle(king, white_king_start, white_king_start - 2, squares[white_queenside_rook], white_queenside_rook, white_queenside_rook + 3, squares));\n            }\n        }\n        /* Black Queenside */\n        if (location === black_king_start && squares[black_queenside_rook] !== null && !squares[black_queenside_rook].has_moved && squares[black_king_start - 1] === null && squares[black_king_start - 2] === null && squares[black_king_start - 3] === null) {\n            if (!is_attacked(squares,black_king_start - 1,player)[0] && !is_attacked(squares,black_king_start - 2,player)[0]) {\n                legal_boards.push(castle(king, black_king_start, black_king_start - 2, squares[black_queenside_rook], black_queenside_rook, black_queenside_rook + 3, squares));\n            }\n        }\n    }\n    return legal_boards;\n}\n\n/************************************************************* Pinned Pieces and King Checks *******************************************************************/\n\n/* Eliminate moves where king is still in check from originally checking piece.  Only for in check positions.*/\nfunction in_check_handler(squares, legal_boards, king_location, attacking_piece, player) {\n    let attacking_piece_location = Object.keys(attacking_piece)[0];\n    let move_direction = attacking_piece[attacking_piece_location];\n    let piece_types = [squares[attacking_piece_location].name];\n\n    for (var i = legal_boards.length - 1; i >= 0; i--) {\n        /* Knight or Pawn attacks must be dodged or taken*/\n        if (move_direction === \"knight_attack\" || move_direction === \"pawn_attack\") {\n            if (legal_boards[i][0][attacking_piece_location].player !== player && legal_boards[i][0][king_location] !== null) {\n                legal_boards.splice(i, 1);\n            }\n        }\n        else if (direction_is_attacked(legal_boards[i][0], move_direction, king_location, player, piece_types) !== null && legal_boards[i][0][king_location] !== null) { \n            legal_boards.splice(i, 1);\n        }\n    }\n\n    return legal_boards;\n}\n\n/* Check if King is under attack from a specified direction */\nfunction direction_is_attacked(squares, move_direction, start_location, player, piece_types){\n    let end_location = direction(move_direction,start_location,player);\n    let attacking_piece = null;\n\n    while (squares[end_location] === null) {\n        end_location = direction(move_direction,end_location,player);\n    }\n    let end_piece = squares[end_location];\n    if (end_piece !== 'boundary' && end_piece.player !== player){\n        for (var i = 0; i < piece_types.length; i++) {\n            if (piece_types[i] === end_piece.name) {\n                attacking_piece = [end_location, move_direction];\n            }\n        }\n    }\n    return attacking_piece;\n}\n/* Check if square is under attack by opposing pieces */\nfunction is_attacked(boundary_squares, square_location, player) {\n\n    let is_attacked = false;\n    let attacking_pieces = {};\n    let attacking_piece = null;\n\n    let up_right = right(1, forward(1, square_location, player), player);\n    let up_left = left(1, forward(1, square_location, player), player);\n\n    let pawn_moves = [up_right, up_left];\n    let knight_moves = get_knight_moves(square_location, player);\n    let king_moves = get_king_moves(square_location,player);\n    let diag_directions = [[1,1],[-1,1],[1,-1],[-1,-1]];\n    let straight_directions = [[0,1],[0,-1],[-1,0],[1,0]];\n\n    /* check for bishop/queen attacks */\n    for (var i = 0; i < diag_directions.length; i++) {\n        attacking_piece = direction_is_attacked(boundary_squares,diag_directions[i],square_location,player,['Queen', 'Bishop']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n    /* Check for rook/queen attacks */\n    for (i = 0; i < straight_directions.length; i++) {\n        attacking_piece = direction_is_attacked(boundary_squares,straight_directions[i],square_location,player,['Queen', 'Rook']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n\n    /* Check if square is under attack by knights*/\n    for (i = 0; i < knight_moves.length; i++) {\n        let end_piece = boundary_squares[knight_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null){\n            if(end_piece.player !== player && end_piece.name === 'Knight') {\n                is_attacked = true;\n                attacking_pieces[knight_moves[i]] = 'knight_attack';\n            }\n        }\n    }\n    /* Check if square is under attack by pawns*/\n    for (i = 0; i < pawn_moves.length; i++) {\n        let end_piece = boundary_squares[pawn_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null){\n            if(end_piece.player !== player && end_piece.name === 'Pawn') {\n                is_attacked = true;\n                attacking_pieces[pawn_moves[i]] = 'pawn_attack';\n            }\n        }\n    }\n\n    /* Check if square is under attack by king. */\n    for (i = 0; i < king_moves.length; i++) {\n        let end_piece = boundary_squares[king_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null){\n            if(end_piece.player !== player && end_piece.name === 'King') {\n                is_attacked = true;\n            }\n        }\n    }\n\n    return [is_attacked, attacking_pieces];\n}\n/* Get pieces which are pinned to the king */\nfunction get_pinned_pieces(boundary_squares, king_location, player) {\n    let pinned_pieces = {};\n    let pin_info = null;\n    let pinned_directions = [[0,1],[0,-1],[-1,0],[1,0],[1,1],[-1,1],[1,-1],[-1,-1]];\n    let pin_direction = null;\n\n    for (var x = 0; x < pinned_directions.length; x++) {\n        pin_direction = pinned_directions[x];\n        if (pin_direction[0] === 0 || pin_direction[1] === 0) {\n            pin_info = get_pinned_piece(boundary_squares,pin_direction,king_location,player,['Queen','Rook']);\n        }\n        else {\n            pin_info = get_pinned_piece(boundary_squares,pin_direction,king_location,player,['Queen','Bishop']);\n        }\n        if (pin_info !== null) {\n            pinned_pieces[pin_info[0]] = pin_info[1];\n        }\n    }\n    return pinned_pieces;\n}\n/* Check for a pinned piece given an attacking direction towards the king */\nfunction get_pinned_piece(boundary_squares, pin_direction, king_location, player, piece_types) {\n    let pin_location = direction(pin_direction, king_location, player);\n    let pinned_piece = null;\n    /* Go until you run into a piece or boundary */\n    while (boundary_squares[pin_location] === null) {\n        pin_location = direction(pin_direction, pin_location, player);\n    }\n    /* If you run into same player piece, go until you run into the next piece or boundary */\n    if (boundary_squares[pin_location] !== 'boundary' && boundary_squares[pin_location].player === player) {\n        pinned_piece = pin_location;\n        pin_location = direction(pin_direction, pin_location, player);\n        while (boundary_squares[pin_location] === null) {\n            pin_location = direction(pin_direction, pin_location, player);\n        }\n        /* Check if piece on the other end is a piece type associated with a pin */\n        if (boundary_squares[pin_location] !== 'boundary' && boundary_squares[pin_location].player !== player) {\n            for (var i = 0; i < piece_types.length; i++){\n                if (boundary_squares[pin_location].name === piece_types[i]){\n                    return [pinned_piece, pin_direction];\n                }\n            }\n        }\n    }\n    return null;\n}\n/****************************************************** Move Checking/Exploring and Board Navigating Helper Functions *********************************************************/\n\n/* Given a possible pawn move check if the move is legal and add the move */\nfunction pinned_pawn_move(pawn, pawn_location, pawn_end_location, pinned_pieces, move_direction, squares, is_en_passant, en_passant_capture) {\n    let legal_boards = [];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    if (pawn_location in pinned_pieces) {\n        pin_direction = pinned_pieces[pawn_location];\n        inverse_direction = [pin_direction[0]*-1, pin_direction[1]*-1];\n\n        /* Can only move towards King or away from king when pinned */\n        if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\n            if ( is_en_passant) {\n                legal_boards.push(en_passant(pawn, pawn_location, pawn_end_location, en_passant_capture, squares));\n            }\n            else {\n                legal_boards.push(make_move(pawn,pawn_location,pawn_end_location,squares));\n            }\n        }\n    }\n    else {\n        if ( is_en_passant) {\n            legal_boards.push(en_passant(pawn, pawn_location, pawn_end_location, en_passant_capture, squares));\n        }\n        else {\n            /*Handle Promotions*/\n            if (pawn_end_location >= 91 || pawn_end_location <= 28) {\n                let knight_piece = new Knight(pawn.player);\n                let bishop_piece = new Bishop(pawn.player);\n                let rook_piece = new Rook(pawn.player);\n                let queen_piece = new Queen(pawn.player);\n\n                let pieces = [knight_piece,bishop_piece,rook_piece,queen_piece];\n\n                for (var k = 0; k < pieces.length; k++) {\n                    legal_boards.push(make_move(pieces[k],pawn_location,pawn_end_location,squares));\n                }\n            }\n            else{\n                legal_boards.push(make_move(pawn,pawn_location,pawn_end_location,squares));\n            }\n        }\n    }\n    return legal_boards;\n}\n\n/* Get possible moves and captures for rooks, queens, and bishops (straight pieces) with respect to direction */\nfunction moves_and_captures(squares, move_direction, start_location, player, piece){\n    let legal_boards = [];\n    let end_location = direction(move_direction, start_location, player);\n\n    while (squares[end_location] === null) {\n        legal_boards.push(make_move(piece, start_location, end_location, squares));\n        end_location = direction(move_direction, end_location, player);\n    }\n    if (squares[end_location] !== 'boundary' && squares[end_location].player !== player) {\n        legal_boards.push(make_move(piece, start_location, end_location, squares));\n    }\n    return legal_boards;\n}\n/* Get Knight move directions */\nfunction get_knight_moves(location,player) {\n    \n    let up_right = right(1, forward(2, location, player), player);\n    let up_left = left(1, forward(2, location, player), player);\n    let down_right = right(1, back(2, location, player), player);\n    let down_left = left(1, back(2, location, player), player);\n    let right_up = right(2, forward(1, location, player), player);\n    let right_down = right(2, back(1, location, player), player);\n    let left_up = left(2, forward(1, location, player), player);\n    let left_down = left(2, back(1, location, player), player);\n\n    let moves = [up_right, up_left, down_right, down_left, right_up, right_down, left_up, left_down];\n    return moves;\n}\n/* Get King move directions */\nfunction get_king_moves(location,player) {\n\n    let up = forward(1, location, player);\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let move_left = left(1, location, player);\n    let move_right = right(1, location, player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let down = back(1, location, player);\n\n    let moves = [up, up_right, up_left, move_left, move_right, down_right, down_left, down];\n    return moves;\n}\n\n/* Standard move making.  Set start square to null and end square to piece value */\nfunction make_move(piece, start, end, squares) {\n    squares = squares.slice();\n    squares[start] = null;\n    squares[end] = piece;\n    return [squares, [start, end, piece, {'standard': true}]];\n}\n/* Castling Requires special move making */\nfunction castle(king, king_start, king_end, rook, rook_start, rook_end, squares) {\n    squares = squares.slice();\n    squares[king_start] = null;\n    squares[rook_start] = null;\n    squares[king_end] = king;\n    squares[rook_end] = rook;\n\n    return [squares, [king_start, king_end, king,{'castle': [rook_start, rook_end, rook]}]];\n}\n/* En Passant requires special move making */\nfunction en_passant(piece, start, end, captured_location, squares) {\n    squares = squares.slice();\n    squares[start] = null;\n    squares[end] = piece;\n    squares[captured_location] = null;\n\n    return [squares, [start, end, piece, {'en_passant': captured_location}]];\n}\n\n/* Abstact away difference between black and white moves. All from perspective of player. */\nfunction direction(directions, location, player) {\n    let x = directions[0];\n    let y = directions[1];\n\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let up = forward(1, location, player);\n    let down = back(1, location, player);\n    let move_right = right(1, location, player);\n    let move_left = left(1, location, player);\n\n    if (x === 0 && y === 1) {\n        return up;\n    }\n    else if (x === -1 && y === 1) {\n        return up_left;\n    }\n    else if (x === 1 && y === 1) {\n        return up_right;\n    }\n    else if (x === 1 && y === 0) {\n        return move_right;\n    }\n    else if (x === -1 && y === 0) {\n        return move_left;\n    }\n    else if (x === 1 && y === -1) {\n        return down_right;\n    }\n    else if (x === -1 && y === -1) {\n        return down_left;\n    }\n    else if (x === 0 && y === -1) {\n        return down;\n    }\n}\n\nfunction forward(distance, location, player) {\n    if (player === 'white') {\n        return location - 10*distance;\n    }\n    else {\n        return location + 10*distance;\n    }\n}\nfunction back(distance, location, player) {\n    if (player === 'white') {\n        return location + 10*distance;\n    }\n    else {\n        return location - 10*distance;\n    }\n}\nfunction left(distance, location, player) {\n    if (player === 'white') {\n        return location - distance;\n    }\n    else {\n        return location + distance;\n    }\n}\nfunction right(distance, location, player) {\n    if (player === 'white') {\n        return location + distance;\n    }\n    else {\n        return location - distance;\n    }\n}\n\n/******************************************************** Board Representation Functions  **********************************************/\n\n/* Add padding around board so moves don't wrap. Get king locations while looping. */\nfunction engine_squares(squares) {\n    let engine_squares = Array(120).fill(null);\n    let count = 0;\n    let index = 0;\n    let white_king_location = null;\n    let black_king_location = null;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y<10; y++) {\n            /*if boundary square*/\n            index=i*10+y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                engine_squares[index] = 'boundary';\n            }\n            else {\n                engine_squares[index] = squares[count];\n                if (squares[count] !== null && squares[count].name === \"King\") {\n                    if (squares[count].player === \"white\") {\n                        white_king_location = index;\n                    } \n                    else {\n                        black_king_location = index;\n                    }\n                }\n                count = count + 1;\n            }\n        }\n    }\n    return [engine_squares, white_king_location, black_king_location];\n}\n/* Turn padded board back into 64 Square board */\nfunction normal_squares(engine_squares) {\n    let squares = Array(64).fill(null);\n    let count = 0;\n    let index = 0;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y<10; y++) {\n            /*if boundary square*/\n            index=i*10+y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                //do nothing\n            }\n            else {\n                squares[count] = engine_squares[index];\n                count = count + 1;\n            }\n        }\n    }\n    return squares;\n}\n\n/* Represent board as a string for comparisons */\nfunction squares_repr(squares) {\n    let squares_rep = squares.slice();\n    for (var i = 0; i < squares_rep.length; i++) {\n        if (squares_rep[i] != null && squares_rep[i] !== 'boundary') {\n            squares_rep[i] = squares_rep[i].name;\n        }\n    }\n    return squares_rep.toString();\n}\n\nexport {legal_moves, is_legal, engine_squares, normal_squares}","import { engine_squares, normal_squares } from './ChessMoves';\n\n/* Engine Make move function for board */\nfunction make_engine_move(squares64, move) {\n    let start = move[0];\n    let end = move[1];\n    let piece = JSON.parse(JSON.stringify(move[2]));\n    let squares = engine_squares(squares64)[0];\n\n    squares[start] = null;\n    squares[end] = piece;\n\n    piece.has_moved = true;\n\n    if ('en_passant' in move[3]){\n        let taken_location = move[3]['en_passant'];\n        squares[taken_location] = null;\n    }\n    else if ('castle' in move[3]){\n        let rook_moves = move[3]['castle'];\n        let rook = JSON.parse(JSON.stringify(rook_moves[2]));\n        \n        squares[rook_moves[0]] = null;\n        squares[rook_moves[1]] = rook;\n        rook.has_moved = true;\n    }\n    squares = normal_squares(squares);\n    return squares;\n}\n\nexport {make_engine_move}","import React, { Component } from 'react';\nimport './App.css';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport ReactPiece from './DragPiece';\nimport DropSquare from './DropSquare';\nimport { initialize_board, make_move, Knight, Bishop, Rook, Queen } from './Pieces.js';\nimport { legal_moves, is_legal } from './ChessMoves';\nimport { make_engine_move } from './Engine';\n//import { test } from './Tests';\n\nclass Chess extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{squares: initialize_board()}],\n      player: 'white',\n      drag_end: null,\n      promotion:{class:'hidden',start: null, end: null, player: null},\n      status:null\n      //test:test()\n    }\n  }\n  reset() {\n    this.setState({\n      history: [{squares: initialize_board()}],\n      player: 'white',\n      drag_end: null,\n      promotion:{class:'hidden',start: null, end: null, player: null},\n      status:null\n    });\n  }\n  back() {\n    const history = this.state.history.slice();\n    let player = this.state.player;\n\n    if (history.length === 1) {\n      return;\n    }\n    history.pop();\n    (player === 'white') ? player = 'black' : player = 'white';\n\n    this.setState({\n      history: history,\n      player:player,\n      status:null\n    });\n  }\n\n  engine_move() {\n    const history = this.state.history.slice();\n    const squares = history[history.length - 1].squares.slice();\n    let player = this.state.player;\n\n    let engine_moves = legal_moves(squares, player)\n    let possible_moves = engine_moves[0];\n\n    if (engine_moves[1] !== null){\n      this.setState({\n        status: engine_moves[1]\n      });\n      return;\n    }\n\n    let move = possible_moves[Math.floor(Math.random() * possible_moves.length)][1];\n    let new_squares = make_engine_move(squares, move);\n\n    (player === 'white') ? player = 'black' : player = 'white';\n\n    this.setState({\n      history: history.concat([{squares: new_squares}]),\n      player:player\n    });\n  }\n\n  handle_drop(id) {\n    this.setState({drag_end: id});\n  }\n\n  handle_drag_end(id) {\n    const history = this.state.history.slice();\n    const squares = history[history.length - 1].squares.slice();\n    let drag_start = id;\n    let drag_end = this.state.drag_end;\n    let player = this.state.player;\n    let piece_copy = JSON.parse(JSON.stringify(squares[drag_start]));\n    /* promotions */\n    if ((drag_end < 8 || drag_end > 55) && piece_copy.name === 'Pawn'){\n      let promotion = {class:'promotion_container',start: drag_start, end: drag_end, player: player}\n      this.setState({promotion:promotion})\n      return;\n    }\n    this.change_states(history,squares,player,drag_start,drag_end,piece_copy)\n  };\n\n  handle_promotion(piece) {\n    const history = this.state.history.slice();\n    const squares = history[history.length - 1].squares.slice();\n    const promotion = this.state.promotion;\n\n    let start = promotion['start'];\n    let end = promotion['end'];\n    let player = promotion['player'];\n\n    this.change_states(history,squares,player,start,end,piece)\n\n    this.setState({\n      promotion:{class:'hidden',start: null, end: null, player: null}\n    });\n  }\n\n  change_states(history, squares, player, start, end, piece) {\n    let possible_moves = legal_moves(squares, player)[0];\n    make_move(start, end, squares, piece);\n\n    if (is_legal(squares, possible_moves)){\n      (player === 'white') ? player = 'black' : player = 'white';\n\n      let status = legal_moves(squares, player)[1];\n\n      this.setState({\n        history: history.concat([{squares: squares}]),\n        drag_end: null,\n        player: player,\n        status: status\n      });\n    }\n  }\n\n  render() {\n    let boards = this.state.history;\n    let current_squares = boards[boards.length-1].squares;\n    let player = this.state.player;\n    let promotion_class = this.state.promotion['class'];\n    let status = this.state.status;\n\n    return (\n    <div className = 'game_container'>\n    <div className = 'status'> {status} </div>\n      <Buttons \n      back = {() => this.back()}\n      reset = {() => this.reset()}\n      engine_move = {() => this.engine_move()}\n      />\n      <div className = 'board_container' >\n        <Board \n          squares = {current_squares}\n          onDragStart = {(id) => this.drag_start(id)}\n          onDragEnd = {(id) => this.drag_end(id)}\n          onDrop = {(id) => this.drop(id)}\n          player = {this.state.player}\n          handle_drop={(id) => this.handle_drop(id)}\n          handle_drag_end = {(id) => this.handle_drag_end(id)}\n        />\n      </div>\n      <Promotion\n        className = {promotion_class}\n        player = {player}\n        handle_promotion = {(piece) => this.handle_promotion(piece)}\n      />\n    </div>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  renderSquares() {\n    var html_board = [];\n    var color = false;\n    for (var i = 0; i < 8; i ++){\n    color = !color;\n    var html_row = [];\n      for (var k = 0; k < 8; k ++){\n        let id = i*8 + k\n        let current_square = <Square \n          value={this.props.squares[id]} \n          key={id} \n          color={color} \n          player = {this.props.player}\n          handle_drop={() => this.props.handle_drop(id)}\n          handle_drag_end = {(id) => this.props.handle_drag_end(id)}\n          id = {id}\n        />;\n        html_row.push(current_square);\n        color = !color\n      }\n      html_row = <div className = \"board_row\" key = {i}> {html_row} </div>\n      html_board.push(html_row)\n    }\n    return html_board\n  }\n  render() {\n  return (\n    <div>\n    {this.renderSquares()}\n    </div>\n  );\n  }\n}\n\nclass Square extends React.Component {\n    renderSquare(color) {\n        var class_name = \"dark square\"\n        var style = null;\n        var url = null;\n        var player = null;\n\n        if (color) {\n            class_name = \"light square\"\n        }\n        if (this.props.value) {\n            style = this.props.value.style;\n            url = this.props.value.url;\n            player = this.props.value.player;\n        }\n        if (this.props.player === player) {\n          return (\n          <div className={class_name}>\n            <ReactPiece \n              url={url} \n              id = {this.props.id}\n              handle_drag_end = {(id) => this.props.handle_drag_end(id)}\n            /> \n          </div> );\n        }\n        else {\n            return (\n            <DropSquare \n              class_name={class_name} \n              style={style} \n              handle_drop={() => this.props.handle_drop()}\n            /> );\n        }\n    }\n\n  render() {\n    var color = this.props.color;\n    return (\n    <React.Fragment>\n      {this.renderSquare(color)}\n    </React.Fragment>\n    );\n  }\n}\n\nfunction Buttons(props) {\n  return (\n    <div>\n      <button \n      className = \"reset_button\" \n      onClick={() => props.reset()} > Reset\n      </button>\n      <button \n      className = \"back_button\" \n      onClick={() => props.back()} > Back \n      </button>\n      <button \n      className = \"engine_button\" \n      onClick={() => props.engine_move()} > Engine Move\n      </button>\n    </div>\n  );\n} \n\nclass Promotion extends React.Component {\n  render(){\n    let knight_piece = new Knight(this.props.player);\n    let bishop_piece = new Bishop(this.props.player);\n    let rook_piece = new Rook(this.props.player);\n    let queen_piece = new Queen(this.props.player);\n    /*chance for crazy castling circumstance without is true*/\n    rook_piece.has_moved = true;\n\n    return (\n      <div className = {this.props.className}>\n        <div className=\"promotion\">\n            <button className = {\"promotion_button\"} style = {knight_piece.style} onClick={() => this.props.handle_promotion(knight_piece)}></button>\n            <button className = {\"promotion_button\"} style = {bishop_piece.style} onClick={() => this.props.handle_promotion(bishop_piece)}></button>\n            <button className = {\"promotion_button\"} style = {rook_piece.style} onClick={() => this.props.handle_promotion(rook_piece)}></button>\n            <button className = {\"promotion_button\"} style = {queen_piece.style} onClick={() => this.props.handle_promotion(queen_piece)}></button>\n        </div>\n      </div>\n    );\n  }\n} \n\n\nexport default DragDropContext(HTML5Backend)(Chess);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}