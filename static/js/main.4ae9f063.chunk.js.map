{"version":3,"sources":["Constants.js","DragPiece.js","DropSquare.js","Engine.js","BoardFunctions.js","EngineMoves.js","Pieces.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","ReactPiece","_this","this","img","Image","src","props","url","onload","connectDragPreview","_this$props","connectDragSource","isDragging","react_default","a","createElement","className","alt","style","opacity","cursor","React","Component","DragSource","beginDrag","id","endDrag","monitor","component","didDrop","item","getItem","handle_drag_end","connect","dragSource","dragPreview","DropSquare","class_name","connectDropTarget","DropTarget","drop","handle_drop","dropTarget","isOver","piece_scores","Pawn","Knight","Bishop","Rook","Queen","King","INFINITY","CHECKMATE","Position","player","squares","king_locations","castle_state","material_balance","en_passant_square","Object","classCallCheck","Move","start","end","en_passant","rook_start","rook_end","promotion_piece","en_passant_capture","make_move","position","move","slice","piece","JSON","parse","stringify","name","Math","abs","rook","has_moved","alphabeta_search","depth","alpha","beta","start_time","total_time","best_move","value","moves","legal_moves","length","performance","now","x","current_move","current_position","max","k","min","ParseFen","fen","Array","fill","rank","file","count","i","fenCnt","charCodeAt","coordinate_change","wk_location","bk_location","current_square","get_king_locations","engine_squares","sum_material","evaluate_material","set_pawn_states","index","y","location64","king_location","pinned_pieces","get_pinned_pieces","en_passant_pins","en_passant_location","forward","special_squares","pinned_en_passant","_king_check_squares","attacking_pieces","checked_squares","up_right","right","up_left","left","pawn_moves","knight_moves","get_knight_moves","diag_directions","straight_directions","_attacked_squares","attacked_squares","_attacked_squares2","slicedToArray","attack_squares","attack_piece","concat","push","_attacked_squares3","_attacked_squares4","end_piece","king_check_squares","_king_check_squares2","in_check","king_moves","bishop_moves","rook_moves","includes","splice","in_check_handler","location","pawn","forward_one","forward_two","left_one","right_one","diag_left","diag_right","create_pawn_move","bishop","pin_direction","inverse_direction","toString","moves_and_captures","king_squares","get_king_moves","is_attacked","white_king_start","castle","white_kingside_rook","white_queenside_rook","black_king_start","black_kingside_rook","black_queenside_rook","direction_is_attacked","move_direction","start_location","piece_types","end_location","direction","attacking_piece","square_location","pin_info","pinned_directions","get_pinned_piece","pin_location","pinned_piece","pawn_location","pawn_end_location","is_en_passant","pieces","promote","back","king_start","king_end","captured_location","directions","down_right","down_left","up","down","move_right","move_left","distance","Piece","img_url","backgroundImage","possibleConstructorReturn","getPrototypeOf","call","just_moved_two","initialize_engine_board","board","color","initialize_board","Chess","state","history","drag_end","promotion","class","status","setState","pop","alert","engine_move","new_position","drag_start","change_states","possible_moves","create_move","is_legal","_this2","current_squares","normal_squares","promotion_class","Buttons","reset","App_Board","onDrop","App_FenPosition","setup_fen","App_Promotion","handle_promotion","Board","_this3","html_board","html_row","_loop","App_Square","key","renderSquares","Square","_this4","DragPiece","src_DropSquare","Fragment","renderSquare","onClick","FenPosition","_this5","event","target","preventDefault","_this6","onSubmit","submit","type","onChange","handleChange","Promotion","_this7","knight_piece","bishop_piece","rook_piece","queen_piece","DragDropContext","HTML5Backend","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ae9f063.chunk.js","sourcesContent":["export const ItemTypes = {\n  PIECE: 'piece'\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from './Constants';\nimport { DragSource } from 'react-dnd';\nimport './App.css';\n\nconst pieceSource = {\n  beginDrag(props) {\n    const item = { id: props.id };\n    return item;\n  },\n  endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      //Decided not to move piece maybe\n      return;\n    }\n    const item = monitor.getItem();\n    return props.handle_drag_end(item.id);\n  }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    };\n}\n\nclass ReactPiece extends React.Component {\n  componentDidMount() {\n    const img = new Image(46, 46);\n    img.src = this.props.url;\n    img.onload = () => this.props.connectDragPreview(img);\n  }\n  render() {\n    var url = this.props.url\n    const { connectDragSource, isDragging } = this.props;\n    return connectDragSource(\n    <div className = \"piece_container\">\n      <img src={url} alt ='' className = \"react_piece\" style={{\n        opacity: 1,\n        cursor: isDragging ? 'grabbing' : 'grab'\n      }}>\n      </img>\n    </div>\n    );\n  }\n  }\n\nReactPiece.propTypes = {\n  connectDragSource: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired\n};\n\nexport default DragSource(ItemTypes.PIECE, pieceSource, collect)(ReactPiece);\n\n\n\n\n\n\n\n","import React from 'react';\nimport { ItemTypes } from './Constants';\nimport { DropTarget } from 'react-dnd';\nimport './App.css';\n\nconst squareTarget = {\n    drop(props) {\n      return props.handle_drop();\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n      connectDropTarget: connect.dropTarget(),\n      isOver: monitor.isOver()\n    };\n}\n\nclass DropSquare extends React.Component {\n    render() {\n        var style = this.props.style;\n        var class_name = this.props.class_name;\n        const connectDropTarget = this.props.connectDropTarget;\n        return connectDropTarget(\n            <div className={class_name} style={style}> </div>\n        )\n    }\n}\n  \n\nexport default DropTarget(ItemTypes.PIECE, squareTarget, collect)(DropSquare);","\nimport { legal_moves } from './EngineMoves';\n\nvar piece_scores = { Pawn: 1, Knight: 3, Bishop: 3.3, Rook: 5, Queen: 9.5, King: 0 };\nvar INFINITY = 10000;\nvar CHECKMATE = 9000;\n\n/* king locations = [white king, black king]\n * castle_state = [white kingside, white queenside, black kingside, black queenside] 1 for can castle 0 for cannot castle */\nclass Position {\n    constructor(player, squares, king_locations, castle_state, material_balance, en_passant_square) {\n        this.player = player;\n        this.squares = squares;\n        this.king_locations = king_locations;\n        this.castle_state = castle_state;\n        this.material_balance = material_balance;\n        this.en_passant_square = en_passant_square;\n    }\n}\n\nclass Move {\n    constructor(start,end, en_passant, rook_start, rook_end, promotion_piece) {\n        this.start = start;\n        this.end = end;\n        this.en_passant_capture = en_passant;\n        this.rook_start = rook_start;\n        this.rook_end = rook_end;\n        this.promotion_piece = promotion_piece;\n    }\n}\n\nfunction make_move(position, move) {\n\n    let start = move.start\n    let end = move.end\n\n    /*Starting Rook Locations */\n    let wk_rook = 98;\n    let wq_rook = 91;\n    let bk_rook = 28;\n    let bq_rook = 21;\n\n    let player = position.player;\n\n    let squares = position.squares.slice();\n    let piece = JSON.parse(JSON.stringify(squares[start]));\n    let king_locations = position.king_locations.slice();\n    let castle_state = position.castle_state.slice();\n    let material_balance = position.material_balance;\n    let en_passant_square = null;\n\n    if (move.en_passant_capture !== null) {\n        squares[move.en_passant_capture] = null;\n    }\n\n    /* Pawn Just Moved Two */\n    if (piece.name === 'Pawn' && Math.abs(start - end) === 20) {\n        en_passant_square = start + (end - start) / 2;\n    }\n\n    /*Castling move*/\n    if (move.rook_start !== null) {\n        let rook = JSON.parse(JSON.stringify(squares[move.rook_start]));\n        squares[move.rook_start] = null;\n        squares[move.rook_end] = rook;\n        rook.has_moved = true;\n    }\n    /*Change King Location and Castling states*/\n    if (piece.name === 'King') {\n        if (piece.player === 'white') {\n            king_locations[0] = end\n            castle_state[0] = 0;\n            castle_state[1] = 0;\n        }\n        else {\n            king_locations[1] = end\n            castle_state[2] = 0;\n            castle_state[3] = 0;\n        }\n    }\n    /* Change castling states for first rook moves */\n    if (piece.name === 'Rook' && !piece.has_moved) {\n        if (start === wk_rook) {\n            castle_state[0] = 0;\n        }\n        else if (start === wq_rook) {\n            castle_state[1] = 0;\n        }\n        else if (start === bk_rook) {\n            castle_state[2] = 0;\n        }\n        else if (start === bq_rook) {\n            castle_state[3] = 0;\n        }\n    }\n    /* Change castling states for rook captures */\n    if (squares[end] !== null && squares[end].name === 'Rook') {\n        if (end === wk_rook) {\n            castle_state[0] = 0;\n        }\n        else if (end === wq_rook) {\n            castle_state[1] = 0;\n        }\n        else if (end === bk_rook) {\n            castle_state[2] = 0;\n        }\n        else if (end === bq_rook) {\n            castle_state[3] = 0;\n        }\n    }\n    /*Change material Balance */\n    if (material_balance !== null && squares[end] !== null) {\n        if (position.player === 'white') {\n            material_balance = material_balance + piece_scores[squares[end].name];\n        }\n        else {\n            material_balance = material_balance - piece_scores[squares[end].name];\n        }\n    }\n\n    /*Promotion */\n    if (move.promotion_piece !== null) {\n        piece = move.promotion_piece;\n        if (piece.player === 'white') {\n            material_balance = material_balance + piece_scores[piece.name] - 1;\n        }\n        else {\n            material_balance = material_balance - piece_scores[piece.name] + 1;\n        }\n    }\n\n    squares[start] = null;\n    squares[end] = piece;\n    piece.has_moved = true;\n\n    (player === 'white') ? player = 'black' : player = 'white';\n\n    return new Position(player, squares, king_locations, castle_state, material_balance, en_passant_square);\n}\n\n/* Breadth First Search.*/\nfunction breadth_search(depth, positions) {\n    if (depth === 0) {\n        return positions;\n    }\n    else {\n        let new_positions = [];\n        for (var j = 0; j < positions.length; j++) {\n            let current_position = positions[j];\n            let moves = legal_moves(current_position);\n\n            for (var i = 0; i < moves.length; i++) {\n                let current_move = moves[i];\n                let next_position = make_move(current_position, current_move)\n                new_positions.push(next_position);\n            }\n        }\n        return breadth_search(depth - 1, new_positions);\n    }\n}\n\nfunction alphabeta(position, depth, alpha, beta) {\n    if (depth === 0) {\n        return { value: position.material_balance, move: null};\n    }\n    let moves = legal_moves(position);\n    //Checkmate\n    if (moves.length === 0) {\n        if (position.player === 'white') {\n            return {value: -CHECKMATE, move: null};\n        }\n        else {\n            return {value: CHECKMATE, move: null};\n        }\n    }\n\n    if (position.player === 'white') {\n        let value = -INFINITY;\n        let best_move = null;\n        for (var x = 0; x < moves.length; x ++) {\n            let current_move = moves[x];\n            let current_position = make_move(position, current_move);\n            value = Math.max(value, alphabeta_search(current_position, depth - 1, alpha, beta).value);\n            if (value > alpha) {\n                alpha = value;\n                best_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        return {value: value, move:best_move};\n    }\n    else {\n        let value = INFINITY;\n        let best_move = null;\n        for (var k = 0; k < moves.length; k ++) {\n            let current_move = moves[k];\n            let current_position = make_move(position, current_move);\n            value = Math.min(value, alphabeta_search(current_position, depth - 1, alpha, beta).value);\n            if (value < beta) {\n                beta = value;\n                best_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        return {value: value, move: best_move};\n    }\n}\n\n/*Give Max Depth and max search time*/\nfunction alphabeta_search(position, depth, alpha, beta, move, start_time, total_time, best_move, value) {\n    if (depth === 0) {\n        return { value: position.material_balance, move: best_move};\n    }\n    let moves = legal_moves(position);\n    //Checkmate\n    if (moves.length === 0) {\n        if (position.player === 'white') {\n            return {value: -CHECKMATE, move: best_move};\n        }\n        else {\n            return {value: CHECKMATE, move: best_move};\n        }\n    }\n    let elapsed_time = performance.now()-start_time;\n    if (elapsed_time > total_time) {\n        return {value: value, move:best_move};\n    }\n\n    if (position.player === 'white') {\n        let value = -INFINITY;\n        let best_move = move;\n        for (var x = 0; x < moves.length; x ++) {\n            let current_move = moves[x];\n            let current_position = make_move(position, current_move);\n            value = Math.max(value, alphabeta_search(current_position, depth - 1, alpha, beta, current_move, start_time, total_time, best_move, value).value);\n            if (value > alpha) {\n                alpha = value;\n                best_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        return {value: value, move:best_move};\n    }\n    else {\n        let value = INFINITY;\n        let best_move = move;\n        for (var k = 0; k < moves.length; k ++) {\n            let current_move = moves[k];\n            let current_position = make_move(position, current_move);\n            value = Math.min(value, alphabeta_search(current_position, depth-1, alpha, beta, current_move, start_time, total_time, best_move, value).value);\n            if (value < beta) {\n                beta = value;\n                best_move = current_move;\n            }\n            if (alpha >= beta) {\n                break;\n            }\n        }\n        return {value: value, move: best_move};\n    }\n}\n\n\nexport {Move, Position, make_move, breadth_search, alphabeta_search}","import {King, Rook, Pawn, Knight, Bishop, Queen } from './Pieces.js';\nimport {Position } from './Engine.js'\n\nvar piece_scores = { Pawn: 1, Knight: 3, Bishop: 3.3, Rook: 5, Queen: 9.5, King: 0 }\n\n/* Turn FEN into chess position object */\nfunction ParseFen(fen) {\n    if (fen.length === 0) {\n        return \"FEN Error\";\n    }\n    let squares = Array(64).fill(null);\n    let player = null;\n    let castle_state = [0,0,0,0];\n    let en_passant_square = null;\n\n\tvar rank = 0;\n    var file = 0;\n    var piece = 0;\n    var count = 0;\n    var i = 0;  \n    var sq64 = 0;\n    var fenCnt = 0; // fen[fenCnt]\n\t\n\twhile ((rank <= 7) && fenCnt < fen.length) {\n\t    count = 1;\n\t\tswitch (fen[fenCnt]) {\n\t\t\tcase 'p': piece = new Pawn('black'); break;\n            case 'r': piece = new Rook('black'); break;\n            case 'n': piece = new Knight('black'); break;\n            case 'b': piece = new Bishop('black'); break;\n            case 'k': piece = new King('black'); break;\n            case 'q': piece = new Queen('black'); break;\n            case 'P': piece = new Pawn('white'); break;\n            case 'R': piece = new Rook('white'); break;\n            case 'N': piece = new Knight('white'); break;\n            case 'B': piece = new Bishop('white'); break;\n            case 'K': piece = new King('white'); break;\n            case 'Q': piece = new Queen('white'); break;\n\n            case '1':\n            case '2':\n            case '3':\n            case '4':\n            case '5':\n            case '6':\n            case '7':\n            case '8':\n                piece = null;\n                count = fen[fenCnt].charCodeAt() - '0'.charCodeAt();\n                break;\n            \n            case '/':\n            case ' ':\n                rank = rank + 1;\n                file = 0;\n                fenCnt = fenCnt + 1;\n                continue;  \n            default:\n                return \"FEN error\";\n        }\n        for (i = 0; i < count; i++) {\t\n\t\t\tsq64 = rank*8 + file;            \n            squares[sq64] = piece;\n\t\t\tfile++;\n        }\n\t\tfenCnt++;\n    } // while loop end\n\t\n\t//rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\n\tplayer = (fen[fenCnt] === 'w') ? 'white' : 'black';\n    fenCnt += 2;\n\t\n\tfor (i = 0; i < 4; i++) {\n        if (fen[fenCnt] === ' ') {\n            break;\n        }\t\t\n\t\tswitch(fen[fenCnt]) {\n\t\t\tcase 'K': castle_state[0] = 1 ; break;\n\t\t\tcase 'Q': castle_state[1] = 1 ; break;\n\t\t\tcase 'k': castle_state[2] = 1 ; break;\n\t\t\tcase 'q': castle_state[3] = 1 ; break;\n\t\t\tdefault:\t     break;\n        }\n\t\tfenCnt++;\n\t}\n    fenCnt++;\t\n\t\n\tif (fen[fenCnt] !== '-') {        \n\t\tfile = fen[fenCnt].charCodeAt() - 'a'.charCodeAt();\n        rank = fen[fenCnt + 1].charCodeAt() - '1'.charCodeAt();\t\n        en_passant_square = coordinate_change((7-rank) * 8 + file);\t\n    }\n    squares = engine_squares(squares);\n    let king_locations = get_king_locations(squares);\n    let material_balance = evaluate_material(squares);\n    let position = new Position(player,squares,king_locations, castle_state,material_balance,en_passant_square);\n    set_pawn_states(position);\n    return position;\n\t\n}\n\n/* Add padding around board so moves don't wrap. Get king locations while looping. */\nfunction engine_squares(squares) {\n    let engine_squares = Array(120).fill(null);\n    let count = 0;\n    let index = 0;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y < 10; y++) {\n            /*if boundary square*/\n            index = i * 10 + y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                engine_squares[index] = 'boundary';\n            }\n            else {\n                engine_squares[index] = squares[count];\n                count = count + 1;\n            }\n        }\n    }\n    return engine_squares\n}\n/* Turn padded board back into 64 Square board */\nfunction normal_squares(engine_squares) {\n    let squares = Array(64).fill(null);\n    let count = 0;\n    let index = 0;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y < 10; y++) {\n            /*if boundary square*/\n            index = i * 10 + y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                //do nothing\n            }\n            else {\n                squares[count] = engine_squares[index];\n                count = count + 1;\n            }\n        }\n    }\n    return squares;\n}\n\nfunction get_king_locations(squares) {\n    /*White King Location & Black King location*/\n    let wk_location = null;\n    let bk_location = null;\n\n    for (var k = 0; k < squares.length; k++) {\n        let current_square = squares[k];\n        if (current_square !== null && current_square !== 'boundary') {\n            if (current_square.name === 'King') {\n                if (current_square.player === 'white') {\n                    wk_location = k;\n                }\n                else {\n                    bk_location = k;\n                }\n            }\n        }\n    }\n    let king_locations = [wk_location, bk_location]\n    return king_locations;\n}\n\nfunction coordinate_change(location64) {\n    let count = 0;\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y < 10; y++) {\n            /*if boundary square*/\n            let coord120 = i * 10 + y;\n            if (!(y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11)) {\n                if (location64 === count) {\n                    return coord120;\n                }\n                count = count + 1\n            }\n        }\n    }\n}\n\nfunction set_pawn_states(position) {\n    let squares = position.squares;\n    for (var x = 0; x < squares.length; x++) {\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\n            let piece = squares[x];\n            if (piece.name === 'Pawn'){\n                if (piece.player === 'white') {\n                    if (x < 81) {\n                        piece.has_moved = true;\n                    }\n                }\n                else{\n                    if (x > 38) {\n                        piece.has_moved = true;\n                    }\n                }\n            }\n        }\n    }\n}\n\n/*All evaluations with respect to white */\nfunction evaluate_material(squares) {\n    let sum_material = 0\n    for (var x = 0; x < squares.length; x ++) {\n        if (squares[x] !== 'boundary' && squares[x] !== null) {\n            if (squares[x].player === 'white') {\n                sum_material = sum_material + piece_scores[squares[x].name];\n            }\n            else {\n                sum_material = sum_material - piece_scores[squares[x].name];\n            }\n        }\n    }\n\n    return (sum_material)\n}\n\nexport {ParseFen, coordinate_change, get_king_locations, normal_squares, engine_squares, evaluate_material}","/********************************************** Legal Move Generation and Checking for Engine*************************************/\nimport { Knight, Bishop, Rook, Queen } from './Pieces.js';\nimport {coordinate_change, get_king_locations, normal_squares, engine_squares} from './BoardFunctions.js';\nimport { Move } from './Engine.js';\n\n/* Return all legal moves given a position */\nfunction legal_moves(position) {\n    let squares = position.squares;\n    let player = position.player;\n    let king_location = (player === 'white') ? position.king_locations[0] : position.king_locations[1];\n    let pinned_pieces = get_pinned_pieces(squares, king_location, player);\n    let en_passant_pins = null;\n    let castle_state = position.castle_state;\n    let en_passant_square = position.en_passant_square;\n\n    if (en_passant_square !== null) {\n        en_passant_pins = pinned_en_passant(squares,en_passant_square,king_location,player);\n    }\n\n    let [attacking_pieces, attacked_squares] = king_check_squares(squares, king_location, player);\n    let in_check = (attacking_pieces.length > 0) ? true : false;\n\n    /* Only King can move in double check */\n    if (attacking_pieces.length > 1) {\n        return king_moves(squares, king_location, player, castle_state);\n    }\n    var legal_moves = [];\n\n    for (var i = 0; i < 120; i++) {\n        /* Skip empty and boundary squares */\n        if (squares[i] !== null && squares[i] !== 'boundary') {\n            /* Check for piece color and send move generation to subfunctions*/\n            if (squares[i].player === player) {\n                if (squares[i].name === 'Pawn') {\n                    legal_moves = legal_moves.concat(pawn_moves(squares, i, player, pinned_pieces, en_passant_square, en_passant_pins));\n                }\n                else if (squares[i].name === 'Knight') {\n                    legal_moves = legal_moves.concat(knight_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'Bishop') {\n                    legal_moves = legal_moves.concat(bishop_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'Rook') {\n                    legal_moves = legal_moves.concat(rook_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'Queen') {\n                    legal_moves = legal_moves.concat(rook_moves(squares, i, player, pinned_pieces));\n                    legal_moves = legal_moves.concat(bishop_moves(squares, i, player, pinned_pieces));\n                }\n                else if (squares[i].name === 'King') {\n                    legal_moves = legal_moves.concat(king_moves(squares, i, player, castle_state, in_check));\n                }\n            }\n        }\n    }\n\n    if (attacking_pieces.length > 0) {\n        legal_moves = in_check_handler(legal_moves, king_location, attacked_squares);\n    }\n\n    return legal_moves;\n}\n\n\n/* Check if a given move is within the legal moves found */\nfunction is_legal(move, legal_moves) {\n    let is_legal = false;\n    for (var i = 0; i < legal_moves.length; i++) {\n        if (JSON.stringify(move) === JSON.stringify(legal_moves[i])) {\n            is_legal = true;\n        }\n    }\n    return is_legal;\n}\n\n/************************************************************ Piece Move Generation Functions ************************************************/\n\n/* Get legal moves for a pawn given a board position */\nfunction pawn_moves(squares, location, player, pinned_pieces, en_passant_square, en_passant_pins) {\n    let legal_moves = [];\n    let pawn = squares[location];\n\n    let forward_one = forward(1, location, player);\n    let forward_two = forward(2, location, player);\n    let left_one = left(1, location, player);\n    let right_one = right(1, location, player);\n    let diag_left = left(1, forward(1, location, player), player)\n    let diag_right = right(1, forward(1, location, player), player)\n\n    /*legal to move 2 spaces forward*/\n    if (!pawn.has_moved && squares[forward_two] === null && squares[forward_one] === null) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, forward_two, pinned_pieces, [0, 1], false, null, null));\n    }\n    /*legal to move 1 space ahead*/\n    if (squares[forward_one] === null) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, forward_one, pinned_pieces, [0, 1], false, null, null));\n    }\n    /*legal to take left*/\n    if (squares[diag_left] !== null && squares[diag_left] !== 'boundary') {\n        if (squares[diag_left].player !== player) {\n            legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_left, pinned_pieces, [-1, 1], false, null, null));\n        }\n    }\n    /*legal to take right*/\n    if (squares[diag_right] !== null && squares[diag_right] !== 'boundary') {\n        if (squares[diag_right].player !== player) {\n            legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_right, pinned_pieces, [1, 1], false, null, null));\n        }\n    }\n    /*legal to take en passant right*/\n    if (diag_right === en_passant_square) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_right, pinned_pieces, [1, 1], true, right_one, en_passant_pins));\n    }\n    /*legal to take en passant left*/\n    if (diag_left === en_passant_square) {\n        legal_moves = legal_moves.concat(create_pawn_move(pawn, location, diag_left, pinned_pieces, [-1, 1], true, left_one, en_passant_pins));\n    }\n\n    return legal_moves;\n}\n\n/* Get legal moves for a knight given a board position */\nfunction knight_moves(squares, location, player, pinned_pieces) {\n    let legal_moves = [];\n    /*Impossible to move pinned knight*/\n    if (location in pinned_pieces) {\n        return legal_moves;\n    }\n\n    let moves = get_knight_moves(location, player);\n\n    for (var i = 0; i < moves.length; i++) {\n        if (squares[moves[i]] === null && squares[moves[i]] !== 'boundary') {\n            legal_moves.push(make_move(location, moves[i]));\n        }\n        else if (squares[moves[i]].player !== player && squares[moves[i]] !== 'boundary') {\n            legal_moves.push(make_move(location, moves[i]));\n        }\n    }\n\n    return legal_moves;\n}\n\n/* Get legal moves for bishop given board position */\nfunction bishop_moves(squares, location, player, pinned_pieces) {\n    let legal_moves = [];\n    let bishop = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[1, 1], [-1, 1], [1, -1], [-1, -1]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n            }\n        }\n        else {\n            legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n        }\n    }\n    return legal_moves;\n}\n/* Get legal moves for a rook given a board position*/\nfunction rook_moves(squares, location, player, pinned_pieces) {\n    let legal_moves = [];\n    let rook = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[0, 1], [0, -1], [-1, 0], [1, 0]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, rook));\n            }\n        }\n        else {\n            legal_moves = legal_moves.concat(moves_and_captures(squares, moves[i], location, player, rook));\n        }\n    }\n    return legal_moves;\n}\n/* Get legal moves for a king given a board position */\nfunction king_moves(squares, location, player, castle_state, in_check) {\n    let legal_moves = [];\n\n    /* Take King off the board for calculating normal move attacking squares */\n    let king_squares = squares.slice();\n    king_squares[location] = null;\n\n    let moves = get_king_moves(location, player);\n\n    /* Regular Moves (non castling) */\n    for (var i = 0; i < moves.length; i++) {\n        /* Move to empty square */\n        if (squares[moves[i]] === null) {\n            if (!is_attacked(king_squares, moves[i], player)[0]) {\n                legal_moves.push(make_move(location, moves[i]));\n            }\n        }\n        /* Capture */\n        else if (squares[moves[i]] !== 'boundary' && squares[moves[i]].player !== player && !is_attacked(king_squares, moves[i], player)[0]) {\n            legal_moves.push(make_move(location, moves[i]));\n        }\n    }\n\n    /* Castling */\n    let white_kingside_rook = 98;\n    let white_queenside_rook = 91;\n    let black_kingside_rook = 28;\n    let black_queenside_rook = 21;\n    let white_king_start = 95;\n    let black_king_start = 25;\n\n\n    /* White Kingside */\n    if (!in_check) {\n        if (castle_state[0] === 1 && squares[white_king_start + 1] === null && squares[white_king_start + 2] === null) {\n            if (!is_attacked(squares, white_king_start + 1, player)[0] && !is_attacked(squares, white_king_start + 2, player)[0]) {\n                legal_moves.push(castle(white_king_start, white_king_start + 2, white_kingside_rook, white_kingside_rook - 2));\n            }\n        }\n        /* White Queenside */\n        if (castle_state[1] === 1 && squares[white_king_start - 1] === null && squares[white_king_start - 2] === null && squares[white_king_start - 3] === null) {\n            if (!is_attacked(squares, white_king_start - 1, player)[0] && !is_attacked(squares, white_king_start - 2, player)[0]) {\n                legal_moves.push(castle(white_king_start, white_king_start - 2, white_queenside_rook, white_queenside_rook + 3));\n            }\n        }\n        /* Black Kingside */\n        if (castle_state[2] === 1 && squares[black_king_start + 1] === null && squares[black_king_start + 2] === null) {\n            if (!is_attacked(squares, black_king_start + 1, player)[0] && !is_attacked(squares, black_king_start + 2, player)[0]) {\n                legal_moves.push(castle(black_king_start, black_king_start + 2, black_kingside_rook, black_kingside_rook - 2));\n            }\n        }\n        /* Black Queenside */\n        if (castle_state[3] === 1 && squares[black_king_start - 1] === null && squares[black_king_start - 2] === null && squares[black_king_start - 3] === null) {\n            if (!is_attacked(squares, black_king_start - 1, player)[0] && !is_attacked(squares, black_king_start - 2, player)[0]) {\n                legal_moves.push(castle(black_king_start, black_king_start - 2, black_queenside_rook, black_queenside_rook + 3));\n            }\n        }\n    }\n    return legal_moves;\n}\n\n/************************************************************* Pinned Pieces and King Checks *******************************************************************/\n\n/* Eliminate moves where king is still in check from originally checking piece.  Only for in check positions.*/\nfunction in_check_handler(legal_moves, king_location, attacked_squares) {\n    for (var i = legal_moves.length - 1; i >= 0; i--) {\n        let current_move = legal_moves[i];\n        /* If king was not moved out of check and the moved piece did not block the check or eliminate the checking piece than remove the move */\n        if (!attacked_squares.includes(current_move.end) && !attacked_squares.includes(current_move.en_passant_capture) && current_move.start !== king_location) {\n            legal_moves.splice(i, 1);\n        }\n    }\n    return legal_moves;\n}\n\n/* Check if square is under attack from a specified direction */\nfunction direction_is_attacked(squares, move_direction, start_location, player, piece_types) {\n    let end_location = direction(move_direction, start_location, player);\n    let attacking_piece = null;\n\n    while (squares[end_location] === null) {\n        end_location = direction(move_direction, end_location, player);\n    }\n    let end_piece = squares[end_location];\n    if (end_piece !== 'boundary' && end_piece.player !== player) {\n        for (var i = 0; i < piece_types.length; i++) {\n            if (piece_types[i] === end_piece.name) {\n                attacking_piece = [end_location, move_direction];\n            }\n        }\n    }\n    return attacking_piece;\n}\n/* king_check squares returns a set of squares which a player's piece must end up in to block the check or remove the checking piece */\nfunction king_check_squares(squares, king_location, player) {\n\n    let attacking_pieces = [];\n    let checked_squares = [];\n\n    let up_right = right(1, forward(1, king_location, player), player);\n    let up_left = left(1, forward(1, king_location, player), player);\n\n    let pawn_moves = [up_right, up_left];\n    let knight_moves = get_knight_moves(king_location, player);\n    let diag_directions = [[1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let straight_directions = [[0, 1], [0, -1], [-1, 0], [1, 0]];\n\n    /* get bishop/queen attack squares */\n    for (var i = 0; i < diag_directions.length; i++) {\n        let [attack_squares, attack_piece] = attacked_squares(squares, diag_directions[i], king_location, player, ['Queen', 'Bishop']);\n        if (attack_piece !== null) {\n            checked_squares = checked_squares.concat(attack_squares);\n            attacking_pieces.push(attack_piece);\n        }\n    }\n    /* Check for rook/queen attacks */\n    for (i = 0; i < straight_directions.length; i++) {\n        let [attack_squares, attack_piece] = attacked_squares(squares, straight_directions[i], king_location, player, ['Queen', 'Rook']);\n        if (attack_piece !== null) {\n            checked_squares = checked_squares.concat(attack_squares);\n            attacking_pieces.push(attack_piece);\n        }\n    }\n\n    /* Check if square is under attack by knights*/\n    for (i = 0; i < knight_moves.length; i++) {\n        let end_piece = squares[knight_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Knight') {\n                checked_squares = checked_squares.concat([knight_moves[i]]);\n                attacking_pieces.push(end_piece);\n            }\n        }\n    }\n    /* Check if square is under attack by pawns*/\n    for (i = 0; i < pawn_moves.length; i++) {\n        let end_piece = squares[pawn_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Pawn') {\n                checked_squares = checked_squares.concat([pawn_moves[i]]);\n                attacking_pieces.push(end_piece);\n            }\n        }\n    }\n\n    return [attacking_pieces, checked_squares];\n}\n\n/* Return the squares that are under attack and the piece that is attacking*/\nfunction attacked_squares(squares, move_direction, start_location, player, piece_types) {\n    let end_location = direction(move_direction, start_location, player);\n    let attacked_squares = [end_location];\n\n    while (squares[end_location] === null) {\n        end_location = direction(move_direction, end_location, player);\n        attacked_squares.push(end_location);\n    }\n    let end_piece = squares[end_location];\n    if (end_piece !== 'boundary' && end_piece.player !== player) {\n        for (var i = 0; i < piece_types.length; i++) {\n            if (piece_types[i] === end_piece.name) {\n                attacked_squares.push(end_location);\n                return [attacked_squares, end_piece];\n            }\n        }\n    }\n    return [null, null];\n}\n\n/* Check if square is under attack by opposing pieces */\nfunction is_attacked(squares, square_location, player) {\n\n    let is_attacked = false;\n    let attacking_pieces = {};\n    let attacking_piece = null;\n\n    let up_right = right(1, forward(1, square_location, player), player);\n    let up_left = left(1, forward(1, square_location, player), player);\n\n    let pawn_moves = [up_right, up_left];\n    let knight_moves = get_knight_moves(square_location, player);\n    let king_moves = get_king_moves(square_location, player);\n    let diag_directions = [[1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let straight_directions = [[0, 1], [0, -1], [-1, 0], [1, 0]];\n\n    /* check for bishop/queen attacks */\n    for (var i = 0; i < diag_directions.length; i++) {\n        attacking_piece = direction_is_attacked(squares, diag_directions[i], square_location, player, ['Queen', 'Bishop']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n    /* Check for rook/queen attacks */\n    for (i = 0; i < straight_directions.length; i++) {\n        attacking_piece = direction_is_attacked(squares, straight_directions[i], square_location, player, ['Queen', 'Rook']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n\n    /* Check if square is under attack by knights*/\n    for (i = 0; i < knight_moves.length; i++) {\n        let end_piece = squares[knight_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Knight') {\n                is_attacked = true;\n                attacking_pieces[knight_moves[i]] = 'knight_attack';\n            }\n        }\n    }\n    /* Check if square is under attack by pawns*/\n    for (i = 0; i < pawn_moves.length; i++) {\n        let end_piece = squares[pawn_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Pawn') {\n                is_attacked = true;\n                attacking_pieces[pawn_moves[i]] = 'pawn_attack';\n            }\n        }\n    }\n\n    /* Check if square is under attack by king. */\n    for (i = 0; i < king_moves.length; i++) {\n        let end_piece = squares[king_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'King') {\n                is_attacked = true;\n            }\n        }\n    }\n\n    return [is_attacked, attacking_pieces];\n}\n\n/* Get pieces which are pinned to the king */\nfunction get_pinned_pieces(squares, king_location, player) {\n    let pinned_pieces = {};\n    let pin_info = null;\n    let pinned_directions = [[0, 1], [0, -1], [-1, 0], [1, 0], [1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let pin_direction = null;\n\n    for (var x = 0; x < pinned_directions.length; x++) {\n        pin_direction = pinned_directions[x];\n        if (pin_direction[0] === 0 || pin_direction[1] === 0) {\n            pin_info = get_pinned_piece(squares, pin_direction, king_location, player, ['Queen', 'Rook']);\n        }\n        else {\n            pin_info = get_pinned_piece(squares, pin_direction, king_location, player, ['Queen', 'Bishop']);\n        }\n        if (pin_info !== null) {\n            pinned_pieces[pin_info[0]] = pin_info[1];\n        }\n    }\n    return pinned_pieces;\n}\n/* Check for a pinned piece given an attacking direction towards the king */\nfunction get_pinned_piece(squares, pin_direction, king_location, player, piece_types) {\n    let pin_location = direction(pin_direction, king_location, player);\n    let pinned_piece = null;\n    /* Go until you run into a piece or boundary */\n    while (squares[pin_location] === null) {\n        pin_location = direction(pin_direction, pin_location, player);\n    }\n\n    /* If you run into same player piece, go until you run into the next piece or boundary */\n    if (squares[pin_location] !== 'boundary' && squares[pin_location].player === player) {\n        pinned_piece = pin_location;\n        pin_location = direction(pin_direction, pin_location, player);\n        while (squares[pin_location] === null) {\n            pin_location = direction(pin_direction, pin_location, player);\n        }\n        /* Check if piece on the other end is a piece type associated with a pin */\n        if (squares[pin_location] !== 'boundary' && squares[pin_location].player !== player) {\n            for (var i = 0; i < piece_types.length; i++) {\n                if (squares[pin_location].name === piece_types[i]) {\n                    return [pinned_piece, pin_direction];\n                }\n            }\n        }\n    }\n    return null;\n}\n\nfunction pinned_en_passant(squares,en_passant_square, king_location, player) {\n    let en_passant_location = forward(1,en_passant_square);\n    let special_squares = squares.slice();\n    special_squares[en_passant_location] = null;\n\n    return get_pinned_pieces(special_squares, king_location, player)\n}\n\n/****************************************************** Move Checking/Exploring and Board Navigating Helper Functions *********************************************************/\n\n/* Given a possible pawn move check if the move is legal and add the move */\nfunction create_pawn_move(pawn, pawn_location, pawn_end_location, pinned_pieces, move_direction, is_en_passant, en_passant_capture, en_passant_pins) {\n    let legal_moves = [];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    if (pawn_location in pinned_pieces) {\n        pin_direction = pinned_pieces[pawn_location];\n        inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n\n        /* Can only move towards King or away from king when pinned */\n        if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\n            if (is_en_passant) {\n                legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\n            }\n            else {\n                legal_moves.push(make_move(pawn_location, pawn_end_location));\n            }\n        }\n    }\n    else {\n        if (is_en_passant) {\n            if (pawn_location in en_passant_pins) {\n                pin_direction = en_passant_pins[pawn_location];\n                inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n                if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\n                    legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\n                }\n            }\n            else {\n                legal_moves.push(en_passant(pawn_location, pawn_end_location, en_passant_capture));\n            }\n        }\n        else {\n            /*Handle Promotions*/\n            if (pawn_end_location >= 91 || pawn_end_location <= 28) {\n                let knight_piece = new Knight(pawn.player);\n                let bishop_piece = new Bishop(pawn.player);\n                let rook_piece = new Rook(pawn.player);\n                let queen_piece = new Queen(pawn.player);\n\n                let pieces = [knight_piece, bishop_piece, rook_piece, queen_piece];\n\n                for (var k = 0; k < pieces.length; k++) {\n                    legal_moves.push(promote(pieces[k], pawn_location, pawn_end_location));\n                }\n            }\n            else {\n                legal_moves.push(make_move(pawn_location, pawn_end_location));\n            }\n        }\n    }\n    return legal_moves;\n}\n\n/* Get possible moves and captures for rooks, queens, and bishops (straight pieces) with respect to direction */\nfunction moves_and_captures(squares, move_direction, start_location, player, piece) {\n    let legal_moves = [];\n    let end_location = direction(move_direction, start_location, player);\n\n    while (squares[end_location] === null) {\n        legal_moves.push(make_move(start_location, end_location));\n        end_location = direction(move_direction, end_location, player);\n    }\n    if (squares[end_location] !== 'boundary' && squares[end_location].player !== player) {\n        legal_moves.push(make_move(start_location, end_location));\n    }\n    return legal_moves;\n}\n/* Get Knight move directions */\nfunction get_knight_moves(location, player) {\n\n    let up_right = right(1, forward(2, location, player), player);\n    let up_left = left(1, forward(2, location, player), player);\n    let down_right = right(1, back(2, location, player), player);\n    let down_left = left(1, back(2, location, player), player);\n    let right_up = right(2, forward(1, location, player), player);\n    let right_down = right(2, back(1, location, player), player);\n    let left_up = left(2, forward(1, location, player), player);\n    let left_down = left(2, back(1, location, player), player);\n\n    let moves = [up_right, up_left, down_right, down_left, right_up, right_down, left_up, left_down];\n    return moves;\n}\n/* Get King move directions */\nfunction get_king_moves(location, player) {\n\n    let up = forward(1, location, player);\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let move_left = left(1, location, player);\n    let move_right = right(1, location, player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let down = back(1, location, player);\n\n    let moves = [up, up_right, up_left, move_left, move_right, down_right, down_left, down];\n    return moves;\n}\n\n/* Standard move making.  Set start square to null and end square to piece value */\nfunction make_move(start, end) {\n\n    let move = new Move(start, end, null, null, null, null)\n    return move;\n}\n/* Function Promote */\nfunction promote(piece, start, end) {\n\n    let move = new Move(start, end, null, null, null, piece)\n    return move;\n}\n/* Castling Requires special move making */\nfunction castle(king_start, king_end, rook_start, rook_end) {\n    let move = new Move(king_start, king_end, null, rook_start, rook_end, null);\n    return move;\n}\n/* En Passant requires special move making */\nfunction en_passant(start, end, captured_location) {\n    let move = new Move(start, end, captured_location, null, null, null);\n    return move;\n}\n\n/* Abstact away difference between black and white moves. All from perspective of player. */\nfunction direction(directions, location, player) {\n    let x = directions[0];\n    let y = directions[1];\n\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let up = forward(1, location, player);\n    let down = back(1, location, player);\n    let move_right = right(1, location, player);\n    let move_left = left(1, location, player);\n\n    if (x === 0 && y === 1) {\n        return up;\n    }\n    else if (x === -1 && y === 1) {\n        return up_left;\n    }\n    else if (x === 1 && y === 1) {\n        return up_right;\n    }\n    else if (x === 1 && y === 0) {\n        return move_right;\n    }\n    else if (x === -1 && y === 0) {\n        return move_left;\n    }\n    else if (x === 1 && y === -1) {\n        return down_right;\n    }\n    else if (x === -1 && y === -1) {\n        return down_left;\n    }\n    else if (x === 0 && y === -1) {\n        return down;\n    }\n}\n\nfunction forward(distance, location, player) {\n    if (player === 'white') {\n        return location - 10 * distance;\n    }\n    else {\n        return location + 10 * distance;\n    }\n}\nfunction back(distance, location, player) {\n    if (player === 'white') {\n        return location + 10 * distance;\n    }\n    else {\n        return location - 10 * distance;\n    }\n}\nfunction left(distance, location, player) {\n    if (player === 'white') {\n        return location - distance;\n    }\n    else {\n        return location + distance;\n    }\n}\nfunction right(distance, location, player) {\n    if (player === 'white') {\n        return location + distance;\n    }\n    else {\n        return location - distance;\n    }\n}\n\n/******************************************************** Board Representation Functions  **********************************************/\n\n\n/*This move creation function turns dragged moves from the UI into move objects */\nfunction create_move(start, end, position, promotion_piece) {\n    let squares = position.squares;\n    let piece = position.squares[start];\n    let en_passant = null;\n    let rook_start = null;\n    let rook_end = null;\n\n    /*For En passant*/\n    if (piece.name === 'Pawn') {\n        /* En Passant One way*/\n        if (Math.abs(start - end) === 9 && squares[end] === null) {\n            if (position.player === 'white') {\n                en_passant = start + 1;\n            }\n            else {\n                en_passant = start - 1;\n            }\n\n        }\n        else if (Math.abs(start - end) === 11 && squares[end] === null) {\n            if (position.player === 'white') {\n                en_passant = start - 1;\n            }\n            else {\n                en_passant = start + 1;\n            }\n        }\n    }\n\n    if (piece.name === 'King') {\n        /* kingside */\n        if ((end - start) === 2) {\n            rook_start = end + 1\n            rook_end = start + 1\n        }\n        else if ((start - end) === 2) {\n            rook_start = end - 2\n            rook_end = start - 1\n        }\n    }\n    return new Move(start, end, en_passant, rook_start, rook_end, promotion_piece)\n}\n\n\nexport { legal_moves, is_legal, engine_squares, normal_squares , get_king_locations, create_move, coordinate_change }\n","import { engine_squares} from './EngineMoves';\n\nclass Piece {\n  constructor(player, img_url, name){\n    this.player = player;\n    this.style = {backgroundImage: \"url('\"+img_url+\"')\"};\n    this.name = name;\n    this.url = img_url;\n    this.has_moved = false;\n  }\n}\n\nclass Pawn extends Piece {\n  constructor(player){\n    var url='https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg'\n    if (player === 'black') {\n        url = 'https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg'\n    }\n    super(player, url, 'Pawn');\n    this.just_moved_two = false;\n  }\n}\n\nclass Rook extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg'\n        }\n        super(player, url, 'Rook');\n    }\n}\n\nclass Knight extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg'\n        }\n        super(player, url, 'Knight')\n    }\n}\n\nclass Bishop extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg'\n        }\n        super(player, url, 'Bishop')\n    }\n}\n\nclass Queen extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg'\n        }\n        super(player, url, 'Queen')\n    }\n}\n\nclass King extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg'\n        }\n        super(player, url, 'King')\n    }\n}\n\n\nfunction initialize_board() {\n    var board = Array(64).fill(null)\n    for (var k = 0; k < 8; k++) {\n        board[k + 8] = new Pawn('black');\n        board[k + 48] = new Pawn('white');\n    };\n\n    var color = 'black';\n    for (var i = 0; i < 2; i++) {\n        if (i === 1) {\n            color = 'white'\n        }\n        board[i * 56] = new Rook(color);\n        board[i * 56 + 7] = new Rook(color);\n        board[i * 56 + 1] = new Knight(color);\n        board[i * 56 + 6] = new Knight(color);\n        board[i * 56 + 2] = new Bishop(color);\n        board[i * 56 + 5] = new Bishop(color);\n        board[i * 56 + 3] = new Queen(color);\n        board[i * 56 + 4] = new King(color);\n    }\n    return board\n}\n\nfunction initialize_engine_board() {\n    let board = initialize_board();\n    let engine_board = engine_squares(board);\n    return engine_board\n}\n\n\n\nexport {Pawn,Rook,Knight,Bishop,King,Queen, initialize_board, initialize_engine_board}","import React, { Component } from 'react';\nimport './App.css';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport ReactPiece from './DragPiece';\nimport DropSquare from './DropSquare';\nimport { Knight, Bishop, Rook, Queen, initialize_engine_board} from './Pieces.js';\nimport { legal_moves, is_legal, create_move} from './EngineMoves';\nimport {normal_squares,coordinate_change, ParseFen} from './BoardFunctions';\nimport { make_move, Position, alphabeta_search} from './Engine';\n\nclass Chess extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{ position: new Position('white', initialize_engine_board(), [95, 25], [1, 1, 1, 1], 0) }],\n      drag_end: null,\n      promotion:{class:'hidden',start: null, end: null, player: null},\n      status:null,\n    }\n  }\n  reset() {\n    this.setState({\n      history: [{ position: new Position('white', initialize_engine_board(), [95, 25], [1, 1, 1, 1], 0)}],\n      drag_end: null,\n      promotion:{class:'hidden',start: null, end: null, player: null},\n      status:null\n    });\n  }\n  back() {\n    const history = this.state.history.slice();\n    if (history.length === 1) {\n      return;\n    }\n    history.pop();\n\n    this.setState({\n      history: history,\n      status:null\n    });\n    }\n\n  setup_fen(value) {\n      let position = ParseFen(value);\n      if (position !== 'FEN Error') {\n          this.setState({\n              history: [{ position: position }],\n              drag_end: null,\n              promotion: { class: 'hidden', start: null, end: null, player: null },\n              status: null\n          });\n      }\n      else {\n          alert('FEN ERROR');\n      }\n  }\n\n  engine_move() {\n    const history = this.state.history.slice();\n    const position = history[history.length - 1].position;\n\n    //Time in milliseconds\n    let search_time = 1000;\n    let INFINITY = 10000;\n    let engine_move = alphabeta_search(position, 10, -INFINITY, INFINITY, null, performance.now(), search_time).move;\n  \n    if (engine_move === null) {\n        this.setState({\n            status: 'Game Over',\n        });\n        return;\n    }\n\n    let new_position = make_move(position, engine_move);\n    this.setState({\n      history: history.concat([{position: new_position}]),\n    });\n  }\n\n  handle_drop(id) {\n    this.setState({drag_end: id});\n  }\n\n  handle_drag_end(id) {\n    const history = this.state.history.slice();\n    const position = history[history.length - 1].position;\n\n    let drag_start = coordinate_change(id);\n    let drag_end = coordinate_change(this.state.drag_end);\n    let piece = position.squares[drag_start];\n    /* promotions */\n    if ((drag_end <= 28 || drag_end >= 91) && piece.name === 'Pawn'){\n      let promotion = {class:'promotion_container',start: drag_start, end: drag_end, player: position.player}\n      this.setState({promotion:promotion})\n      return;\n    }\n    this.change_states(history, position, drag_start, drag_end, null);\n  };\n\n  handle_promotion(piece) {\n    const history = this.state.history.slice();\n    const position = history[history.length - 1].position;\n    const promotion = this.state.promotion;\n\n    let start = promotion['start'];\n    let end = promotion['end'];\n\n    this.change_states(history, position, start, end, piece)\n\n    this.setState({\n      promotion:{class:'hidden',start: null, end: null, player: null}\n    });\n  }\n\n  change_states(history, position, start, end, promotion_piece) {\n      let possible_moves = legal_moves(position);\n      let move = create_move(start, end, position, promotion_piece);\n      if (is_legal(move, possible_moves)) {\n        let new_position = make_move(position, move);\n        let new_moves = legal_moves(new_position);\n    \n        if (new_moves.length === 0) {\n            this.setState({\n              status: 'Game Over',\n            });\n        }\n      \n      this.setState({\n        history: history.concat([{position: new_position}]),\n        drag_end: null,\n      });\n    }\n  }\n\n    render() {\n    let history= this.state.history;\n    let current_position = history[history.length - 1].position\n    let current_squares = normal_squares(current_position.squares);\n    let player = current_position.player;\n    let promotion_class = this.state.promotion['class'];\n    let status = this.state.status;\n\n    return (\n    <div className = 'game_container'>\n      <div className='status'> {status} </div>\n      <Buttons \n      back = {() => this.back()}\n      reset = {() => this.reset()}\n      engine_move = {() => this.engine_move()}\n      />\n      <div className = 'board_container' >\n        <Board \n          squares = {current_squares}\n          onDrop = {(id) => this.drop(id)}\n          player = {player}\n          handle_drop={(id) => this.handle_drop(id)}\n          handle_drag_end = {(id) => this.handle_drag_end(id)}\n        />\n      </div>\n      <FenPosition\n      setup_fen={(value) => this.setup_fen(value)}\n      />\n      <Promotion\n        className = {promotion_class}\n        player = {player}\n        handle_promotion = {(piece) => this.handle_promotion(piece)}\n      />\n    </div>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  renderSquares() {\n    var html_board = [];\n    var color = false;\n    for (var i = 0; i < 8; i ++){\n    color = !color;\n    var html_row = [];\n      for (var k = 0; k < 8; k ++){\n        let id = i*8 + k\n        let current_square = <Square \n          value={this.props.squares[id]} \n          key={id} \n          color={color} \n          player = {this.props.player}\n          handle_drop={() => this.props.handle_drop(id)}\n          handle_drag_end = {(id) => this.props.handle_drag_end(id)}\n          id = {id}\n        />;\n        html_row.push(current_square);\n        color = !color\n      }\n      html_row = <div className = \"board_row\" key = {i}> {html_row} </div>\n      html_board.push(html_row)\n    }\n    return html_board\n  }\n  render() {\n  return (\n    <div>\n    {this.renderSquares()}\n    </div>\n  );\n  }\n}\n\nclass Square extends React.Component {\n    renderSquare(color) {\n        var class_name = \"dark square\"\n        var style = null;\n        var url = null;\n        var player = null;\n\n        if (color) {\n            class_name = \"light square\"\n        }\n        if (this.props.value) {\n            style = this.props.value.style;\n            url = this.props.value.url;\n            player = this.props.value.player;\n        }\n        if (this.props.player === player) {\n          return (\n          <div className={class_name}>\n            <ReactPiece \n              url={url} \n              id = {this.props.id}\n              handle_drag_end = {(id) => this.props.handle_drag_end(id)}\n            /> \n          </div> );\n        }\n        else {\n            return (\n            <DropSquare \n              class_name={class_name} \n              style={style} \n              handle_drop={() => this.props.handle_drop()}\n            /> );\n        }\n    }\n\n  render() {\n    var color = this.props.color;\n    return (\n    <React.Fragment>\n      {this.renderSquare(color)}\n    </React.Fragment>\n    );\n  }\n}\n\nfunction Buttons(props) {\n  return (\n   <div className = 'button_container'>\n      <button \n      className = \"reset_button\" \n      onClick={() => props.reset()} > Reset\n      </button>\n      <button \n      className = \"back_button\" \n      onClick={() => props.back()} > Back \n      </button>\n      <button \n      className = \"engine_button\" \n      onClick={() => props.engine_move()} > Engine Move\n      </button>\n    </div>\n  );\n} \n\nclass FenPosition extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: '' };\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n    }\n\n    submit(event) {\n        event.preventDefault();\n        this.props.setup_fen(this.state.value);\n    }\n\n    render() {\n    return (\n        <form onSubmit={(event) => this.submit(event)} className='fen_input'>\n            <label>\n                FEN String: &nbsp;\n              <input type=\"text\" className = 'input_box' value={this.state.value} onChange={(event) => this.handleChange(event)} />\n            </label>\n            <input type=\"submit\" className = 'input_button' value=\"Set Position\" />\n        </form>\n    );\n    }\n\n}\n\nclass Promotion extends React.Component {\n  render(){\n    let knight_piece = new Knight(this.props.player);\n    let bishop_piece = new Bishop(this.props.player);\n    let rook_piece = new Rook(this.props.player);\n    let queen_piece = new Queen(this.props.player);\n\n    return (\n      <div className = {this.props.className}>\n        <div className=\"promotion\">\n            <button className = {\"promotion_button\"} style = {knight_piece.style} onClick={() => this.props.handle_promotion(knight_piece)}></button>\n            <button className = {\"promotion_button\"} style = {bishop_piece.style} onClick={() => this.props.handle_promotion(bishop_piece)}></button>\n            <button className = {\"promotion_button\"} style = {rook_piece.style} onClick={() => this.props.handle_promotion(rook_piece)}></button>\n            <button className = {\"promotion_button\"} style = {queen_piece.style} onClick={() => this.props.handle_promotion(queen_piece)}></button>\n        </div>\n      </div>\n    );\n  }\n} \n\n\nexport default DragDropContext(HTML5Backend)(Chess);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}