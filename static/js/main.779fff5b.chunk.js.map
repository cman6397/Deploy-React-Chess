{"version":3,"sources":["Constants.js","DragPiece.js","DropSquare.js","ChessMoves.js","Pieces.js","Engine.js","EngineMoves.js","Tests.js","App.js","serviceWorker.js","index.js"],"names":["ItemTypes","ReactPiece","_this","this","img","Image","src","props","url","onload","connectDragPreview","_this$props","connectDragSource","isDragging","react_default","a","createElement","className","alt","style","opacity","cursor","React","Component","DragSource","beginDrag","id","endDrag","monitor","component","didDrop","item","getItem","handle_drag_end","connect","dragSource","dragPreview","DropSquare","class_name","connectDropTarget","DropTarget","drop","handle_drop","dropTarget","isOver","legal_moves","squares","player","_engine_squares","engine_squares","_engine_squares2","Object","slicedToArray","boundary_squares","white_king_location","black_king_location","king_location","pinned_pieces","pin_info","pinned_directions","pin_direction","x","length","get_pinned_piece","get_pinned_pieces","_is_attacked","is_attacked","_is_attacked2","in_check","attacking_pieces","status","keys","king_moves","legal_boards","i","name","concat","pawn_moves","knight_moves","bishop_moves","rook_moves","attacking_piece","attacking_piece_location","move_direction","piece_types","splice","direction_is_attacked","in_check_handler","location","pawn","forward_one","forward","forward_two","left_one","left","right_one","right","diag_left","diag_right","has_moved","pinned_pawn_move","just_moved_two","knight","moves","get_knight_moves","push","make_move","bishop","inverse_direction","toString","moves_and_captures","rook","king","king_squares","slice","get_king_moves","white_king_start","castle","white_kingside_rook","black_king_start","black_kingside_rook","white_queenside_rook","black_queenside_rook","start_location","end_location","direction","end_piece","square_location","diag_directions","straight_directions","pin_location","pinned_piece","pawn_location","pawn_end_location","is_en_passant","en_passant_capture","en_passant","pieces","Knight","Bishop","Rook","Queen","k","piece","back","start","end","standard","king_start","king_end","rook_start","rook_end","captured_location","directions","y","up_right","up_left","down_right","down_left","up","down","move_right","move_left","distance","Array","fill","count","index","squares_repr","squares_rep","Piece","img_url","classCallCheck","backgroundImage","Pawn","possibleConstructorReturn","getPrototypeOf","call","King","initialize_board","board","color","initialize_engine_board","Game","king_locations","wk_location","bk_location","current_square","white","black","move","JSON","parse","stringify","console","log","make_engine_move_react","squares64","normal_squares","make_engine_move","squares120","test","t0","performance","now","total_positions","get_positions","depth","positions","new_positions","current_board","current_move","new_board","new_player","t1","set_king_locations","Chess","state","history","drag_end","promotion","class","setState","pop","engine_moves","possible_moves","new_squares","Math","floor","random","drag_start","piece_copy","change_states","abs","is_legal","_this2","boards","current_squares","promotion_class","Buttons","reset","engine_move","App_Board","onDragStart","onDragEnd","onDrop","App_Promotion","handle_promotion","Board","_this3","html_board","html_row","_loop","App_Square","value","key","renderSquares","Square","_this4","DragPiece","src_DropSquare","Fragment","renderSquare","onClick","Promotion","_this5","knight_piece","bishop_piece","rook_piece","queen_piece","DragDropContext","HTML5Backend","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.779fff5b.chunk.js","sourcesContent":["export const ItemTypes = {\n  PIECE: 'piece'\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from './Constants';\nimport { DragSource } from 'react-dnd';\nimport './App.css';\n\nconst pieceSource = {\n  beginDrag(props) {\n    const item = { id: props.id };\n    return item;\n  },\n  endDrag(props, monitor, component) {\n    if (!monitor.didDrop()) {\n      //Decided not to move piece maybe\n      return;\n    }\n    const item = monitor.getItem();\n    return props.handle_drag_end(item.id);\n  }\n};\n\nfunction collect(connect, monitor) {\n    return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n    };\n}\n\nclass ReactPiece extends React.Component {\n  componentDidMount() {\n    const img = new Image(46, 46);\n    img.src = this.props.url;\n    img.onload = () => this.props.connectDragPreview(img);\n  }\n  render() {\n    var url = this.props.url\n    const { connectDragSource, isDragging } = this.props;\n    return connectDragSource(\n    <div className = \"piece_container\">\n      <img src={url} alt ='' className = \"react_piece\" style={{\n        opacity: 1,\n        cursor: isDragging ? 'grabbing' : 'grab'\n      }}>\n      </img>\n    </div>\n    );\n  }\n  }\n\nReactPiece.propTypes = {\n  connectDragSource: PropTypes.func.isRequired,\n  isDragging: PropTypes.bool.isRequired\n};\n\nexport default DragSource(ItemTypes.PIECE, pieceSource, collect)(ReactPiece);\n\n\n\n\n\n\n\n","import React from 'react';\nimport { ItemTypes } from './Constants';\nimport { DropTarget } from 'react-dnd';\nimport './App.css';\n\nconst squareTarget = {\n    drop(props) {\n      return props.handle_drop();\n    }\n};\n\nfunction collect(connect, monitor) {\n    return {\n      connectDropTarget: connect.dropTarget(),\n      isOver: monitor.isOver()\n    };\n}\n\nclass DropSquare extends React.Component {\n    render() {\n        var style = this.props.style;\n        var class_name = this.props.class_name;\n        const connectDropTarget = this.props.connectDropTarget;\n        return connectDropTarget(\n            <div className={class_name} style={style}> </div>\n        )\n    }\n}\n  \n\nexport default DropTarget(ItemTypes.PIECE, squareTarget, collect)(DropSquare);","/********************************************** Legal Move Generation and Checking*************************************/\nimport {Knight, Bishop, Rook, Queen } from './Pieces.js';\n\n/* Return all legal moves given a board position and the player to move (white or black) */\nfunction legal_moves(squares, player) {\n    let [boundary_squares, white_king_location, black_king_location] = engine_squares(squares, player);\n    let king_location = (player === 'white') ? white_king_location : black_king_location;\n    let pinned_pieces = get_pinned_pieces(boundary_squares, king_location, player);\n    let [in_check, attacking_pieces] = is_attacked(boundary_squares, king_location, player);\n    let status = null;\n    /* Only King can move in double check */\n    if (in_check && Object.keys(attacking_pieces).length > 1) {\n        return king_moves(boundary_squares, king_location, player);\n    }\n    var legal_boards = [];\n\n    for (var i = 0; i < 120; i++) {\n        /* Skip empty and boundary squares */\n        if (boundary_squares[i] !== null && boundary_squares[i] !== 'boundary') {\n            /* Check for piece color and send move generation to subfunctions*/\n            if (boundary_squares[i].player === player){\n                if (boundary_squares[i].name === 'Pawn') {\n                    legal_boards = legal_boards.concat(pawn_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Knight') {\n                    legal_boards = legal_boards.concat(knight_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Bishop') {\n                    legal_boards = legal_boards.concat(bishop_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Rook') {\n                    legal_boards = legal_boards.concat(rook_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Queen') {\n                    legal_boards = legal_boards.concat(rook_moves(boundary_squares, i, player, pinned_pieces));\n                    legal_boards = legal_boards.concat(bishop_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'King') {\n                    legal_boards = legal_boards.concat(king_moves(boundary_squares, i, player));\n                }\n            }\n        }\n    }\n    \n    if (in_check) {\n        legal_boards = in_check_handler(boundary_squares, legal_boards, king_location, attacking_pieces, player);\n    }\n\n    if(legal_boards.length === 0){\n        if (in_check) {\n            status = 'Checkmate'\n        }\n        else {\n            status = 'Stalemate'\n        }\n    }\n\n    return [legal_boards, status];\n}\n\n\n/* Check if a given move is within the legal moves found */\nfunction is_legal(squares, legal_boards) {\n    let boundary_squares = engine_squares(squares)[0];\n    let is_legal = false;\n    for (var i = 0; i < legal_boards.length; i++) {\n        if (squares_repr(legal_boards[i][0]) === squares_repr(boundary_squares)) {\n            is_legal = true;\n        }\n    }\n    return is_legal;\n}\n\n/************************************************************ Piece Move Generation Functions ************************************************/\n\n/* Get legal moves for a pawn given a board position */\nfunction pawn_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    let pawn = squares[location];\n\n    let forward_one = forward(1,location, player);\n    let forward_two = forward(2, location, player);\n    let left_one = left(1, location, player);\n    let right_one = right(1, location, player);\n    let diag_left = left(1,forward(1,location,player),player)\n    let diag_right = right(1,forward(1,location,player),player)\n    \n    /*legal to move 2 spaces forward*/\n    if (!pawn.has_moved && squares[forward_two] === null && squares[forward_one] === null) {\n        legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, forward_two, pinned_pieces,[0,1],squares, false, null));\n    }\n    /*legal to move 1 space ahead*/\n    if (squares[forward_one] === null) {\n        legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, forward_one, pinned_pieces,[0,1],squares, false, null));\n    }\n    /*legal to take left*/\n    if (squares[diag_left] !== null && squares[diag_left] !== 'boundary') {\n        if (squares[diag_left].player !== player) {\n            legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_left, pinned_pieces,[-1,1],squares, false, null));\n        }\n    }\n    /*legal to take right*/\n    if (squares[diag_right] !== null && squares[diag_right] !== 'boundary') {\n        if (squares[diag_right].player !== player) {\n            legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_right, pinned_pieces,[1,1],squares, false, null));\n        }\n    }\n    /*legal to take en passant right*/\n    if (squares[right_one] !== null && squares[right_one] !== 'boundary') {\n        if (squares[right_one].name === 'Pawn') {\n            if (squares[right_one].player !== player && squares[right_one].just_moved_two) {\n                legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_right, pinned_pieces,[1,1],squares, true, right_one));\n            }\n        }\n    }\n    /*legal to take en passant left*/\n    if (squares[left_one] !== null && squares[left_one] !== 'boundary') {\n        if (squares[left_one].name === 'Pawn') {\n            if (squares[left_one].player !== player && squares[left_one].just_moved_two) {\n                legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_left, pinned_pieces,[-1,1],squares, true, left_one));\n            }\n        }\n    }\n\n    return legal_boards;\n}\n\n/* Get legal moves for a knight given a board position */\nfunction knight_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    /*Impossible to move pinned knight*/\n    if (location in pinned_pieces) {\n        return legal_boards;\n    }\n    let knight = squares[location];\n    \n    let moves = get_knight_moves(location,player);\n\n    for (var i = 0; i < moves.length; i++) {\n        if (squares[moves[i]] === null && squares[moves[i]] !== 'boundary') {\n            legal_boards.push(make_move(knight, location, moves[i], squares));\n        }\n        else if (squares[moves[i]].player !== player && squares[moves[i]] !== 'boundary') {\n            legal_boards.push(make_move(knight, location, moves[i], squares));\n        }\n    }\n    \n    return legal_boards;\n}\n\n/* Get legal moves for bishop given board position */\nfunction bishop_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    let bishop = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[1,1],[-1,1],[1,-1],[-1,-1]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0]*-1, pin_direction[1]*-1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n            }\n        }\n        else {\n            legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n        }\n    }\n    return legal_boards;\n}\n/* Get legal moves for a rook given a board position*/\nfunction rook_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    let rook = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[0,1],[0,-1],[-1,0],[1,0]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0]*-1, pin_direction[1]*-1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, rook));\n            }\n        }\n        else {\n            legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, rook));\n        }\n    }\n    return legal_boards;\n}\n/* Get legal moves for a king given a board position */\nfunction king_moves(squares, location, player) {\n    let legal_boards = [];\n\n    let king = squares[location];\n\n    /* Take King off the board for calculating normal move attacking squares */\n    let king_squares = squares.slice();\n    king_squares[location] = null;\n\n    let moves = get_king_moves(location, player);\n\n    /* Regular Moves (non castling) */\n    for (var i = 0; i < moves.length; i++) {\n        /* Move to empty square */\n        if (squares[moves[i]] === null) {\n            if (!is_attacked(king_squares,moves[i],player)[0]) {\n                legal_boards.push(make_move(king, location, moves[i], squares));\n            }\n        }\n        /* Capture */\n        else if (squares[moves[i]] !== 'boundary' && squares[moves[i]].player !== player && !is_attacked(king_squares,moves[i],player)[0]) {\n            legal_boards.push(make_move(king, location, moves[i], squares));\n        }\n    }\n\n    /* Castling */\n    let white_kingside_rook = 98;\n    let white_queenside_rook = 91;\n    let black_kingside_rook = 28;\n    let black_queenside_rook = 21;\n    let white_king_start = 95;\n    let black_king_start = 25;\n\n    if (!king.has_moved && !is_attacked(squares,location,player)[0]) {\n        /* White Kingside */\n        if (location === white_king_start && squares[white_kingside_rook] !== null && !squares[white_kingside_rook].has_moved && squares[white_king_start + 1] === null && squares[white_king_start + 2] === null ) {\n            if (!is_attacked(squares,white_king_start + 1,player)[0] && !is_attacked(squares,white_king_start + 2,player)[0]) {\n                legal_boards.push(castle(king, white_king_start, white_king_start + 2, squares[white_kingside_rook], white_kingside_rook, white_kingside_rook-2, squares));\n            }\n        }\n        /* Black Kingside */\n        if (location === black_king_start && squares[black_kingside_rook] !== null && !squares[black_kingside_rook].has_moved && squares[black_king_start + 1] === null && squares[black_king_start + 2] === null) {\n            if (!is_attacked(squares,black_king_start + 1,player)[0] && !is_attacked(squares,black_king_start + 2,player)[0]) {\n                legal_boards.push(castle(king, black_king_start, black_king_start + 2, squares[black_kingside_rook], black_kingside_rook, black_kingside_rook - 2, squares));\n            }\n        }\n        /* White Queenside */\n        if (location === white_king_start && squares[white_queenside_rook] !== null && !squares[white_queenside_rook].has_moved && squares[white_king_start - 1] === null && squares[white_king_start - 2] === null && squares[white_king_start - 3] === null) {\n            if (!is_attacked(squares,white_king_start - 1,player)[0] && !is_attacked(squares,white_king_start - 2,player)[0]) {\n            legal_boards.push(castle(king, white_king_start, white_king_start - 2, squares[white_queenside_rook], white_queenside_rook, white_queenside_rook + 3, squares));\n            }\n        }\n        /* Black Queenside */\n        if (location === black_king_start && squares[black_queenside_rook] !== null && !squares[black_queenside_rook].has_moved && squares[black_king_start - 1] === null && squares[black_king_start - 2] === null && squares[black_king_start - 3] === null) {\n            if (!is_attacked(squares,black_king_start - 1,player)[0] && !is_attacked(squares,black_king_start - 2,player)[0]) {\n                legal_boards.push(castle(king, black_king_start, black_king_start - 2, squares[black_queenside_rook], black_queenside_rook, black_queenside_rook + 3, squares));\n            }\n        }\n    }\n    return legal_boards;\n}\n\n/************************************************************* Pinned Pieces and King Checks *******************************************************************/\n\n/* Eliminate moves where king is still in check from originally checking piece.  Only for in check positions.*/\nfunction in_check_handler(squares, legal_boards, king_location, attacking_piece, player) {\n    let attacking_piece_location = Object.keys(attacking_piece)[0];\n    let move_direction = attacking_piece[attacking_piece_location];\n    let piece_types = [squares[attacking_piece_location].name];\n\n    for (var i = legal_boards.length - 1; i >= 0; i--) {\n        /* Knight or Pawn attacks must be dodged or taken*/\n        if (move_direction === \"knight_attack\" || move_direction === \"pawn_attack\") {\n            if (legal_boards[i][0][attacking_piece_location].player !== player && legal_boards[i][0][king_location] !== null) {\n                legal_boards.splice(i, 1);\n            }\n        }\n        else if (direction_is_attacked(legal_boards[i][0], move_direction, king_location, player, piece_types) !== null && legal_boards[i][0][king_location] !== null) { \n            legal_boards.splice(i, 1);\n        }\n    }\n\n    return legal_boards;\n}\n\n/* Check if King is under attack from a specified direction */\nfunction direction_is_attacked(squares, move_direction, start_location, player, piece_types){\n    let end_location = direction(move_direction,start_location,player);\n    let attacking_piece = null;\n\n    while (squares[end_location] === null) {\n        end_location = direction(move_direction,end_location,player);\n    }\n    let end_piece = squares[end_location];\n    if (end_piece !== 'boundary' && end_piece.player !== player){\n        for (var i = 0; i < piece_types.length; i++) {\n            if (piece_types[i] === end_piece.name) {\n                attacking_piece = [end_location, move_direction];\n            }\n        }\n    }\n    return attacking_piece;\n}\n/* Check if square is under attack by opposing pieces */\nfunction is_attacked(boundary_squares, square_location, player) {\n\n    let is_attacked = false;\n    let attacking_pieces = {};\n    let attacking_piece = null;\n\n    let up_right = right(1, forward(1, square_location, player), player);\n    let up_left = left(1, forward(1, square_location, player), player);\n\n    let pawn_moves = [up_right, up_left];\n    let knight_moves = get_knight_moves(square_location, player);\n    let king_moves = get_king_moves(square_location,player);\n    let diag_directions = [[1,1],[-1,1],[1,-1],[-1,-1]];\n    let straight_directions = [[0,1],[0,-1],[-1,0],[1,0]];\n\n    /* check for bishop/queen attacks */\n    for (var i = 0; i < diag_directions.length; i++) {\n        attacking_piece = direction_is_attacked(boundary_squares,diag_directions[i],square_location,player,['Queen', 'Bishop']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n    /* Check for rook/queen attacks */\n    for (i = 0; i < straight_directions.length; i++) {\n        attacking_piece = direction_is_attacked(boundary_squares,straight_directions[i],square_location,player,['Queen', 'Rook']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n\n    /* Check if square is under attack by knights*/\n    for (i = 0; i < knight_moves.length; i++) {\n        let end_piece = boundary_squares[knight_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null){\n            if(end_piece.player !== player && end_piece.name === 'Knight') {\n                is_attacked = true;\n                attacking_pieces[knight_moves[i]] = 'knight_attack';\n            }\n        }\n    }\n    /* Check if square is under attack by pawns*/\n    for (i = 0; i < pawn_moves.length; i++) {\n        let end_piece = boundary_squares[pawn_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null){\n            if(end_piece.player !== player && end_piece.name === 'Pawn') {\n                is_attacked = true;\n                attacking_pieces[pawn_moves[i]] = 'pawn_attack';\n            }\n        }\n    }\n\n    /* Check if square is under attack by king. */\n    for (i = 0; i < king_moves.length; i++) {\n        let end_piece = boundary_squares[king_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null){\n            if(end_piece.player !== player && end_piece.name === 'King') {\n                is_attacked = true;\n            }\n        }\n    }\n\n    return [is_attacked, attacking_pieces];\n}\n/* Get pieces which are pinned to the king */\nfunction get_pinned_pieces(boundary_squares, king_location, player) {\n    let pinned_pieces = {};\n    let pin_info = null;\n    let pinned_directions = [[0,1],[0,-1],[-1,0],[1,0],[1,1],[-1,1],[1,-1],[-1,-1]];\n    let pin_direction = null;\n\n    for (var x = 0; x < pinned_directions.length; x++) {\n        pin_direction = pinned_directions[x];\n        if (pin_direction[0] === 0 || pin_direction[1] === 0) {\n            pin_info = get_pinned_piece(boundary_squares,pin_direction,king_location,player,['Queen','Rook']);\n        }\n        else {\n            pin_info = get_pinned_piece(boundary_squares,pin_direction,king_location,player,['Queen','Bishop']);\n        }\n        if (pin_info !== null) {\n            pinned_pieces[pin_info[0]] = pin_info[1];\n        }\n    }\n    return pinned_pieces;\n}\n/* Check for a pinned piece given an attacking direction towards the king */\nfunction get_pinned_piece(boundary_squares, pin_direction, king_location, player, piece_types) {\n    let pin_location = direction(pin_direction, king_location, player);\n    let pinned_piece = null;\n    /* Go until you run into a piece or boundary */\n    while (boundary_squares[pin_location] === null) {\n        pin_location = direction(pin_direction, pin_location, player);\n    }\n    /* If you run into same player piece, go until you run into the next piece or boundary */\n    if (boundary_squares[pin_location] !== 'boundary' && boundary_squares[pin_location].player === player) {\n        pinned_piece = pin_location;\n        pin_location = direction(pin_direction, pin_location, player);\n        while (boundary_squares[pin_location] === null) {\n            pin_location = direction(pin_direction, pin_location, player);\n        }\n        /* Check if piece on the other end is a piece type associated with a pin */\n        if (boundary_squares[pin_location] !== 'boundary' && boundary_squares[pin_location].player !== player) {\n            for (var i = 0; i < piece_types.length; i++){\n                if (boundary_squares[pin_location].name === piece_types[i]){\n                    return [pinned_piece, pin_direction];\n                }\n            }\n        }\n    }\n    return null;\n}\n/****************************************************** Move Checking/Exploring and Board Navigating Helper Functions *********************************************************/\n\n/* Given a possible pawn move check if the move is legal and add the move */\nfunction pinned_pawn_move(pawn, pawn_location, pawn_end_location, pinned_pieces, move_direction, squares, is_en_passant, en_passant_capture) {\n    let legal_boards = [];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    if (pawn_location in pinned_pieces) {\n        pin_direction = pinned_pieces[pawn_location];\n        inverse_direction = [pin_direction[0]*-1, pin_direction[1]*-1];\n\n        /* Can only move towards King or away from king when pinned */\n        if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\n            if ( is_en_passant) {\n                legal_boards.push(en_passant(pawn, pawn_location, pawn_end_location, en_passant_capture, squares));\n            }\n            else {\n                legal_boards.push(make_move(pawn,pawn_location,pawn_end_location,squares));\n            }\n        }\n    }\n    else {\n        if ( is_en_passant) {\n            legal_boards.push(en_passant(pawn, pawn_location, pawn_end_location, en_passant_capture, squares));\n        }\n        else {\n            /*Handle Promotions*/\n            if (pawn_end_location >= 91 || pawn_end_location <= 28) {\n                let knight_piece = new Knight(pawn.player);\n                let bishop_piece = new Bishop(pawn.player);\n                let rook_piece = new Rook(pawn.player);\n                let queen_piece = new Queen(pawn.player);\n\n                let pieces = [knight_piece,bishop_piece,rook_piece,queen_piece];\n\n                for (var k = 0; k < pieces.length; k++) {\n                    legal_boards.push(make_move(pieces[k],pawn_location,pawn_end_location,squares));\n                }\n            }\n            else{\n                legal_boards.push(make_move(pawn,pawn_location,pawn_end_location,squares));\n            }\n        }\n    }\n    return legal_boards;\n}\n\n/* Get possible moves and captures for rooks, queens, and bishops (straight pieces) with respect to direction */\nfunction moves_and_captures(squares, move_direction, start_location, player, piece){\n    let legal_boards = [];\n    let end_location = direction(move_direction, start_location, player);\n\n    while (squares[end_location] === null) {\n        legal_boards.push(make_move(piece, start_location, end_location, squares));\n        end_location = direction(move_direction, end_location, player);\n    }\n    if (squares[end_location] !== 'boundary' && squares[end_location].player !== player) {\n        legal_boards.push(make_move(piece, start_location, end_location, squares));\n    }\n    return legal_boards;\n}\n/* Get Knight move directions */\nfunction get_knight_moves(location,player) {\n    \n    let up_right = right(1, forward(2, location, player), player);\n    let up_left = left(1, forward(2, location, player), player);\n    let down_right = right(1, back(2, location, player), player);\n    let down_left = left(1, back(2, location, player), player);\n    let right_up = right(2, forward(1, location, player), player);\n    let right_down = right(2, back(1, location, player), player);\n    let left_up = left(2, forward(1, location, player), player);\n    let left_down = left(2, back(1, location, player), player);\n\n    let moves = [up_right, up_left, down_right, down_left, right_up, right_down, left_up, left_down];\n    return moves;\n}\n/* Get King move directions */\nfunction get_king_moves(location,player) {\n\n    let up = forward(1, location, player);\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let move_left = left(1, location, player);\n    let move_right = right(1, location, player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let down = back(1, location, player);\n\n    let moves = [up, up_right, up_left, move_left, move_right, down_right, down_left, down];\n    return moves;\n}\n\n/* Standard move making.  Set start square to null and end square to piece value */\nfunction make_move(piece, start, end, squares) {\n    squares = squares.slice();\n    squares[start] = null;\n    squares[end] = piece;\n    return [squares, [start, end, piece, {'standard': true}]];\n}\n/* Castling Requires special move making */\nfunction castle(king, king_start, king_end, rook, rook_start, rook_end, squares) {\n    squares = squares.slice();\n    squares[king_start] = null;\n    squares[rook_start] = null;\n    squares[king_end] = king;\n    squares[rook_end] = rook;\n\n    return [squares, [king_start, king_end, king,{'castle': [rook_start, rook_end, rook]}]];\n}\n/* En Passant requires special move making */\nfunction en_passant(piece, start, end, captured_location, squares) {\n    squares = squares.slice();\n    squares[start] = null;\n    squares[end] = piece;\n    squares[captured_location] = null;\n\n    return [squares, [start, end, piece, {'en_passant': captured_location}]];\n}\n\n/* Abstact away difference between black and white moves. All from perspective of player. */\nfunction direction(directions, location, player) {\n    let x = directions[0];\n    let y = directions[1];\n\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let up = forward(1, location, player);\n    let down = back(1, location, player);\n    let move_right = right(1, location, player);\n    let move_left = left(1, location, player);\n\n    if (x === 0 && y === 1) {\n        return up;\n    }\n    else if (x === -1 && y === 1) {\n        return up_left;\n    }\n    else if (x === 1 && y === 1) {\n        return up_right;\n    }\n    else if (x === 1 && y === 0) {\n        return move_right;\n    }\n    else if (x === -1 && y === 0) {\n        return move_left;\n    }\n    else if (x === 1 && y === -1) {\n        return down_right;\n    }\n    else if (x === -1 && y === -1) {\n        return down_left;\n    }\n    else if (x === 0 && y === -1) {\n        return down;\n    }\n}\n\nfunction forward(distance, location, player) {\n    if (player === 'white') {\n        return location - 10*distance;\n    }\n    else {\n        return location + 10*distance;\n    }\n}\nfunction back(distance, location, player) {\n    if (player === 'white') {\n        return location + 10*distance;\n    }\n    else {\n        return location - 10*distance;\n    }\n}\nfunction left(distance, location, player) {\n    if (player === 'white') {\n        return location - distance;\n    }\n    else {\n        return location + distance;\n    }\n}\nfunction right(distance, location, player) {\n    if (player === 'white') {\n        return location + distance;\n    }\n    else {\n        return location - distance;\n    }\n}\n\n/******************************************************** Board Representation Functions  **********************************************/\n\n/* Add padding around board so moves don't wrap. Get king locations while looping. */\nfunction engine_squares(squares) {\n    let engine_squares = Array(120).fill(null);\n    let count = 0;\n    let index = 0;\n    let white_king_location = null;\n    let black_king_location = null;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y<10; y++) {\n            /*if boundary square*/\n            index=i*10+y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                engine_squares[index] = 'boundary';\n            }\n            else {\n                engine_squares[index] = squares[count];\n                if (squares[count] !== null && squares[count].name === \"King\") {\n                    if (squares[count].player === \"white\") {\n                        white_king_location = index;\n                    } \n                    else {\n                        black_king_location = index;\n                    }\n                }\n                count = count + 1;\n            }\n        }\n    }\n    return [engine_squares, white_king_location, black_king_location];\n}\n/* Turn padded board back into 64 Square board */\nfunction normal_squares(engine_squares) {\n    let squares = Array(64).fill(null);\n    let count = 0;\n    let index = 0;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y<10; y++) {\n            /*if boundary square*/\n            index=i*10+y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                //do nothing\n            }\n            else {\n                squares[count] = engine_squares[index];\n                count = count + 1;\n            }\n        }\n    }\n    return squares;\n}\n\n/* Represent board as a string for comparisons */\nfunction squares_repr(squares) {\n    let squares_rep = squares.slice();\n    for (var i = 0; i < squares_rep.length; i++) {\n        if (squares_rep[i] != null && squares_rep[i] !== 'boundary') {\n            squares_rep[i] = squares_rep[i].name + squares_rep[i].player;\n        }\n    }\n    return squares_rep.toString();\n}\n\nexport {legal_moves, is_legal, engine_squares, normal_squares}","import { engine_squares } from './ChessMoves';\n\nclass Piece {\n  constructor(player, img_url, name){\n    this.player = player;\n    this.style = {backgroundImage: \"url('\"+img_url+\"')\"};\n    this.name = name;\n    this.url = img_url;\n    this.has_moved = false;\n  }\n}\n\nclass Pawn extends Piece {\n  constructor(player){\n    var url='https://upload.wikimedia.org/wikipedia/commons/4/45/Chess_plt45.svg'\n    if (player === 'black') {\n        url = 'https://upload.wikimedia.org/wikipedia/commons/c/c7/Chess_pdt45.svg'\n    }\n    super(player, url, 'Pawn');\n    this.just_moved_two = false;\n  }\n}\n\nclass Rook extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/72/Chess_rlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/ff/Chess_rdt45.svg'\n        }\n        super(player, url, 'Rook');\n    }\n}\n\nclass Knight extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/7/70/Chess_nlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/e/ef/Chess_ndt45.svg'\n        }\n        super(player, url, 'Knight')\n    }\n}\n\nclass Bishop extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/b/b1/Chess_blt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/9/98/Chess_bdt45.svg'\n        }\n        super(player, url, 'Bishop')\n    }\n}\n\nclass Queen extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/1/15/Chess_qlt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/4/47/Chess_qdt45.svg'\n        }\n        super(player, url, 'Queen')\n    }\n}\n\nclass King extends Piece {\n    constructor(player) {\n        var url = 'https://upload.wikimedia.org/wikipedia/commons/4/42/Chess_klt45.svg'\n        if (player === 'black') {\n            url = 'https://upload.wikimedia.org/wikipedia/commons/f/f0/Chess_kdt45.svg'\n        }\n        super(player, url, 'King')\n    }\n}\n/*This move generation function is for the UI and it interprets the mouse moves not egine moves */\nfunction make_move(start, end, squares, piece) {\n\n    /*For En passant*/\n    if (piece.name === 'Pawn') {\n        if (Math.abs(start - end) === 16) {\n            piece.just_moved_two = true;\n\t\t\t\t}\n        else {\n            piece.just_moved_two = false;\n            /* En Passant.  Remove pawn to the direct left or right when en passant criteria is satisfied.*/\n            if (Math.abs(start - end) === 7 && squares[end] === null) {\n                if (piece.player === 'white') {\n                    squares[start + 1] = null;\n                }\n                else {\n                    squares[start - 1] = null;\n                }\n            }\n            else if (Math.abs(start - end) === 9 && squares[end] === null) {\n                if (piece.player === 'white') {\n                    squares[start - 1] = null;\n                }\n                else {\n                    squares[start + 1] = null;\n                }\n            }\n        }\n    }\n    /* For Castling */\n    if (piece.name === 'King') {\n        /* kingside */\n        if ((end - start) === 2) {\n            squares[start + 1] = squares[end + 1];\n            squares[end + 1] = null\n        }\n        else if ((start - end) === 2) {\n            squares[start - 1] = squares[end - 2];\n            squares[end - 2] = null\n        }\n    }\n    squares[start] = null;\n    squares[end] = piece;\n    piece.has_moved = true;\n}\n\nfunction initialize_board() {\n    var board = Array(64).fill(null)\n    for (var k = 0; k < 8; k++) {\n        board[k + 8] = new Pawn('black');\n        board[k + 48] = new Pawn('white');\n    };\n\n    var color = 'black';\n    for (var i = 0; i < 2; i++) {\n        if (i === 1) {\n            color = 'white'\n        }\n        board[i * 56] = new Rook(color);\n        board[i * 56 + 7] = new Rook(color);\n        board[i * 56 + 1] = new Knight(color);\n        board[i * 56 + 6] = new Knight(color);\n        board[i * 56 + 2] = new Bishop(color);\n        board[i * 56 + 5] = new Bishop(color);\n        board[i * 56 + 3] = new Queen(color);\n        board[i * 56 + 4] = new King(color);\n    }\n    return board\n}\n\nfunction initialize_engine_board() {\n    let board = initialize_board();\n    let engine_board = engine_squares(board)[0];\n    return engine_board\n}\n\nexport {Pawn,Rook,Knight,Bishop,King,Queen, initialize_board, initialize_engine_board, make_move}","import { engine_squares, normal_squares } from './ChessMoves';\n\nclass Game {\n    constructor(player, squares) {\n        this.player = player;\n        this.squares = squares;\n        this.king_locations = null;\n\n        /*\n        Additional properties to move to game state\n        this.castling_state = castling_state;\n        this.en_passant_targets = en_passant_targets;\n        this.en_passant_targets = en_passant_targets;\n        this.attacked_squares = null;\n        this.pinned_pieces = null;\n        this.pinning_pieces = null;\n        */\n    }\n\n    set_king_locations() {\n        /*White King Location & Black King location*/\n        let wk_location = null;\n        let bk_location = null;\n        let squares = this.squares;\n\n        for (var k = 0; k < squares.length; k++) {\n            let current_square = squares[k];\n            if (current_square !== null && current_square !== 'boundary') {\n                if (current_square.name === 'King') {\n                    if (current_square.player === 'white') {\n                        wk_location = k;\n                    }\n                    else {\n                        bk_location = k;\n                    }\n                }\n            }\n        }\n        this.king_locations = {'white': wk_location, 'black': bk_location};\n    }\n\n    make_move(move) {\n        let start = move[0];\n        let end = move[1];\n        let piece = JSON.parse(JSON.stringify(move[2]));\n        let squares = this.squares;\n\n        console.log(squares[start])\n        squares[start] = null;\n        squares[end] = piece;\n\n        piece.has_moved = true;\n\n        if ('en_passant' in move[3]) {\n            let taken_location = move[3]['en_passant'];\n            squares[taken_location] = null;\n        }\n        else if ('castle' in move[3]) {\n            let rook_moves = move[3]['castle'];\n            let rook = JSON.parse(JSON.stringify(rook_moves[2]));\n\n            squares[rook_moves[0]] = null;\n            squares[rook_moves[1]] = rook;\n            rook.has_moved = true;\n        }\n\n        if (piece.name === 'King') {\n            this.king_locations[this.player] = end;\n        }\n \n        (this.player === 'white') ? this.player = 'black' : this.player = 'white';\n        return squares;\n    }\n\n    /*\n    set_castle_state() {\n        this.castling_state = {wk:1, wq:1, bk: 1, bq: 1};\n    }\n    set_attacked_squares() {\n        Think about how to update attacked squares.  \n        this.attacked_squares = {w:attacked_squares,b:attacked_squares};\n    }\n    */\n}\n\n\n/* Engine Make move function for React board */\nfunction make_engine_move_react(squares64, move) {\n    let start = move[0];\n    let end = move[1];\n    let piece = JSON.parse(JSON.stringify(move[2]));\n    let squares = engine_squares(squares64)[0];\n\n    squares[start] = null;\n    squares[end] = piece;\n\n    piece.has_moved = true;\n\n    if ('en_passant' in move[3]){\n        let taken_location = move[3]['en_passant'];\n        squares[taken_location] = null;\n    }\n    else if ('castle' in move[3]){\n        let rook_moves = move[3]['castle'];\n        let rook = JSON.parse(JSON.stringify(rook_moves[2]));\n        \n        squares[rook_moves[0]] = null;\n        squares[rook_moves[1]] = rook;\n        rook.has_moved = true;\n    }\n    squares = normal_squares(squares);\n    return squares;\n}\n\n/* Engine Make move function for Engine*/\nfunction make_engine_move(squares120, move) {\n    let start = move[0];\n    let end = move[1];\n    let piece = JSON.parse(JSON.stringify(move[2]));\n    let squares = squares120;\n\n    squares[start] = null;\n    squares[end] = piece;\n\n    piece.has_moved = true;\n\n    if ('en_passant' in move[3]) {\n        let taken_location = move[3]['en_passant'];\n        squares[taken_location] = null;\n    }\n    else if ('castle' in move[3]) {\n        let rook_moves = move[3]['castle'];\n        let rook = JSON.parse(JSON.stringify(rook_moves[2]));\n\n        squares[rook_moves[0]] = null;\n        squares[rook_moves[1]] = rook;\n        rook.has_moved = true;\n    }\n    return squares;\n}\n\n\n\nexport {Game, make_engine_move_react, make_engine_move}","/********************************************** Legal Move Generation and Checking for Engine*************************************/\nimport { Knight, Bishop, Rook, Queen } from './Pieces.js';\n\n/* Return all legal moves given a board position and the player to move (white or black) */\nfunction legal_moves(squares, player, white_king_location, black_king_location) {\n    let boundary_squares = squares;\n    let king_location = (player === 'white') ? white_king_location : black_king_location;\n    let pinned_pieces = get_pinned_pieces(boundary_squares, king_location, player);\n    let [in_check, attacking_pieces] = is_attacked(boundary_squares, king_location, player);\n    let status = null;\n    /* Only King can move in double check */\n    if (in_check && Object.keys(attacking_pieces).length > 1) {\n        return king_moves(boundary_squares, king_location, player);\n    }\n    var legal_boards = [];\n\n    for (var i = 0; i < 120; i++) {\n        /* Skip empty and boundary squares */\n        if (boundary_squares[i] !== null && boundary_squares[i] !== 'boundary') {\n            /* Check for piece color and send move generation to subfunctions*/\n            if (boundary_squares[i].player === player) {\n                if (boundary_squares[i].name === 'Pawn') {\n                    legal_boards = legal_boards.concat(pawn_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Knight') {\n                    legal_boards = legal_boards.concat(knight_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Bishop') {\n                    legal_boards = legal_boards.concat(bishop_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Rook') {\n                    legal_boards = legal_boards.concat(rook_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'Queen') {\n                    legal_boards = legal_boards.concat(rook_moves(boundary_squares, i, player, pinned_pieces));\n                    legal_boards = legal_boards.concat(bishop_moves(boundary_squares, i, player, pinned_pieces));\n                }\n                else if (boundary_squares[i].name === 'King') {\n                    legal_boards = legal_boards.concat(king_moves(boundary_squares, i, player));\n                }\n            }\n        }\n    }\n\n    if (in_check) {\n        legal_boards = in_check_handler(boundary_squares, legal_boards, king_location, attacking_pieces, player);\n    }\n\n    if (legal_boards.length === 0) {\n        if (in_check) {\n            status = 'Checkmate'\n        }\n        else {\n            status = 'Stalemate'\n        }\n    }\n\n    return [legal_boards, status];\n}\n\n\n/* Check if a given move is within the legal moves found */\nfunction is_legal(squares, legal_boards) {\n    let is_legal = false;\n    for (var i = 0; i < legal_boards.length; i++) {\n        if (squares_repr(legal_boards[i][0]) === squares_repr(squares)) {\n            is_legal = true;\n        }\n    }\n    return is_legal;\n}\n\n/************************************************************ Piece Move Generation Functions ************************************************/\n\n/* Get legal moves for a pawn given a board position */\nfunction pawn_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    let pawn = squares[location];\n\n    let forward_one = forward(1, location, player);\n    let forward_two = forward(2, location, player);\n    let left_one = left(1, location, player);\n    let right_one = right(1, location, player);\n    let diag_left = left(1, forward(1, location, player), player)\n    let diag_right = right(1, forward(1, location, player), player)\n\n    /*legal to move 2 spaces forward*/\n    if (!pawn.has_moved && squares[forward_two] === null && squares[forward_one] === null) {\n        legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, forward_two, pinned_pieces, [0, 1], squares, false, null));\n    }\n    /*legal to move 1 space ahead*/\n    if (squares[forward_one] === null) {\n        legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, forward_one, pinned_pieces, [0, 1], squares, false, null));\n    }\n    /*legal to take left*/\n    if (squares[diag_left] !== null && squares[diag_left] !== 'boundary') {\n        if (squares[diag_left].player !== player) {\n            legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_left, pinned_pieces, [-1, 1], squares, false, null));\n        }\n    }\n    /*legal to take right*/\n    if (squares[diag_right] !== null && squares[diag_right] !== 'boundary') {\n        if (squares[diag_right].player !== player) {\n            legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_right, pinned_pieces, [1, 1], squares, false, null));\n        }\n    }\n    /*legal to take en passant right*/\n    if (squares[right_one] !== null && squares[right_one] !== 'boundary') {\n        if (squares[right_one].name === 'Pawn') {\n            if (squares[right_one].player !== player && squares[right_one].just_moved_two) {\n                legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_right, pinned_pieces, [1, 1], squares, true, right_one));\n            }\n        }\n    }\n    /*legal to take en passant left*/\n    if (squares[left_one] !== null && squares[left_one] !== 'boundary') {\n        if (squares[left_one].name === 'Pawn') {\n            if (squares[left_one].player !== player && squares[left_one].just_moved_two) {\n                legal_boards = legal_boards.concat(pinned_pawn_move(pawn, location, diag_left, pinned_pieces, [-1, 1], squares, true, left_one));\n            }\n        }\n    }\n\n    return legal_boards;\n}\n\n/* Get legal moves for a knight given a board position */\nfunction knight_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    /*Impossible to move pinned knight*/\n    if (location in pinned_pieces) {\n        return legal_boards;\n    }\n    let knight = squares[location];\n\n    let moves = get_knight_moves(location, player);\n\n    for (var i = 0; i < moves.length; i++) {\n        if (squares[moves[i]] === null && squares[moves[i]] !== 'boundary') {\n            legal_boards.push(make_move(knight, location, moves[i], squares));\n        }\n        else if (squares[moves[i]].player !== player && squares[moves[i]] !== 'boundary') {\n            legal_boards.push(make_move(knight, location, moves[i], squares));\n        }\n    }\n\n    return legal_boards;\n}\n\n/* Get legal moves for bishop given board position */\nfunction bishop_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    let bishop = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[1, 1], [-1, 1], [1, -1], [-1, -1]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n            }\n        }\n        else {\n            legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, bishop));\n        }\n    }\n    return legal_boards;\n}\n/* Get legal moves for a rook given a board position*/\nfunction rook_moves(squares, location, player, pinned_pieces) {\n    let legal_boards = [];\n    let rook = squares[location];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    let moves = [[0, 1], [0, -1], [-1, 0], [1, 0]]\n\n    for (var i = 0; i < moves.length; i++) {\n        if (location in pinned_pieces) {\n            pin_direction = pinned_pieces[location];\n            inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n            if (moves[i].toString() === pin_direction.toString() || moves[i].toString() === inverse_direction.toString()) {\n                legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, rook));\n            }\n        }\n        else {\n            legal_boards = legal_boards.concat(moves_and_captures(squares, moves[i], location, player, rook));\n        }\n    }\n    return legal_boards;\n}\n/* Get legal moves for a king given a board position */\nfunction king_moves(squares, location, player) {\n    let legal_boards = [];\n\n    let king = squares[location];\n\n    /* Take King off the board for calculating normal move attacking squares */\n    let king_squares = squares.slice();\n    king_squares[location] = null;\n\n    let moves = get_king_moves(location, player);\n\n    /* Regular Moves (non castling) */\n    for (var i = 0; i < moves.length; i++) {\n        /* Move to empty square */\n        if (squares[moves[i]] === null) {\n            if (!is_attacked(king_squares, moves[i], player)[0]) {\n                legal_boards.push(make_move(king, location, moves[i], squares));\n            }\n        }\n        /* Capture */\n        else if (squares[moves[i]] !== 'boundary' && squares[moves[i]].player !== player && !is_attacked(king_squares, moves[i], player)[0]) {\n            legal_boards.push(make_move(king, location, moves[i], squares));\n        }\n    }\n\n    /* Castling */\n    let white_kingside_rook = 98;\n    let white_queenside_rook = 91;\n    let black_kingside_rook = 28;\n    let black_queenside_rook = 21;\n    let white_king_start = 95;\n    let black_king_start = 25;\n\n    if (!king.has_moved && !is_attacked(squares, location, player)[0]) {\n        /* White Kingside */\n        if (location === white_king_start && squares[white_kingside_rook] !== null && !squares[white_kingside_rook].has_moved && squares[white_king_start + 1] === null && squares[white_king_start + 2] === null) {\n            if (!is_attacked(squares, white_king_start + 1, player)[0] && !is_attacked(squares, white_king_start + 2, player)[0]) {\n                legal_boards.push(castle(king, white_king_start, white_king_start + 2, squares[white_kingside_rook], white_kingside_rook, white_kingside_rook - 2, squares));\n            }\n        }\n        /* Black Kingside */\n        if (location === black_king_start && squares[black_kingside_rook] !== null && !squares[black_kingside_rook].has_moved && squares[black_king_start + 1] === null && squares[black_king_start + 2] === null) {\n            if (!is_attacked(squares, black_king_start + 1, player)[0] && !is_attacked(squares, black_king_start + 2, player)[0]) {\n                legal_boards.push(castle(king, black_king_start, black_king_start + 2, squares[black_kingside_rook], black_kingside_rook, black_kingside_rook - 2, squares));\n            }\n        }\n        /* White Queenside */\n        if (location === white_king_start && squares[white_queenside_rook] !== null && !squares[white_queenside_rook].has_moved && squares[white_king_start - 1] === null && squares[white_king_start - 2] === null && squares[white_king_start - 3] === null) {\n            if (!is_attacked(squares, white_king_start - 1, player)[0] && !is_attacked(squares, white_king_start - 2, player)[0]) {\n                legal_boards.push(castle(king, white_king_start, white_king_start - 2, squares[white_queenside_rook], white_queenside_rook, white_queenside_rook + 3, squares));\n            }\n        }\n        /* Black Queenside */\n        if (location === black_king_start && squares[black_queenside_rook] !== null && !squares[black_queenside_rook].has_moved && squares[black_king_start - 1] === null && squares[black_king_start - 2] === null && squares[black_king_start - 3] === null) {\n            if (!is_attacked(squares, black_king_start - 1, player)[0] && !is_attacked(squares, black_king_start - 2, player)[0]) {\n                legal_boards.push(castle(king, black_king_start, black_king_start - 2, squares[black_queenside_rook], black_queenside_rook, black_queenside_rook + 3, squares));\n            }\n        }\n    }\n    return legal_boards;\n}\n\n/************************************************************* Pinned Pieces and King Checks *******************************************************************/\n\n/* Eliminate moves where king is still in check from originally checking piece.  Only for in check positions.*/\nfunction in_check_handler(squares, legal_boards, king_location, attacking_piece, player) {\n    let attacking_piece_location = Object.keys(attacking_piece)[0];\n    let move_direction = attacking_piece[attacking_piece_location];\n    let piece_types = [squares[attacking_piece_location].name];\n\n    for (var i = legal_boards.length - 1; i >= 0; i--) {\n        /* Knight or Pawn attacks must be dodged or taken*/\n        if (move_direction === \"knight_attack\" || move_direction === \"pawn_attack\") {\n            if (legal_boards[i][0][attacking_piece_location].player !== player && legal_boards[i][0][king_location] !== null) {\n                legal_boards.splice(i, 1);\n            }\n        }\n        else if (direction_is_attacked(legal_boards[i][0], move_direction, king_location, player, piece_types) !== null && legal_boards[i][0][king_location] !== null) {\n            legal_boards.splice(i, 1);\n        }\n    }\n\n    return legal_boards;\n}\n\n/* Check if King is under attack from a specified direction */\nfunction direction_is_attacked(squares, move_direction, start_location, player, piece_types) {\n    let end_location = direction(move_direction, start_location, player);\n    let attacking_piece = null;\n\n    while (squares[end_location] === null) {\n        end_location = direction(move_direction, end_location, player);\n    }\n    let end_piece = squares[end_location];\n    if (end_piece !== 'boundary' && end_piece.player !== player) {\n        for (var i = 0; i < piece_types.length; i++) {\n            if (piece_types[i] === end_piece.name) {\n                attacking_piece = [end_location, move_direction];\n            }\n        }\n    }\n    return attacking_piece;\n}\n/* Check if square is under attack by opposing pieces */\nfunction is_attacked(boundary_squares, square_location, player) {\n\n    let is_attacked = false;\n    let attacking_pieces = {};\n    let attacking_piece = null;\n\n    let up_right = right(1, forward(1, square_location, player), player);\n    let up_left = left(1, forward(1, square_location, player), player);\n\n    let pawn_moves = [up_right, up_left];\n    let knight_moves = get_knight_moves(square_location, player);\n    let king_moves = get_king_moves(square_location, player);\n    let diag_directions = [[1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let straight_directions = [[0, 1], [0, -1], [-1, 0], [1, 0]];\n\n    /* check for bishop/queen attacks */\n    for (var i = 0; i < diag_directions.length; i++) {\n        attacking_piece = direction_is_attacked(boundary_squares, diag_directions[i], square_location, player, ['Queen', 'Bishop']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n    /* Check for rook/queen attacks */\n    for (i = 0; i < straight_directions.length; i++) {\n        attacking_piece = direction_is_attacked(boundary_squares, straight_directions[i], square_location, player, ['Queen', 'Rook']);\n        if (attacking_piece !== null) {\n            is_attacked = true;\n            attacking_pieces[attacking_piece[0]] = attacking_piece[1];\n        }\n    }\n\n    /* Check if square is under attack by knights*/\n    for (i = 0; i < knight_moves.length; i++) {\n        let end_piece = boundary_squares[knight_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Knight') {\n                is_attacked = true;\n                attacking_pieces[knight_moves[i]] = 'knight_attack';\n            }\n        }\n    }\n    /* Check if square is under attack by pawns*/\n    for (i = 0; i < pawn_moves.length; i++) {\n        let end_piece = boundary_squares[pawn_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'Pawn') {\n                is_attacked = true;\n                attacking_pieces[pawn_moves[i]] = 'pawn_attack';\n            }\n        }\n    }\n\n    /* Check if square is under attack by king. */\n    for (i = 0; i < king_moves.length; i++) {\n        let end_piece = boundary_squares[king_moves[i]];\n        if (end_piece !== 'boundary' && end_piece !== null) {\n            if (end_piece.player !== player && end_piece.name === 'King') {\n                is_attacked = true;\n            }\n        }\n    }\n\n    return [is_attacked, attacking_pieces];\n}\n/* Get pieces which are pinned to the king */\nfunction get_pinned_pieces(boundary_squares, king_location, player) {\n    let pinned_pieces = {};\n    let pin_info = null;\n    let pinned_directions = [[0, 1], [0, -1], [-1, 0], [1, 0], [1, 1], [-1, 1], [1, -1], [-1, -1]];\n    let pin_direction = null;\n\n    for (var x = 0; x < pinned_directions.length; x++) {\n        pin_direction = pinned_directions[x];\n        if (pin_direction[0] === 0 || pin_direction[1] === 0) {\n            pin_info = get_pinned_piece(boundary_squares, pin_direction, king_location, player, ['Queen', 'Rook']);\n        }\n        else {\n            pin_info = get_pinned_piece(boundary_squares, pin_direction, king_location, player, ['Queen', 'Bishop']);\n        }\n        if (pin_info !== null) {\n            pinned_pieces[pin_info[0]] = pin_info[1];\n        }\n    }\n    return pinned_pieces;\n}\n/* Check for a pinned piece given an attacking direction towards the king */\nfunction get_pinned_piece(boundary_squares, pin_direction, king_location, player, piece_types) {\n    let pin_location = direction(pin_direction, king_location, player);\n    let pinned_piece = null;\n    /* Go until you run into a piece or boundary */\n    while (boundary_squares[pin_location] === null) {\n        pin_location = direction(pin_direction, pin_location, player);\n    }\n    /* If you run into same player piece, go until you run into the next piece or boundary */\n    if (boundary_squares[pin_location] !== 'boundary' && boundary_squares[pin_location].player === player) {\n        pinned_piece = pin_location;\n        pin_location = direction(pin_direction, pin_location, player);\n        while (boundary_squares[pin_location] === null) {\n            pin_location = direction(pin_direction, pin_location, player);\n        }\n        /* Check if piece on the other end is a piece type associated with a pin */\n        if (boundary_squares[pin_location] !== 'boundary' && boundary_squares[pin_location].player !== player) {\n            for (var i = 0; i < piece_types.length; i++) {\n                if (boundary_squares[pin_location].name === piece_types[i]) {\n                    return [pinned_piece, pin_direction];\n                }\n            }\n        }\n    }\n    return null;\n}\n/****************************************************** Move Checking/Exploring and Board Navigating Helper Functions *********************************************************/\n\n/* Given a possible pawn move check if the move is legal and add the move */\nfunction pinned_pawn_move(pawn, pawn_location, pawn_end_location, pinned_pieces, move_direction, squares, is_en_passant, en_passant_capture) {\n    let legal_boards = [];\n    let pin_direction = null;\n    let inverse_direction = null;\n\n    if (pawn_location in pinned_pieces) {\n        pin_direction = pinned_pieces[pawn_location];\n        inverse_direction = [pin_direction[0] * -1, pin_direction[1] * -1];\n\n        /* Can only move towards King or away from king when pinned */\n        if (move_direction.toString() === pin_direction.toString() || move_direction.toString() === inverse_direction.toString()) {\n            if (is_en_passant) {\n                legal_boards.push(en_passant(pawn, pawn_location, pawn_end_location, en_passant_capture, squares));\n            }\n            else {\n                legal_boards.push(make_move(pawn, pawn_location, pawn_end_location, squares));\n            }\n        }\n    }\n    else {\n        if (is_en_passant) {\n            legal_boards.push(en_passant(pawn, pawn_location, pawn_end_location, en_passant_capture, squares));\n        }\n        else {\n            /*Handle Promotions*/\n            if (pawn_end_location >= 91 || pawn_end_location <= 28) {\n                let knight_piece = new Knight(pawn.player);\n                let bishop_piece = new Bishop(pawn.player);\n                let rook_piece = new Rook(pawn.player);\n                let queen_piece = new Queen(pawn.player);\n\n                let pieces = [knight_piece, bishop_piece, rook_piece, queen_piece];\n\n                for (var k = 0; k < pieces.length; k++) {\n                    legal_boards.push(make_move(pieces[k], pawn_location, pawn_end_location, squares));\n                }\n            }\n            else {\n                legal_boards.push(make_move(pawn, pawn_location, pawn_end_location, squares));\n            }\n        }\n    }\n    return legal_boards;\n}\n\n/* Get possible moves and captures for rooks, queens, and bishops (straight pieces) with respect to direction */\nfunction moves_and_captures(squares, move_direction, start_location, player, piece) {\n    let legal_boards = [];\n    let end_location = direction(move_direction, start_location, player);\n\n    while (squares[end_location] === null) {\n        legal_boards.push(make_move(piece, start_location, end_location, squares));\n        end_location = direction(move_direction, end_location, player);\n    }\n    if (squares[end_location] !== 'boundary' && squares[end_location].player !== player) {\n        legal_boards.push(make_move(piece, start_location, end_location, squares));\n    }\n    return legal_boards;\n}\n/* Get Knight move directions */\nfunction get_knight_moves(location, player) {\n\n    let up_right = right(1, forward(2, location, player), player);\n    let up_left = left(1, forward(2, location, player), player);\n    let down_right = right(1, back(2, location, player), player);\n    let down_left = left(1, back(2, location, player), player);\n    let right_up = right(2, forward(1, location, player), player);\n    let right_down = right(2, back(1, location, player), player);\n    let left_up = left(2, forward(1, location, player), player);\n    let left_down = left(2, back(1, location, player), player);\n\n    let moves = [up_right, up_left, down_right, down_left, right_up, right_down, left_up, left_down];\n    return moves;\n}\n/* Get King move directions */\nfunction get_king_moves(location, player) {\n\n    let up = forward(1, location, player);\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let move_left = left(1, location, player);\n    let move_right = right(1, location, player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let down = back(1, location, player);\n\n    let moves = [up, up_right, up_left, move_left, move_right, down_right, down_left, down];\n    return moves;\n}\n\n/* Standard move making.  Set start square to null and end square to piece value */\nfunction make_move(piece, start, end, squares) {\n    squares = squares.slice();\n    squares[start] = null;\n    squares[end] = piece;\n    return [squares, [start, end, piece, { 'standard': true }]];\n}\n/* Castling Requires special move making */\nfunction castle(king, king_start, king_end, rook, rook_start, rook_end, squares) {\n    squares = squares.slice();\n    squares[king_start] = null;\n    squares[rook_start] = null;\n    squares[king_end] = king;\n    squares[rook_end] = rook;\n\n    return [squares, [king_start, king_end, king, { 'castle': [rook_start, rook_end, rook] }]];\n}\n/* En Passant requires special move making */\nfunction en_passant(piece, start, end, captured_location, squares) {\n    squares = squares.slice();\n    squares[start] = null;\n    squares[end] = piece;\n    squares[captured_location] = null;\n\n    return [squares, [start, end, piece, { 'en_passant': captured_location }]];\n}\n\n/* Abstact away difference between black and white moves. All from perspective of player. */\nfunction direction(directions, location, player) {\n    let x = directions[0];\n    let y = directions[1];\n\n    let up_right = right(1, forward(1, location, player), player);\n    let up_left = left(1, forward(1, location, player), player);\n    let down_right = right(1, back(1, location, player), player);\n    let down_left = left(1, back(1, location, player), player);\n    let up = forward(1, location, player);\n    let down = back(1, location, player);\n    let move_right = right(1, location, player);\n    let move_left = left(1, location, player);\n\n    if (x === 0 && y === 1) {\n        return up;\n    }\n    else if (x === -1 && y === 1) {\n        return up_left;\n    }\n    else if (x === 1 && y === 1) {\n        return up_right;\n    }\n    else if (x === 1 && y === 0) {\n        return move_right;\n    }\n    else if (x === -1 && y === 0) {\n        return move_left;\n    }\n    else if (x === 1 && y === -1) {\n        return down_right;\n    }\n    else if (x === -1 && y === -1) {\n        return down_left;\n    }\n    else if (x === 0 && y === -1) {\n        return down;\n    }\n}\n\nfunction forward(distance, location, player) {\n    if (player === 'white') {\n        return location - 10 * distance;\n    }\n    else {\n        return location + 10 * distance;\n    }\n}\nfunction back(distance, location, player) {\n    if (player === 'white') {\n        return location + 10 * distance;\n    }\n    else {\n        return location - 10 * distance;\n    }\n}\nfunction left(distance, location, player) {\n    if (player === 'white') {\n        return location - distance;\n    }\n    else {\n        return location + distance;\n    }\n}\nfunction right(distance, location, player) {\n    if (player === 'white') {\n        return location + distance;\n    }\n    else {\n        return location - distance;\n    }\n}\n\n/******************************************************** Board Representation Functions  **********************************************/\n\n/* Add padding around board so moves don't wrap. Get king locations while looping. */\nfunction engine_squares(squares) {\n    let engine_squares = Array(120).fill(null);\n    let count = 0;\n    let index = 0;\n    let white_king_location = null;\n    let black_king_location = null;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y < 10; y++) {\n            /*if boundary square*/\n            index = i * 10 + y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                engine_squares[index] = 'boundary';\n            }\n            else {\n                engine_squares[index] = squares[count];\n                if (squares[count] !== null && squares[count].name === \"King\") {\n                    if (squares[count].player === \"white\") {\n                        white_king_location = index;\n                    }\n                    else {\n                        black_king_location = index;\n                    }\n                }\n                count = count + 1;\n            }\n        }\n    }\n    return [engine_squares, white_king_location, black_king_location];\n}\n/* Turn padded board back into 64 Square board */\nfunction normal_squares(engine_squares) {\n    let squares = Array(64).fill(null);\n    let count = 0;\n    let index = 0;\n\n    for (var i = 0; i < 12; i++) {\n        for (var y = 0; y < 10; y++) {\n            /*if boundary square*/\n            index = i * 10 + y;\n            if (y === 0 || y === 9 || i === 0 || i === 1 || i === 10 || i === 11) {\n                //do nothing\n            }\n            else {\n                squares[count] = engine_squares[index];\n                count = count + 1;\n            }\n        }\n    }\n    return squares;\n}\n\n/* Represent board as a string for comparisons */\nfunction squares_repr(squares) {\n    let squares_rep = squares.slice();\n    for (var i = 0; i < squares_rep.length; i++) {\n        if (squares_rep[i] != null && squares_rep[i] !== 'boundary') {\n            squares_rep[i] = squares_rep[i].name + squares_rep[i].player;\n        }\n    }\n    return squares_rep.toString();\n}\n\nexport { legal_moves, is_legal, engine_squares, normal_squares }\n","import { initialize_engine_board } from './Pieces.js';\nimport { make_engine_move, Game } from './Engine.js';\nimport { legal_moves} from './EngineMoves';\n\n/* Compare possible move generation to known possible move generation */\nfunction test() {\n    /* Initialize empty board.*/\n    var t0 = performance.now();\n    let test_board = initialize_engine_board();\n    let position = legal_moves(test_board, 'white', 95, 25)[0];\n\n    let positions = get_positions(2, position, 'black');\n    let total_positions = positions.length\n    var t1 = performance.now();\n    console.log('nodes per second ', total_positions / ((t1 - t0) / 1000), 'total_positions: ', total_positions)\n\n    test_game();\n}\n\nfunction get_positions(depth, positions,player) {\n    if (depth === 0) {\n        return positions;\n    }\n    else {\n        let new_positions = [];\n  \n        for (var i = 0; i < positions.length; i++) {\n            const current_board = positions[i][0];\n            const current_move = positions[i][1];\n            const new_board = make_engine_move(current_board, current_move);\n\n            new_positions = new_positions.concat(legal_moves(new_board, player,95,25)[0]);\n  \n        }\n        let new_player = (player === 'white') ? 'black' :'white';\n        return get_positions(depth - 1, new_positions, new_player);\n    }\n}\n\nfunction test_game() {\n    let chess_game = new Game('white', initialize_engine_board());\n    chess_game.set_king_locations();\n\n    /*\n    let position_moves = legal_moves(chess_game.squares, chess_game.player, chess_game.king_locations['white'], chess_game.king_locations['black'])[0];\n    console.log(position_moves)\n    */\n}\n\nexport { test }","import React, { Component } from 'react';\nimport './App.css';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport ReactPiece from './DragPiece';\nimport DropSquare from './DropSquare';\nimport { initialize_board, make_move, Knight, Bishop, Rook, Queen } from './Pieces.js';\nimport { legal_moves, is_legal } from './ChessMoves';\nimport { make_engine_move_react } from './Engine';\nimport { test } from './Tests';\n\nclass Chess extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{squares: initialize_board()}],\n      player: 'white',\n      drag_end: null,\n      promotion:{class:'hidden',start: null, end: null, player: null},\n      status:null,\n      test:test()\n    }\n  }\n  reset() {\n    this.setState({\n      history: [{squares: initialize_board()}],\n      player: 'white',\n      drag_end: null,\n      promotion:{class:'hidden',start: null, end: null, player: null},\n      status:null\n    });\n  }\n  back() {\n    const history = this.state.history.slice();\n    let player = this.state.player;\n\n    if (history.length === 1) {\n      return;\n    }\n    history.pop();\n    (player === 'white') ? player = 'black' : player = 'white';\n\n    this.setState({\n      history: history,\n      player:player,\n      status:null\n    });\n  }\n\n  engine_move() {\n    const history = this.state.history.slice();\n    const squares = history[history.length - 1].squares.slice();\n    let player = this.state.player;\n\n    let engine_moves = legal_moves(squares, player)\n    let possible_moves = engine_moves[0];\n\n    if (engine_moves[1] !== null){\n      this.setState({\n        status: engine_moves[1]\n      });\n      return;\n    }\n\n    let move = possible_moves[Math.floor(Math.random() * possible_moves.length)][1];\n    let new_squares = make_engine_move_react(squares, move);\n\n    (player === 'white') ? player = 'black' : player = 'white';\n\n    this.setState({\n      history: history.concat([{squares: new_squares}]),\n      player:player\n    });\n  }\n\n  handle_drop(id) {\n    this.setState({drag_end: id});\n  }\n\n  handle_drag_end(id) {\n    const history = this.state.history.slice();\n    const squares = history[history.length - 1].squares.slice();\n    let drag_start = id;\n    let drag_end = this.state.drag_end;\n    let player = this.state.player;\n    let piece_copy = JSON.parse(JSON.stringify(squares[drag_start]));\n    /* promotions */\n    if ((drag_end < 8 || drag_end > 55) && piece_copy.name === 'Pawn'){\n      let promotion = {class:'promotion_container',start: drag_start, end: drag_end, player: player}\n      this.setState({promotion:promotion})\n      return;\n    }\n    this.change_states(history,squares,player,drag_start,drag_end,piece_copy)\n  };\n\n  handle_promotion(piece) {\n    const history = this.state.history.slice();\n    const squares = history[history.length - 1].squares.slice();\n    const promotion = this.state.promotion;\n\n    let start = promotion['start'];\n    let end = promotion['end'];\n    let player = promotion['player'];\n\n    this.change_states(history,squares,player,start,end,piece)\n\n    this.setState({\n      promotion:{class:'hidden',start: null, end: null, player: null}\n    });\n  }\n\n  change_states(history, squares, player, start, end, piece) {\n    let possible_moves = legal_moves(squares, player)[0];\n    make_move(start, end, squares, piece);\n\n    if (is_legal(squares, possible_moves)){\n      (player === 'white') ? player = 'black' : player = 'white';\n\n      let status = legal_moves(squares, player)[1];\n\n      this.setState({\n        history: history.concat([{squares: squares}]),\n        drag_end: null,\n        player: player,\n        status: status\n      });\n    }\n  }\n\n  render() {\n    let boards = this.state.history;\n    let current_squares = boards[boards.length-1].squares;\n    let player = this.state.player;\n    let promotion_class = this.state.promotion['class'];\n    let status = this.state.status;\n\n    return (\n    <div className = 'game_container'>\n    <div className = 'status'> {status} </div>\n      <Buttons \n      back = {() => this.back()}\n      reset = {() => this.reset()}\n      engine_move = {() => this.engine_move()}\n      />\n      <div className = 'board_container' >\n        <Board \n          squares = {current_squares}\n          onDragStart = {(id) => this.drag_start(id)}\n          onDragEnd = {(id) => this.drag_end(id)}\n          onDrop = {(id) => this.drop(id)}\n          player = {this.state.player}\n          handle_drop={(id) => this.handle_drop(id)}\n          handle_drag_end = {(id) => this.handle_drag_end(id)}\n        />\n      </div>\n      <Promotion\n        className = {promotion_class}\n        player = {player}\n        handle_promotion = {(piece) => this.handle_promotion(piece)}\n      />\n    </div>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  renderSquares() {\n    var html_board = [];\n    var color = false;\n    for (var i = 0; i < 8; i ++){\n    color = !color;\n    var html_row = [];\n      for (var k = 0; k < 8; k ++){\n        let id = i*8 + k\n        let current_square = <Square \n          value={this.props.squares[id]} \n          key={id} \n          color={color} \n          player = {this.props.player}\n          handle_drop={() => this.props.handle_drop(id)}\n          handle_drag_end = {(id) => this.props.handle_drag_end(id)}\n          id = {id}\n        />;\n        html_row.push(current_square);\n        color = !color\n      }\n      html_row = <div className = \"board_row\" key = {i}> {html_row} </div>\n      html_board.push(html_row)\n    }\n    return html_board\n  }\n  render() {\n  return (\n    <div>\n    {this.renderSquares()}\n    </div>\n  );\n  }\n}\n\nclass Square extends React.Component {\n    renderSquare(color) {\n        var class_name = \"dark square\"\n        var style = null;\n        var url = null;\n        var player = null;\n\n        if (color) {\n            class_name = \"light square\"\n        }\n        if (this.props.value) {\n            style = this.props.value.style;\n            url = this.props.value.url;\n            player = this.props.value.player;\n        }\n        if (this.props.player === player) {\n          return (\n          <div className={class_name}>\n            <ReactPiece \n              url={url} \n              id = {this.props.id}\n              handle_drag_end = {(id) => this.props.handle_drag_end(id)}\n            /> \n          </div> );\n        }\n        else {\n            return (\n            <DropSquare \n              class_name={class_name} \n              style={style} \n              handle_drop={() => this.props.handle_drop()}\n            /> );\n        }\n    }\n\n  render() {\n    var color = this.props.color;\n    return (\n    <React.Fragment>\n      {this.renderSquare(color)}\n    </React.Fragment>\n    );\n  }\n}\n\nfunction Buttons(props) {\n  return (\n    <div>\n      <button \n      className = \"reset_button\" \n      onClick={() => props.reset()} > Reset\n      </button>\n      <button \n      className = \"back_button\" \n      onClick={() => props.back()} > Back \n      </button>\n      <button \n      className = \"engine_button\" \n      onClick={() => props.engine_move()} > Engine Move\n      </button>\n    </div>\n  );\n} \n\nclass Promotion extends React.Component {\n  render(){\n    let knight_piece = new Knight(this.props.player);\n    let bishop_piece = new Bishop(this.props.player);\n    let rook_piece = new Rook(this.props.player);\n    let queen_piece = new Queen(this.props.player);\n    /*chance for crazy castling circumstance without is true*/\n    rook_piece.has_moved = true;\n\n    return (\n      <div className = {this.props.className}>\n        <div className=\"promotion\">\n            <button className = {\"promotion_button\"} style = {knight_piece.style} onClick={() => this.props.handle_promotion(knight_piece)}></button>\n            <button className = {\"promotion_button\"} style = {bishop_piece.style} onClick={() => this.props.handle_promotion(bishop_piece)}></button>\n            <button className = {\"promotion_button\"} style = {rook_piece.style} onClick={() => this.props.handle_promotion(rook_piece)}></button>\n            <button className = {\"promotion_button\"} style = {queen_piece.style} onClick={() => this.props.handle_promotion(queen_piece)}></button>\n        </div>\n      </div>\n    );\n  }\n} \n\n\nexport default DragDropContext(HTML5Backend)(Chess);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}